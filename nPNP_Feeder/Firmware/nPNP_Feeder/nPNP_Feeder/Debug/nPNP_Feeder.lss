
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000008a6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  0000094a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0d  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b10  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d0  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c9  00000000  00000000  000034d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000399a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	8f c0       	rjmp	.+286    	; 0x128 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	09 c2       	rjmp	.+1042   	; 0x438 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	17 c2       	rjmp	.+1070   	; 0x458 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 ea       	ldi	r30, 0xA6	; 166
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 31       	cpi	r26, 0x10	; 16
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e1       	ldi	r26, 0x10	; 16
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 32       	cpi	r26, 0x21	; 33
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b3 d0       	rcall	.+358    	; 0x1ce <main>
  68:	1c c4       	rjmp	.+2104   	; 0x8a2 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 67       	ori	r24, 0x70	; 112
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	80 67       	ori	r24, 0x70	; 112
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <TWI_Init>:
	psData = TWI_Read_register(0x8D);
	psData += TWI_Read_register(0x8E) << 8;

	RS485_Transmit_byte(psData);
	RS485_Transmit_byte(psData >> 8);
}
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  90:	08 95       	ret

00000092 <TWI_Write_register>:
  92:	94 ea       	ldi	r25, 0xA4	; 164
  94:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  98:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  9c:	99 23       	and	r25, r25
  9e:	e4 f7       	brge	.-8      	; 0x98 <TWI_Write_register+0x6>
  a0:	96 e4       	ldi	r25, 0x46	; 70
  a2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  a6:	94 e8       	ldi	r25, 0x84	; 132
  a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ac:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  b0:	99 23       	and	r25, r25
  b2:	e4 f7       	brge	.-8      	; 0xac <TWI_Write_register+0x1a>
  b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <TWI_Write_register+0x2c>
  c6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  d4:	88 23       	and	r24, r24
  d6:	e4 f7       	brge	.-8      	; 0xd0 <TWI_Write_register+0x3e>
  d8:	84 e9       	ldi	r24, 0x94	; 148
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  de:	08 95       	ret

000000e0 <LTR559_Init>:
  e0:	e8 e6       	ldi	r30, 0x68	; 104
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
  ea:	ec e6       	ldi	r30, 0x6C	; 108
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
  f4:	ca df       	rcall	.-108    	; 0x8a <TWI_Init>
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	8f e8       	ldi	r24, 0x8F	; 143
  fa:	cb df       	rcall	.-106    	; 0x92 <TWI_Write_register>
  fc:	6f e1       	ldi	r22, 0x1F	; 31
  fe:	82 e8       	ldi	r24, 0x82	; 130
 100:	c8 df       	rcall	.-112    	; 0x92 <TWI_Write_register>
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	c5 df       	rcall	.-118    	; 0x92 <TWI_Write_register>
 108:	68 e0       	ldi	r22, 0x08	; 8
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	c2 df       	rcall	.-124    	; 0x92 <TWI_Write_register>
 10e:	66 e9       	ldi	r22, 0x96	; 150
 110:	80 e9       	ldi	r24, 0x90	; 144
 112:	bf df       	rcall	.-130    	; 0x92 <TWI_Write_register>
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e9       	ldi	r24, 0x91	; 145
 118:	bc df       	rcall	.-136    	; 0x92 <TWI_Write_register>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	82 e9       	ldi	r24, 0x92	; 146
 11e:	b9 df       	rcall	.-142    	; 0x92 <TWI_Write_register>
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	83 e9       	ldi	r24, 0x93	; 147
 124:	b6 df       	rcall	.-148    	; 0x92 <TWI_Write_register>
 126:	08 95       	ret

00000128 <__vector_4>:

volatile int edgeCount = 0;
extern volatile float cDutyCycle;
ISR(PCINT1_vect)
{	
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	if(cDutyCycle >= 1.5f)
 14a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <cDutyCycle>
 14e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <cDutyCycle+0x1>
 152:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cDutyCycle+0x2>
 156:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cDutyCycle+0x3>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 ec       	ldi	r20, 0xC0	; 192
 160:	5f e3       	ldi	r21, 0x3F	; 63
 162:	38 d3       	rcall	.+1648   	; 0x7d4 <__gesf2>
 164:	88 23       	and	r24, r24
 166:	54 f0       	brlt	.+20     	; 0x17c <__vector_4+0x54>
	{
		edgeCount++;
 168:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 16c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 176:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <__vector_4+0x84>
	}
	else if(cDutyCycle <= 1.5f)
 17c:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <cDutyCycle>
 180:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <cDutyCycle+0x1>
 184:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cDutyCycle+0x2>
 188:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <cDutyCycle+0x3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 ec       	ldi	r20, 0xC0	; 192
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	d5 d1       	rcall	.+938    	; 0x540 <__cmpsf2>
 196:	18 16       	cp	r1, r24
 198:	4c f0       	brlt	.+18     	; 0x1ac <__vector_4+0x84>
	{
		edgeCount--;
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 19e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <main>:
float dt = 0.01; //Sample period
float eIntergral = 0; //Intergral counter
int setpoint = 0;

int main(void)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <main+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0x8>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0xa>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	Board_init();		
 1dc:	47 df       	rcall	.-370    	; 0x6c <Board_init>
	Timer_init();
 1de:	0a d1       	rcall	.+532    	; 0x3f4 <Timer_init>
	RS485_init();
 1e0:	1b d1       	rcall	.+566    	; 0x418 <RS485_init>
	LTR559_Init();
 1e2:	7e df       	rcall	.-260    	; 0xe0 <LTR559_Init>
	
	sei(); //Enable interrupts
 1e4:	78 94       	sei
	DUTY_CYCLE(1.4);
 1e6:	63 e3       	ldi	r22, 0x33	; 51
 1e8:	73 e3       	ldi	r23, 0x33	; 51
 1ea:	83 eb       	ldi	r24, 0xB3	; 179
 1ec:	9f e3       	ldi	r25, 0x3F	; 63
 1ee:	de d0       	rcall	.+444    	; 0x3ac <DUTY_CYCLE>
// 			TWI_Read_proximity();
// 			_delay_ms(10);
// 		}
		
		//Error
		int e = setpoint - edgeCount;
 1f0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <setpoint>
 1f4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <setpoint+0x1>
 1f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 200:	28 1b       	sub	r18, r24
 202:	39 0b       	sbc	r19, r25
 204:	3e 83       	std	Y+6, r19	; 0x06
 206:	2d 83       	std	Y+5, r18	; 0x05
		
		//Derivative
		float Dedt = (e - ePrev) / dt;
 208:	b9 01       	movw	r22, r18
 20a:	33 0f       	add	r19, r19
 20c:	88 0b       	sbc	r24, r24
 20e:	99 0b       	sbc	r25, r25
 210:	31 d2       	rcall	.+1122   	; 0x674 <__floatsisf>
 212:	6b 01       	movw	r12, r22
 214:	7c 01       	movw	r14, r24
 216:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <ePrev>
 21a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <ePrev+0x1>
 21e:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <ePrev+0x2>
 222:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <ePrev+0x3>
 226:	27 d1       	rcall	.+590    	; 0x476 <__subsf3>
 228:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22c:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 230:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 234:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 238:	a5 01       	movw	r20, r10
 23a:	94 01       	movw	r18, r8
 23c:	85 d1       	rcall	.+778    	; 0x548 <__divsf3>
 23e:	2b 01       	movw	r4, r22
 240:	3c 01       	movw	r6, r24
		
		//Intergral
		eIntergral = eIntergral + (e * dt);
 242:	a5 01       	movw	r20, r10
 244:	94 01       	movw	r18, r8
 246:	c7 01       	movw	r24, r14
 248:	b6 01       	movw	r22, r12
 24a:	c8 d2       	rcall	.+1424   	; 0x7dc <__mulsf3>
 24c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <eIntergral>
 250:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <eIntergral+0x1>
 254:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <eIntergral+0x2>
 258:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <eIntergral+0x3>
 25c:	0d d1       	rcall	.+538    	; 0x478 <__addsf3>
 25e:	4b 01       	movw	r8, r22
 260:	5c 01       	movw	r10, r24
 262:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <eIntergral>
 266:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <eIntergral+0x1>
 26a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <eIntergral+0x2>
 26e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <eIntergral+0x3>
		
		float u = (kp * e) + (kd * Dedt) + (ki * eIntergral);
 272:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <kp>
 276:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <kp+0x1>
 27a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <kp+0x2>
 27e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <kp+0x3>
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	aa d2       	rcall	.+1364   	; 0x7dc <__mulsf3>
 288:	69 83       	std	Y+1, r22	; 0x01
 28a:	7a 83       	std	Y+2, r23	; 0x02
 28c:	8b 83       	std	Y+3, r24	; 0x03
 28e:	9c 83       	std	Y+4, r25	; 0x04
 290:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <kd>
 294:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <kd+0x1>
 298:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <kd+0x2>
 29c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <kd+0x3>
 2a0:	c3 01       	movw	r24, r6
 2a2:	b2 01       	movw	r22, r4
 2a4:	9b d2       	rcall	.+1334   	; 0x7dc <__mulsf3>
 2a6:	9b 01       	movw	r18, r22
 2a8:	ac 01       	movw	r20, r24
 2aa:	69 81       	ldd	r22, Y+1	; 0x01
 2ac:	7a 81       	ldd	r23, Y+2	; 0x02
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	9c 81       	ldd	r25, Y+4	; 0x04
 2b2:	e2 d0       	rcall	.+452    	; 0x478 <__addsf3>
 2b4:	2b 01       	movw	r4, r22
 2b6:	3c 01       	movw	r6, r24
 2b8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ki>
 2bc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ki+0x1>
 2c0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ki+0x2>
 2c4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ki+0x3>
 2c8:	c5 01       	movw	r24, r10
 2ca:	b4 01       	movw	r22, r8
 2cc:	87 d2       	rcall	.+1294   	; 0x7dc <__mulsf3>
 2ce:	9b 01       	movw	r18, r22
 2d0:	ac 01       	movw	r20, r24
 2d2:	c3 01       	movw	r24, r6
 2d4:	b2 01       	movw	r22, r4
 2d6:	d0 d0       	rcall	.+416    	; 0x478 <__addsf3>
 2d8:	4b 01       	movw	r8, r22
 2da:	5c 01       	movw	r10, r24
		
		if(u >= 100.0f)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	48 ec       	ldi	r20, 0xC8	; 200
 2e2:	52 e4       	ldi	r21, 0x42	; 66
 2e4:	77 d2       	rcall	.+1262   	; 0x7d4 <__gesf2>
 2e6:	88 23       	and	r24, r24
 2e8:	44 f0       	brlt	.+16     	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
		{
			u = 100.0f;
 2ea:	0f 2e       	mov	r0, r31
 2ec:	81 2c       	mov	r8, r1
 2ee:	91 2c       	mov	r9, r1
 2f0:	f8 ec       	ldi	r31, 0xC8	; 200
 2f2:	af 2e       	mov	r10, r31
 2f4:	f2 e4       	ldi	r31, 0x42	; 66
 2f6:	bf 2e       	mov	r11, r31
 2f8:	f0 2d       	mov	r31, r0
		}
		if(u <= -100.0f)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	48 ec       	ldi	r20, 0xC8	; 200
 300:	52 ec       	ldi	r21, 0xC2	; 194
 302:	c5 01       	movw	r24, r10
 304:	b4 01       	movw	r22, r8
 306:	1c d1       	rcall	.+568    	; 0x540 <__cmpsf2>
 308:	18 16       	cp	r1, r24
 30a:	44 f0       	brlt	.+16     	; 0x31c <__stack+0x1d>
		{
			u = -100.0f;
 30c:	0f 2e       	mov	r0, r31
 30e:	81 2c       	mov	r8, r1
 310:	91 2c       	mov	r9, r1
 312:	f8 ec       	ldi	r31, 0xC8	; 200
 314:	af 2e       	mov	r10, r31
 316:	f2 ec       	ldi	r31, 0xC2	; 194
 318:	bf 2e       	mov	r11, r31
 31a:	f0 2d       	mov	r31, r0
		}
		
		float test = 1.5f + (0.005f * u);
 31c:	2a e0       	ldi	r18, 0x0A	; 10
 31e:	37 ed       	ldi	r19, 0xD7	; 215
 320:	43 ea       	ldi	r20, 0xA3	; 163
 322:	5b e3       	ldi	r21, 0x3B	; 59
 324:	c5 01       	movw	r24, r10
 326:	b4 01       	movw	r22, r8
 328:	59 d2       	rcall	.+1202   	; 0x7dc <__mulsf3>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 ec       	ldi	r20, 0xC0	; 192
 330:	5f e3       	ldi	r21, 0x3F	; 63
 332:	a2 d0       	rcall	.+324    	; 0x478 <__addsf3>
		DUTY_CYCLE(test);
 334:	3b d0       	rcall	.+118    	; 0x3ac <DUTY_CYCLE>
// 		RS485_Transmit_byte((int16_t)edgeCount);
// 		RS485_Transmit_byte((int16_t)edgeCount >> 8);
// 		RS485_Transmit_byte((int16_t)setpoint);
// 		RS485_Transmit_byte((int16_t)setpoint >> 8	
	
		ePrev = e;
 336:	c0 92 18 01 	sts	0x0118, r12	; 0x800118 <ePrev>
 33a:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <ePrev+0x1>
 33e:	e0 92 1a 01 	sts	0x011A, r14	; 0x80011a <ePrev+0x2>
 342:	f0 92 1b 01 	sts	0x011B, r15	; 0x80011b <ePrev+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	8f ed       	ldi	r24, 0xDF	; 223
 348:	9b ea       	ldi	r25, 0xAB	; 171
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <__stack+0x4b>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <__stack+0x51>
 350:	00 00       	nop
		_delay_ms(11);
		
		switch(uartData)
 352:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uartData>
 356:	83 36       	cpi	r24, 0x63	; 99
 358:	f1 f0       	breq	.+60     	; 0x396 <__stack+0x97>
 35a:	80 37       	cpi	r24, 0x70	; 112
 35c:	21 f0       	breq	.+8      	; 0x366 <__stack+0x67>
 35e:	82 36       	cpi	r24, 0x62	; 98
 360:	09 f0       	breq	.+2      	; 0x364 <__stack+0x65>
 362:	46 cf       	rjmp	.-372    	; 0x1f0 <main+0x22>
 364:	10 c0       	rjmp	.+32     	; 0x386 <__stack+0x87>
		{
			case 'p':
				if(e == 0)
 366:	2d 81       	ldd	r18, Y+5	; 0x05
 368:	3e 81       	ldd	r19, Y+6	; 0x06
 36a:	23 2b       	or	r18, r19
 36c:	49 f4       	brne	.+18     	; 0x380 <__stack+0x81>
				{
					setpoint += 4; //set pid threshold here
 36e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setpoint>
 372:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setpoint+0x1>
 376:	04 96       	adiw	r24, 0x04	; 4
 378:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setpoint+0x1>
 37c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setpoint>
				}
				uartData = 0;
 380:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <uartData>
				break;
 384:	35 cf       	rjmp	.-406    	; 0x1f0 <main+0x22>
			case 'b':
				DUTY_CYCLE(1.4);
 386:	63 e3       	ldi	r22, 0x33	; 51
 388:	73 e3       	ldi	r23, 0x33	; 51
 38a:	83 eb       	ldi	r24, 0xB3	; 179
 38c:	9f e3       	ldi	r25, 0x3F	; 63
 38e:	0e d0       	rcall	.+28     	; 0x3ac <DUTY_CYCLE>
				uartData = 0;	
 390:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <uartData>
				break;
 394:	2d cf       	rjmp	.-422    	; 0x1f0 <main+0x22>
			case 'c':
				PORTD &= ~(1 << LED_B);
 396:	8b b1       	in	r24, 0x0b	; 11
 398:	8f 7d       	andi	r24, 0xDF	; 223
 39a:	8b b9       	out	0x0b, r24	; 11
				DUTY_CYCLE(1.6);
 39c:	6d ec       	ldi	r22, 0xCD	; 205
 39e:	7c ec       	ldi	r23, 0xCC	; 204
 3a0:	8c ec       	ldi	r24, 0xCC	; 204
 3a2:	9f e3       	ldi	r25, 0x3F	; 63
 3a4:	03 d0       	rcall	.+6      	; 0x3ac <DUTY_CYCLE>
				uartData = 0;
 3a6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <uartData>
				break;
 3aa:	22 cf       	rjmp	.-444    	; 0x1f0 <main+0x22>

000003ac <DUTY_CYCLE>:
	DUTY_CYCLE(1.5); //Duty cycle
	ICR1  = 2500; //50Hz
}

void DUTY_CYCLE(float x)
{
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	6b 01       	movw	r12, r22
 3b6:	7c 01       	movw	r14, r24
	 OCR1A = (uint16_t)(2500 - (125 * x));
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	4a ef       	ldi	r20, 0xFA	; 250
 3be:	52 e4       	ldi	r21, 0x42	; 66
 3c0:	0d d2       	rcall	.+1050   	; 0x7dc <__mulsf3>
 3c2:	9b 01       	movw	r18, r22
 3c4:	ac 01       	movw	r20, r24
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e4       	ldi	r23, 0x40	; 64
 3ca:	8c e1       	ldi	r24, 0x1C	; 28
 3cc:	95 e4       	ldi	r25, 0x45	; 69
 3ce:	53 d0       	rcall	.+166    	; 0x476 <__subsf3>
 3d0:	23 d1       	rcall	.+582    	; 0x618 <__fixunssfsi>
 3d2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 3d6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	 cDutyCycle = x;
 3da:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <cDutyCycle>
 3de:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <cDutyCycle+0x1>
 3e2:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <cDutyCycle+0x2>
 3e6:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <cDutyCycle+0x3>
}
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	08 95       	ret

000003f4 <Timer_init>:

volatile float cDutyCycle = 0.0;
void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 3fa:	83 e1       	ldi	r24, 0x13	; 19
 3fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	DUTY_CYCLE(1.5); //Duty cycle
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	9f e3       	ldi	r25, 0x3F	; 63
 408:	d1 df       	rcall	.-94     	; 0x3ac <DUTY_CYCLE>
	ICR1  = 2500; //50Hz
 40a:	84 ec       	ldi	r24, 0xC4	; 196
 40c:	99 e0       	ldi	r25, 0x09	; 9
 40e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 412:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 416:	08 95       	ret

00000418 <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 418:	87 e6       	ldi	r24, 0x67	; 103
 41a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 41e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 422:	e1 ec       	ldi	r30, 0xC1	; 193
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	88 6d       	ori	r24, 0xD8	; 216
 42a:	80 83       	st	Z, r24
 42c:	e2 ec       	ldi	r30, 0xC2	; 194
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	86 60       	ori	r24, 0x06	; 6
 434:	80 83       	st	Z, r24
 436:	08 95       	ret

00000438 <__vector_18>:

ISR(USART_RX_vect)
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	8f 93       	push	r24
	uartData = UDR0; //Received data must be read to clear RXC flag
 444:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 448:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uartData>
}
 44c:	8f 91       	pop	r24
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_20>:

ISR(USART_TX_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 464:	85 b1       	in	r24, 0x05	; 5
 466:	8b 7f       	andi	r24, 0xFB	; 251
 468:	85 b9       	out	0x05, r24	; 5
 46a:	8f 91       	pop	r24
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__subsf3>:
 476:	50 58       	subi	r21, 0x80	; 128

00000478 <__addsf3>:
 478:	bb 27       	eor	r27, r27
 47a:	aa 27       	eor	r26, r26
 47c:	0e d0       	rcall	.+28     	; 0x49a <__addsf3x>
 47e:	70 c1       	rjmp	.+736    	; 0x760 <__fp_round>
 480:	61 d1       	rcall	.+706    	; 0x744 <__fp_pscA>
 482:	30 f0       	brcs	.+12     	; 0x490 <__addsf3+0x18>
 484:	66 d1       	rcall	.+716    	; 0x752 <__fp_pscB>
 486:	20 f0       	brcs	.+8      	; 0x490 <__addsf3+0x18>
 488:	31 f4       	brne	.+12     	; 0x496 <__addsf3+0x1e>
 48a:	9f 3f       	cpi	r25, 0xFF	; 255
 48c:	11 f4       	brne	.+4      	; 0x492 <__addsf3+0x1a>
 48e:	1e f4       	brtc	.+6      	; 0x496 <__addsf3+0x1e>
 490:	56 c1       	rjmp	.+684    	; 0x73e <__fp_nan>
 492:	0e f4       	brtc	.+2      	; 0x496 <__addsf3+0x1e>
 494:	e0 95       	com	r30
 496:	e7 fb       	bst	r30, 7
 498:	4c c1       	rjmp	.+664    	; 0x732 <__fp_inf>

0000049a <__addsf3x>:
 49a:	e9 2f       	mov	r30, r25
 49c:	72 d1       	rcall	.+740    	; 0x782 <__fp_split3>
 49e:	80 f3       	brcs	.-32     	; 0x480 <__addsf3+0x8>
 4a0:	ba 17       	cp	r27, r26
 4a2:	62 07       	cpc	r22, r18
 4a4:	73 07       	cpc	r23, r19
 4a6:	84 07       	cpc	r24, r20
 4a8:	95 07       	cpc	r25, r21
 4aa:	18 f0       	brcs	.+6      	; 0x4b2 <__addsf3x+0x18>
 4ac:	71 f4       	brne	.+28     	; 0x4ca <__addsf3x+0x30>
 4ae:	9e f5       	brtc	.+102    	; 0x516 <__addsf3x+0x7c>
 4b0:	8a c1       	rjmp	.+788    	; 0x7c6 <__fp_zero>
 4b2:	0e f4       	brtc	.+2      	; 0x4b6 <__addsf3x+0x1c>
 4b4:	e0 95       	com	r30
 4b6:	0b 2e       	mov	r0, r27
 4b8:	ba 2f       	mov	r27, r26
 4ba:	a0 2d       	mov	r26, r0
 4bc:	0b 01       	movw	r0, r22
 4be:	b9 01       	movw	r22, r18
 4c0:	90 01       	movw	r18, r0
 4c2:	0c 01       	movw	r0, r24
 4c4:	ca 01       	movw	r24, r20
 4c6:	a0 01       	movw	r20, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	ff 27       	eor	r31, r31
 4cc:	59 1b       	sub	r21, r25
 4ce:	99 f0       	breq	.+38     	; 0x4f6 <__addsf3x+0x5c>
 4d0:	59 3f       	cpi	r21, 0xF9	; 249
 4d2:	50 f4       	brcc	.+20     	; 0x4e8 <__addsf3x+0x4e>
 4d4:	50 3e       	cpi	r21, 0xE0	; 224
 4d6:	68 f1       	brcs	.+90     	; 0x532 <__addsf3x+0x98>
 4d8:	1a 16       	cp	r1, r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	a2 2f       	mov	r26, r18
 4de:	23 2f       	mov	r18, r19
 4e0:	34 2f       	mov	r19, r20
 4e2:	44 27       	eor	r20, r20
 4e4:	58 5f       	subi	r21, 0xF8	; 248
 4e6:	f3 cf       	rjmp	.-26     	; 0x4ce <__addsf3x+0x34>
 4e8:	46 95       	lsr	r20
 4ea:	37 95       	ror	r19
 4ec:	27 95       	ror	r18
 4ee:	a7 95       	ror	r26
 4f0:	f0 40       	sbci	r31, 0x00	; 0
 4f2:	53 95       	inc	r21
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__addsf3x+0x4e>
 4f6:	7e f4       	brtc	.+30     	; 0x516 <__addsf3x+0x7c>
 4f8:	1f 16       	cp	r1, r31
 4fa:	ba 0b       	sbc	r27, r26
 4fc:	62 0b       	sbc	r22, r18
 4fe:	73 0b       	sbc	r23, r19
 500:	84 0b       	sbc	r24, r20
 502:	ba f0       	brmi	.+46     	; 0x532 <__addsf3x+0x98>
 504:	91 50       	subi	r25, 0x01	; 1
 506:	a1 f0       	breq	.+40     	; 0x530 <__addsf3x+0x96>
 508:	ff 0f       	add	r31, r31
 50a:	bb 1f       	adc	r27, r27
 50c:	66 1f       	adc	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	c2 f7       	brpl	.-16     	; 0x504 <__addsf3x+0x6a>
 514:	0e c0       	rjmp	.+28     	; 0x532 <__addsf3x+0x98>
 516:	ba 0f       	add	r27, r26
 518:	62 1f       	adc	r22, r18
 51a:	73 1f       	adc	r23, r19
 51c:	84 1f       	adc	r24, r20
 51e:	48 f4       	brcc	.+18     	; 0x532 <__addsf3x+0x98>
 520:	87 95       	ror	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f7 95       	ror	r31
 52a:	9e 3f       	cpi	r25, 0xFE	; 254
 52c:	08 f0       	brcs	.+2      	; 0x530 <__addsf3x+0x96>
 52e:	b3 cf       	rjmp	.-154    	; 0x496 <__addsf3+0x1e>
 530:	93 95       	inc	r25
 532:	88 0f       	add	r24, r24
 534:	08 f0       	brcs	.+2      	; 0x538 <__addsf3x+0x9e>
 536:	99 27       	eor	r25, r25
 538:	ee 0f       	add	r30, r30
 53a:	97 95       	ror	r25
 53c:	87 95       	ror	r24
 53e:	08 95       	ret

00000540 <__cmpsf2>:
 540:	d4 d0       	rcall	.+424    	; 0x6ea <__fp_cmp>
 542:	08 f4       	brcc	.+2      	; 0x546 <__cmpsf2+0x6>
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	08 95       	ret

00000548 <__divsf3>:
 548:	0c d0       	rcall	.+24     	; 0x562 <__divsf3x>
 54a:	0a c1       	rjmp	.+532    	; 0x760 <__fp_round>
 54c:	02 d1       	rcall	.+516    	; 0x752 <__fp_pscB>
 54e:	40 f0       	brcs	.+16     	; 0x560 <__divsf3+0x18>
 550:	f9 d0       	rcall	.+498    	; 0x744 <__fp_pscA>
 552:	30 f0       	brcs	.+12     	; 0x560 <__divsf3+0x18>
 554:	21 f4       	brne	.+8      	; 0x55e <__divsf3+0x16>
 556:	5f 3f       	cpi	r21, 0xFF	; 255
 558:	19 f0       	breq	.+6      	; 0x560 <__divsf3+0x18>
 55a:	eb c0       	rjmp	.+470    	; 0x732 <__fp_inf>
 55c:	51 11       	cpse	r21, r1
 55e:	34 c1       	rjmp	.+616    	; 0x7c8 <__fp_szero>
 560:	ee c0       	rjmp	.+476    	; 0x73e <__fp_nan>

00000562 <__divsf3x>:
 562:	0f d1       	rcall	.+542    	; 0x782 <__fp_split3>
 564:	98 f3       	brcs	.-26     	; 0x54c <__divsf3+0x4>

00000566 <__divsf3_pse>:
 566:	99 23       	and	r25, r25
 568:	c9 f3       	breq	.-14     	; 0x55c <__divsf3+0x14>
 56a:	55 23       	and	r21, r21
 56c:	b1 f3       	breq	.-20     	; 0x55a <__divsf3+0x12>
 56e:	95 1b       	sub	r25, r21
 570:	55 0b       	sbc	r21, r21
 572:	bb 27       	eor	r27, r27
 574:	aa 27       	eor	r26, r26
 576:	62 17       	cp	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	38 f0       	brcs	.+14     	; 0x58c <__divsf3_pse+0x26>
 57e:	9f 5f       	subi	r25, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	44 1f       	adc	r20, r20
 588:	aa 1f       	adc	r26, r26
 58a:	a9 f3       	breq	.-22     	; 0x576 <__divsf3_pse+0x10>
 58c:	33 d0       	rcall	.+102    	; 0x5f4 <__divsf3_pse+0x8e>
 58e:	0e 2e       	mov	r0, r30
 590:	3a f0       	brmi	.+14     	; 0x5a0 <__divsf3_pse+0x3a>
 592:	e0 e8       	ldi	r30, 0x80	; 128
 594:	30 d0       	rcall	.+96     	; 0x5f6 <__divsf3_pse+0x90>
 596:	91 50       	subi	r25, 0x01	; 1
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	e6 95       	lsr	r30
 59c:	00 1c       	adc	r0, r0
 59e:	ca f7       	brpl	.-14     	; 0x592 <__divsf3_pse+0x2c>
 5a0:	29 d0       	rcall	.+82     	; 0x5f4 <__divsf3_pse+0x8e>
 5a2:	fe 2f       	mov	r31, r30
 5a4:	27 d0       	rcall	.+78     	; 0x5f4 <__divsf3_pse+0x8e>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	bb 1f       	adc	r27, r27
 5ae:	26 17       	cp	r18, r22
 5b0:	37 07       	cpc	r19, r23
 5b2:	48 07       	cpc	r20, r24
 5b4:	ab 07       	cpc	r26, r27
 5b6:	b0 e8       	ldi	r27, 0x80	; 128
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__divsf3_pse+0x56>
 5ba:	bb 0b       	sbc	r27, r27
 5bc:	80 2d       	mov	r24, r0
 5be:	bf 01       	movw	r22, r30
 5c0:	ff 27       	eor	r31, r31
 5c2:	93 58       	subi	r25, 0x83	; 131
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	2a f0       	brmi	.+10     	; 0x5d2 <__divsf3_pse+0x6c>
 5c8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ca:	51 05       	cpc	r21, r1
 5cc:	68 f0       	brcs	.+26     	; 0x5e8 <__divsf3_pse+0x82>
 5ce:	b1 c0       	rjmp	.+354    	; 0x732 <__fp_inf>
 5d0:	fb c0       	rjmp	.+502    	; 0x7c8 <__fp_szero>
 5d2:	5f 3f       	cpi	r21, 0xFF	; 255
 5d4:	ec f3       	brlt	.-6      	; 0x5d0 <__divsf3_pse+0x6a>
 5d6:	98 3e       	cpi	r25, 0xE8	; 232
 5d8:	dc f3       	brlt	.-10     	; 0x5d0 <__divsf3_pse+0x6a>
 5da:	86 95       	lsr	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b7 95       	ror	r27
 5e2:	f7 95       	ror	r31
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	c9 f7       	brne	.-14     	; 0x5da <__divsf3_pse+0x74>
 5e8:	88 0f       	add	r24, r24
 5ea:	91 1d       	adc	r25, r1
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret
 5f4:	e1 e0       	ldi	r30, 0x01	; 1
 5f6:	66 0f       	add	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	bb 1f       	adc	r27, r27
 5fe:	62 17       	cp	r22, r18
 600:	73 07       	cpc	r23, r19
 602:	84 07       	cpc	r24, r20
 604:	ba 07       	cpc	r27, r26
 606:	20 f0       	brcs	.+8      	; 0x610 <__divsf3_pse+0xaa>
 608:	62 1b       	sub	r22, r18
 60a:	73 0b       	sbc	r23, r19
 60c:	84 0b       	sbc	r24, r20
 60e:	ba 0b       	sbc	r27, r26
 610:	ee 1f       	adc	r30, r30
 612:	88 f7       	brcc	.-30     	; 0x5f6 <__divsf3_pse+0x90>
 614:	e0 95       	com	r30
 616:	08 95       	ret

00000618 <__fixunssfsi>:
 618:	bc d0       	rcall	.+376    	; 0x792 <__fp_splitA>
 61a:	88 f0       	brcs	.+34     	; 0x63e <__fixunssfsi+0x26>
 61c:	9f 57       	subi	r25, 0x7F	; 127
 61e:	90 f0       	brcs	.+36     	; 0x644 <__fixunssfsi+0x2c>
 620:	b9 2f       	mov	r27, r25
 622:	99 27       	eor	r25, r25
 624:	b7 51       	subi	r27, 0x17	; 23
 626:	a0 f0       	brcs	.+40     	; 0x650 <__fixunssfsi+0x38>
 628:	d1 f0       	breq	.+52     	; 0x65e <__fixunssfsi+0x46>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	1a f0       	brmi	.+6      	; 0x63a <__fixunssfsi+0x22>
 634:	ba 95       	dec	r27
 636:	c9 f7       	brne	.-14     	; 0x62a <__fixunssfsi+0x12>
 638:	12 c0       	rjmp	.+36     	; 0x65e <__fixunssfsi+0x46>
 63a:	b1 30       	cpi	r27, 0x01	; 1
 63c:	81 f0       	breq	.+32     	; 0x65e <__fixunssfsi+0x46>
 63e:	c3 d0       	rcall	.+390    	; 0x7c6 <__fp_zero>
 640:	b1 e0       	ldi	r27, 0x01	; 1
 642:	08 95       	ret
 644:	c0 c0       	rjmp	.+384    	; 0x7c6 <__fp_zero>
 646:	67 2f       	mov	r22, r23
 648:	78 2f       	mov	r23, r24
 64a:	88 27       	eor	r24, r24
 64c:	b8 5f       	subi	r27, 0xF8	; 248
 64e:	39 f0       	breq	.+14     	; 0x65e <__fixunssfsi+0x46>
 650:	b9 3f       	cpi	r27, 0xF9	; 249
 652:	cc f3       	brlt	.-14     	; 0x646 <__fixunssfsi+0x2e>
 654:	86 95       	lsr	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b3 95       	inc	r27
 65c:	d9 f7       	brne	.-10     	; 0x654 <__fixunssfsi+0x3c>
 65e:	3e f4       	brtc	.+14     	; 0x66e <__fixunssfsi+0x56>
 660:	90 95       	com	r25
 662:	80 95       	com	r24
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__floatunsisf>:
 670:	e8 94       	clt
 672:	09 c0       	rjmp	.+18     	; 0x686 <__floatsisf+0x12>

00000674 <__floatsisf>:
 674:	97 fb       	bst	r25, 7
 676:	3e f4       	brtc	.+14     	; 0x686 <__floatsisf+0x12>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	99 23       	and	r25, r25
 688:	a9 f0       	breq	.+42     	; 0x6b4 <__floatsisf+0x40>
 68a:	f9 2f       	mov	r31, r25
 68c:	96 e9       	ldi	r25, 0x96	; 150
 68e:	bb 27       	eor	r27, r27
 690:	93 95       	inc	r25
 692:	f6 95       	lsr	r31
 694:	87 95       	ror	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f1 11       	cpse	r31, r1
 69e:	f8 cf       	rjmp	.-16     	; 0x690 <__floatsisf+0x1c>
 6a0:	fa f4       	brpl	.+62     	; 0x6e0 <__floatsisf+0x6c>
 6a2:	bb 0f       	add	r27, r27
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__floatsisf+0x36>
 6a6:	60 ff       	sbrs	r22, 0
 6a8:	1b c0       	rjmp	.+54     	; 0x6e0 <__floatsisf+0x6c>
 6aa:	6f 5f       	subi	r22, 0xFF	; 255
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <__floatsisf+0x6c>
 6b4:	88 23       	and	r24, r24
 6b6:	11 f0       	breq	.+4      	; 0x6bc <__floatsisf+0x48>
 6b8:	96 e9       	ldi	r25, 0x96	; 150
 6ba:	11 c0       	rjmp	.+34     	; 0x6de <__floatsisf+0x6a>
 6bc:	77 23       	and	r23, r23
 6be:	21 f0       	breq	.+8      	; 0x6c8 <__floatsisf+0x54>
 6c0:	9e e8       	ldi	r25, 0x8E	; 142
 6c2:	87 2f       	mov	r24, r23
 6c4:	76 2f       	mov	r23, r22
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <__floatsisf+0x5e>
 6c8:	66 23       	and	r22, r22
 6ca:	71 f0       	breq	.+28     	; 0x6e8 <__floatsisf+0x74>
 6cc:	96 e8       	ldi	r25, 0x86	; 134
 6ce:	86 2f       	mov	r24, r22
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	2a f0       	brmi	.+10     	; 0x6e0 <__floatsisf+0x6c>
 6d6:	9a 95       	dec	r25
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	da f7       	brpl	.-10     	; 0x6d6 <__floatsisf+0x62>
 6e0:	88 0f       	add	r24, r24
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret

000006ea <__fp_cmp>:
 6ea:	99 0f       	add	r25, r25
 6ec:	00 08       	sbc	r0, r0
 6ee:	55 0f       	add	r21, r21
 6f0:	aa 0b       	sbc	r26, r26
 6f2:	e0 e8       	ldi	r30, 0x80	; 128
 6f4:	fe ef       	ldi	r31, 0xFE	; 254
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	e8 07       	cpc	r30, r24
 6fc:	f9 07       	cpc	r31, r25
 6fe:	c0 f0       	brcs	.+48     	; 0x730 <__fp_cmp+0x46>
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	e4 07       	cpc	r30, r20
 706:	f5 07       	cpc	r31, r21
 708:	98 f0       	brcs	.+38     	; 0x730 <__fp_cmp+0x46>
 70a:	62 1b       	sub	r22, r18
 70c:	73 0b       	sbc	r23, r19
 70e:	84 0b       	sbc	r24, r20
 710:	95 0b       	sbc	r25, r21
 712:	39 f4       	brne	.+14     	; 0x722 <__fp_cmp+0x38>
 714:	0a 26       	eor	r0, r26
 716:	61 f0       	breq	.+24     	; 0x730 <__fp_cmp+0x46>
 718:	23 2b       	or	r18, r19
 71a:	24 2b       	or	r18, r20
 71c:	25 2b       	or	r18, r21
 71e:	21 f4       	brne	.+8      	; 0x728 <__fp_cmp+0x3e>
 720:	08 95       	ret
 722:	0a 26       	eor	r0, r26
 724:	09 f4       	brne	.+2      	; 0x728 <__fp_cmp+0x3e>
 726:	a1 40       	sbci	r26, 0x01	; 1
 728:	a6 95       	lsr	r26
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	81 1d       	adc	r24, r1
 72e:	81 1d       	adc	r24, r1
 730:	08 95       	ret

00000732 <__fp_inf>:
 732:	97 f9       	bld	r25, 7
 734:	9f 67       	ori	r25, 0x7F	; 127
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	08 95       	ret

0000073e <__fp_nan>:
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	08 95       	ret

00000744 <__fp_pscA>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	09 06       	cpc	r0, r25
 750:	08 95       	ret

00000752 <__fp_pscB>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	12 16       	cp	r1, r18
 758:	13 06       	cpc	r1, r19
 75a:	14 06       	cpc	r1, r20
 75c:	05 06       	cpc	r0, r21
 75e:	08 95       	ret

00000760 <__fp_round>:
 760:	09 2e       	mov	r0, r25
 762:	03 94       	inc	r0
 764:	00 0c       	add	r0, r0
 766:	11 f4       	brne	.+4      	; 0x76c <__fp_round+0xc>
 768:	88 23       	and	r24, r24
 76a:	52 f0       	brmi	.+20     	; 0x780 <__fp_round+0x20>
 76c:	bb 0f       	add	r27, r27
 76e:	40 f4       	brcc	.+16     	; 0x780 <__fp_round+0x20>
 770:	bf 2b       	or	r27, r31
 772:	11 f4       	brne	.+4      	; 0x778 <__fp_round+0x18>
 774:	60 ff       	sbrs	r22, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <__fp_round+0x20>
 778:	6f 5f       	subi	r22, 0xFF	; 255
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__fp_split3>:
 782:	57 fd       	sbrc	r21, 7
 784:	90 58       	subi	r25, 0x80	; 128
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	59 f0       	breq	.+22     	; 0x7a2 <__fp_splitA+0x10>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	71 f0       	breq	.+28     	; 0x7ac <__fp_splitA+0x1a>
 790:	47 95       	ror	r20

00000792 <__fp_splitA>:
 792:	88 0f       	add	r24, r24
 794:	97 fb       	bst	r25, 7
 796:	99 1f       	adc	r25, r25
 798:	61 f0       	breq	.+24     	; 0x7b2 <__fp_splitA+0x20>
 79a:	9f 3f       	cpi	r25, 0xFF	; 255
 79c:	79 f0       	breq	.+30     	; 0x7bc <__fp_splitA+0x2a>
 79e:	87 95       	ror	r24
 7a0:	08 95       	ret
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	f2 cf       	rjmp	.-28     	; 0x790 <__fp_split3+0xe>
 7ac:	46 95       	lsr	r20
 7ae:	f1 df       	rcall	.-30     	; 0x792 <__fp_splitA>
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <__fp_splitA+0x30>
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	f1 cf       	rjmp	.-30     	; 0x79e <__fp_splitA+0xc>
 7bc:	86 95       	lsr	r24
 7be:	71 05       	cpc	r23, r1
 7c0:	61 05       	cpc	r22, r1
 7c2:	08 94       	sec
 7c4:	08 95       	ret

000007c6 <__fp_zero>:
 7c6:	e8 94       	clt

000007c8 <__fp_szero>:
 7c8:	bb 27       	eor	r27, r27
 7ca:	66 27       	eor	r22, r22
 7cc:	77 27       	eor	r23, r23
 7ce:	cb 01       	movw	r24, r22
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__gesf2>:
 7d4:	8a df       	rcall	.-236    	; 0x6ea <__fp_cmp>
 7d6:	08 f4       	brcc	.+2      	; 0x7da <__gesf2+0x6>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	08 95       	ret

000007dc <__mulsf3>:
 7dc:	0b d0       	rcall	.+22     	; 0x7f4 <__mulsf3x>
 7de:	c0 cf       	rjmp	.-128    	; 0x760 <__fp_round>
 7e0:	b1 df       	rcall	.-158    	; 0x744 <__fp_pscA>
 7e2:	28 f0       	brcs	.+10     	; 0x7ee <__mulsf3+0x12>
 7e4:	b6 df       	rcall	.-148    	; 0x752 <__fp_pscB>
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <__mulsf3+0x12>
 7e8:	95 23       	and	r25, r21
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__mulsf3+0x12>
 7ec:	a2 cf       	rjmp	.-188    	; 0x732 <__fp_inf>
 7ee:	a7 cf       	rjmp	.-178    	; 0x73e <__fp_nan>
 7f0:	11 24       	eor	r1, r1
 7f2:	ea cf       	rjmp	.-44     	; 0x7c8 <__fp_szero>

000007f4 <__mulsf3x>:
 7f4:	c6 df       	rcall	.-116    	; 0x782 <__fp_split3>
 7f6:	a0 f3       	brcs	.-24     	; 0x7e0 <__mulsf3+0x4>

000007f8 <__mulsf3_pse>:
 7f8:	95 9f       	mul	r25, r21
 7fa:	d1 f3       	breq	.-12     	; 0x7f0 <__mulsf3+0x14>
 7fc:	95 0f       	add	r25, r21
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	55 1f       	adc	r21, r21
 802:	62 9f       	mul	r22, r18
 804:	f0 01       	movw	r30, r0
 806:	72 9f       	mul	r23, r18
 808:	bb 27       	eor	r27, r27
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	63 9f       	mul	r22, r19
 810:	aa 27       	eor	r26, r26
 812:	f0 0d       	add	r31, r0
 814:	b1 1d       	adc	r27, r1
 816:	aa 1f       	adc	r26, r26
 818:	64 9f       	mul	r22, r20
 81a:	66 27       	eor	r22, r22
 81c:	b0 0d       	add	r27, r0
 81e:	a1 1d       	adc	r26, r1
 820:	66 1f       	adc	r22, r22
 822:	82 9f       	mul	r24, r18
 824:	22 27       	eor	r18, r18
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	73 9f       	mul	r23, r19
 82e:	b0 0d       	add	r27, r0
 830:	a1 1d       	adc	r26, r1
 832:	62 1f       	adc	r22, r18
 834:	83 9f       	mul	r24, r19
 836:	a0 0d       	add	r26, r0
 838:	61 1d       	adc	r22, r1
 83a:	22 1f       	adc	r18, r18
 83c:	74 9f       	mul	r23, r20
 83e:	33 27       	eor	r19, r19
 840:	a0 0d       	add	r26, r0
 842:	61 1d       	adc	r22, r1
 844:	23 1f       	adc	r18, r19
 846:	84 9f       	mul	r24, r20
 848:	60 0d       	add	r22, r0
 84a:	21 1d       	adc	r18, r1
 84c:	82 2f       	mov	r24, r18
 84e:	76 2f       	mov	r23, r22
 850:	6a 2f       	mov	r22, r26
 852:	11 24       	eor	r1, r1
 854:	9f 57       	subi	r25, 0x7F	; 127
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	8a f0       	brmi	.+34     	; 0x87c <__mulsf3_pse+0x84>
 85a:	e1 f0       	breq	.+56     	; 0x894 <__mulsf3_pse+0x9c>
 85c:	88 23       	and	r24, r24
 85e:	4a f0       	brmi	.+18     	; 0x872 <__mulsf3_pse+0x7a>
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	bb 1f       	adc	r27, r27
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	91 50       	subi	r25, 0x01	; 1
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	a9 f7       	brne	.-22     	; 0x85c <__mulsf3_pse+0x64>
 872:	9e 3f       	cpi	r25, 0xFE	; 254
 874:	51 05       	cpc	r21, r1
 876:	70 f0       	brcs	.+28     	; 0x894 <__mulsf3_pse+0x9c>
 878:	5c cf       	rjmp	.-328    	; 0x732 <__fp_inf>
 87a:	a6 cf       	rjmp	.-180    	; 0x7c8 <__fp_szero>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	ec f3       	brlt	.-6      	; 0x87a <__mulsf3_pse+0x82>
 880:	98 3e       	cpi	r25, 0xE8	; 232
 882:	dc f3       	brlt	.-10     	; 0x87a <__mulsf3_pse+0x82>
 884:	86 95       	lsr	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	b7 95       	ror	r27
 88c:	f7 95       	ror	r31
 88e:	e7 95       	ror	r30
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c1 f7       	brne	.-16     	; 0x884 <__mulsf3_pse+0x8c>
 894:	fe 2b       	or	r31, r30
 896:	88 0f       	add	r24, r24
 898:	91 1d       	adc	r25, r1
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
