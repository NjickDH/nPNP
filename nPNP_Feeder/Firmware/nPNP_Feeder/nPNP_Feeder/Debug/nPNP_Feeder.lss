
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080010c  0080010c  00000ede  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001303  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  0000236f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9b  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d8  00000000  00000000  000042ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	0a c1       	rjmp	.+532    	; 0x21e <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	4e c4       	rjmp	.+2204   	; 0x8c2 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	5c c4       	rjmp	.+2232   	; 0x8e2 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e3       	ldi	r30, 0x3E	; 62
  48:	fe e0       	ldi	r31, 0x0E	; 14
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 30       	cpi	r26, 0x0C	; 12
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ac e0       	ldi	r26, 0x0C	; 12
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 32       	cpi	r26, 0x23	; 35
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	34 d1       	rcall	.+616    	; 0x2d0 <main>
  68:	e8 c6       	rjmp	.+3536   	; 0xe3a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 67       	ori	r24, 0x70	; 112
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	80 67       	ori	r24, 0x70	; 112
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <EEPROM_write>:
#include "eeprom.h"
#include <avr/interrupt.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	cli();
  8a:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  8c:	f9 99       	sbic	0x1f, 1	; 31
  8e:	fe cf       	rjmp	.-4      	; 0x8c <EEPROM_write+0x2>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  90:	92 bd       	out	0x22, r25	; 34
  92:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  94:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  96:	8f b3       	in	r24, 0x1f	; 31
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  9c:	8f b3       	in	r24, 0x1f	; 31
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8f bb       	out	0x1f, r24	; 31
	sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	cli();
  a6:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  a8:	f9 99       	sbic	0x1f, 1	; 31
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <EEPROM_read+0x2>
	;
	/* Set up address register */
	EEAR = uiAddress;
  ac:	92 bd       	out	0x22, r25	; 34
  ae:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8f bb       	out	0x1f, r24	; 31
	sei();
  b6:	78 94       	sei
	/* Return data from Data Register */
	return EEDR;
  b8:	80 b5       	in	r24, 0x20	; 32
  ba:	08 95       	ret

000000bc <TWI_Init>:
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}

void TWI_Init()
{
	TWBR = 12; //400kHz = (16MHz) / (16 + 2(12) * (1))
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  c2:	08 95       	ret

000000c4 <TWI_Read_register>:
}

uint8_t TWI_Read_register(uint8_t registerValue)
{
	/*set the start condition*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
  c4:	94 ea       	ldi	r25, 0xA4	; 164
  c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ce:	99 23       	and	r25, r25
  d0:	e4 f7       	brge	.-8      	; 0xca <TWI_Read_register+0x6>
			
	/*send the address*/
	TWDR = LTR_WRITE;
  d2:	96 e4       	ldi	r25, 0x46	; 70
  d4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT); //trigger I2C action
  d8:	94 e8       	ldi	r25, 0x84	; 132
  da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  e2:	99 23       	and	r25, r25
  e4:	e4 f7       	brge	.-8      	; 0xde <TWI_Read_register+0x1a>
				
	/*specify the register*/
	TWDR = registerValue; //register value in the data register
  e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  f4:	88 23       	and	r24, r24
  f6:	e4 f7       	brge	.-8      	; 0xf0 <TWI_Read_register+0x2c>
			
	/*switch master to read (receiver) mode and slave to transmitter*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA); //Set another start condition
  f8:	84 ea       	ldi	r24, 0xA4	; 164
  fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 102:	88 23       	and	r24, r24
 104:	e4 f7       	brge	.-8      	; 0xfe <TWI_Read_register+0x3a>
	
	TWDR = LTR_READ;
 106:	87 e4       	ldi	r24, 0x47	; 71
 108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 116:	88 23       	and	r24, r24
 118:	e4 f7       	brge	.-8      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
			
	TWCR = (1 << TWEN) | (1 << TWINT);
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 120:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 124:	88 23       	and	r24, r24
 126:	e4 f7       	brge	.-8      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
	
	/*The received byte is now in the TWDR data register*/
	uint8_t register_value = TWDR;
 128:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
			
	/*set stop condition*/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 12c:	94 e9       	ldi	r25, 0x94	; 148
 12e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>

	return register_value;
}
 132:	08 95       	ret

00000134 <TWI_Write_register>:

void TWI_Write_register(uint8_t reg, uint8_t data)
{
	/*set the start condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTA));
 134:	94 ea       	ldi	r25, 0xA4	; 164
 136:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 13a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 13e:	99 23       	and	r25, r25
 140:	e4 f7       	brge	.-8      	; 0x13a <TWI_Write_register+0x6>
	
	/*send the address*/
	TWDR = LTR_WRITE;                       //Data to send - ie, address + write bit
 142:	96 e4       	ldi	r25, 0x46	; 70
 144:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 148:	94 e8       	ldi	r25, 0x84	; 132
 14a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 14e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 152:	99 23       	and	r25, r25
 154:	e4 f7       	brge	.-8      	; 0x14e <TWI_Write_register+0x1a>
	
	/*send the register address*/
	TWDR = reg;								//Register address
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN )| (1 << TWINT));	//Trigger I2C action
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 160:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 164:	88 23       	and	r24, r24
 166:	e4 f7       	brge	.-8      	; 0x160 <TWI_Write_register+0x2c>
	
	/*send the data byte*/
	TWDR = data;							//Data byte
 168:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <TWI_Write_register+0x3e>
	
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
 17a:	84 e9       	ldi	r24, 0x94	; 148
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 180:	08 95       	ret

00000182 <LTR559_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void LTR559_Init()
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	/*Enable interrupt on PC2 - PCINT10*/
	PCICR |= (1 << PCIE1);
 18a:	e8 e6       	ldi	r30, 0x68	; 104
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 194:	ec e6       	ldi	r30, 0x6C	; 108
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	80 83       	st	Z, r24
	
	TWI_Init();
 19e:	8e df       	rcall	.-228    	; 0xbc <TWI_Init>
	TWI_Write_register(LTR_INTERRUPT, 0x05); //INT active high - only PS trigger
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	8f e8       	ldi	r24, 0x8F	; 143
 1a4:	c7 df       	rcall	.-114    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_LED, 0b00011111); //60Khz LED pulse - DUTY 50% - LED 50mA
 1a6:	6f e1       	ldi	r22, 0x1F	; 31
 1a8:	82 e8       	ldi	r24, 0x82	; 130
 1aa:	c4 df       	rcall	.-120    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_CONTR, 0x03); //Active mode - saturation indicator off
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	81 e8       	ldi	r24, 0x81	; 129
 1b0:	c1 df       	rcall	.-126    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_MEAS_RATE, 0x08); //10ms measurement repeat rate
 1b2:	68 e0       	ldi	r22, 0x08	; 8
 1b4:	84 e8       	ldi	r24, 0x84	; 132
 1b6:	be df       	rcall	.-132    	; 0x134 <TWI_Write_register>
	
	/* Read threshold value from EEPROM previously saved by a self configure */
	uint16_t upperThreshold = 0;
	upperThreshold = EEPROM_read(1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	74 df       	rcall	.-280    	; 0xa6 <EEPROM_read>
 1be:	08 2f       	mov	r16, r24
 1c0:	10 e0       	ldi	r17, 0x00	; 0
	upperThreshold |= (EEPROM_read(2) << 8);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	6f df       	rcall	.-290    	; 0xa6 <EEPROM_read>
 1c8:	c8 2f       	mov	r28, r24
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	dc 2f       	mov	r29, r28
 1ce:	cc 27       	eor	r28, r28
 1d0:	c0 2b       	or	r28, r16
 1d2:	d1 2b       	or	r29, r17
	
	RS485_Transmit_byte((int16_t)upperThreshold);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	6b d3       	rcall	.+1750   	; 0x8ae <RS485_Transmit_byte>
	RS485_Transmit_byte((int16_t)upperThreshold >> 8);
 1d8:	8d 2f       	mov	r24, r29
 1da:	69 d3       	rcall	.+1746   	; 0x8ae <RS485_Transmit_byte>
	TWI_Write_register(PS_THRES_UP_0, upperThreshold); //Upper interrupt threshold - 12 bit value
 1dc:	6c 2f       	mov	r22, r28
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	a9 df       	rcall	.-174    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_1, upperThreshold >> 8);
 1e2:	6d 2f       	mov	r22, r29
 1e4:	81 e9       	ldi	r24, 0x91	; 145
 1e6:	a6 df       	rcall	.-180    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	82 e9       	ldi	r24, 0x92	; 146
 1ec:	a3 df       	rcall	.-186    	; 0x134 <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_1, 0);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	83 e9       	ldi	r24, 0x93	; 147
 1f2:	a0 df       	rcall	.-192    	; 0x134 <TWI_Write_register>
	
	//TWI_Write_register(0x83, 0b00001000); //Number of pulses
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <TWI_Read_proximity>:
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
}

uint16_t TWI_Read_proximity()
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
 202:	8d e8       	ldi	r24, 0x8D	; 141
 204:	5f df       	rcall	.-322    	; 0xc4 <TWI_Read_register>
 206:	c8 2f       	mov	r28, r24
 208:	d0 e0       	ldi	r29, 0x00	; 0
	psData += TWI_Read_register(0x8E) << 8;
 20a:	8e e8       	ldi	r24, 0x8E	; 142
 20c:	5b df       	rcall	.-330    	; 0xc4 <TWI_Read_register>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	98 2f       	mov	r25, r24
 212:	88 27       	eor	r24, r24

	return psData;
}
 214:	8c 0f       	add	r24, r28
 216:	9d 1f       	adc	r25, r29
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <__vector_4>:

volatile int encoderCount = 0;
extern volatile float cDutyCycle;
extern volatile int selfEncodingStatus;
ISR(PCINT1_vect)
{	
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	if(selfEncodingStatus != 1)
 240:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <selfEncodingStatus>
 244:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <selfEncodingStatus+0x1>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	89 f1       	breq	.+98     	; 0x2ae <__vector_4+0x90>
	{
		if(cDutyCycle > 1.5f)
 24c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 250:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 254:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 258:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 ec       	ldi	r20, 0xC0	; 192
 262:	5f e3       	ldi	r21, 0x3F	; 63
 264:	fc d4       	rcall	.+2552   	; 0xc5e <__gesf2>
 266:	18 16       	cp	r1, r24
 268:	54 f4       	brge	.+20     	; 0x27e <__vector_4+0x60>
			encoderCount++;
 26a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 26e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 278:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 27c:	18 c0       	rjmp	.+48     	; 0x2ae <__vector_4+0x90>
		else if(cDutyCycle < 1.5f)
 27e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 282:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 286:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 28a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 ec       	ldi	r20, 0xC0	; 192
 294:	5f e3       	ldi	r21, 0x3F	; 63
 296:	99 d3       	rcall	.+1842   	; 0x9ca <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	4c f4       	brge	.+18     	; 0x2ae <__vector_4+0x90>
			encoderCount--;
 29c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 2aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <main>:
float dt = 0.01; //Sample period
float eIntergral = 0; //Integral counter
int setpoint = 0;

int main(void)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	c7 59       	subi	r28, 0x97	; 151
 2da:	d1 40       	sbci	r29, 0x01	; 1
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	Board_init();		
 2e6:	c2 de       	rcall	.-636    	; 0x6c <Board_init>
	Timer_init();
 2e8:	c0 d2       	rcall	.+1408   	; 0x86a <Timer_init>
	RS485_init();
 2ea:	d1 d2       	rcall	.+1442   	; 0x88e <RS485_init>
	LTR559_Init();
 2ec:	4a df       	rcall	.-364    	; 0x182 <LTR559_Init>
		
	sei(); //Enable interrupts
 2ee:	78 94       	sei

    while (1) 
	{	
		/***** PID Control *****/
		int e = setpoint - encoderCount; //Error
 2f0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <setpoint>
 2f4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <setpoint+0x1>
 2f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2fc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 300:	a9 01       	movw	r20, r18
 302:	48 1b       	sub	r20, r24
 304:	59 0b       	sbc	r21, r25
 306:	cb 56       	subi	r28, 0x6B	; 107
 308:	de 4f       	sbci	r29, 0xFE	; 254
 30a:	59 83       	std	Y+1, r21	; 0x01
 30c:	48 83       	st	Y, r20
 30e:	c5 59       	subi	r28, 0x95	; 149
 310:	d1 40       	sbci	r29, 0x01	; 1
		float Dedt = (e - ePrev) / dt; //Derivative
 312:	ba 01       	movw	r22, r20
 314:	55 0f       	add	r21, r21
 316:	88 0b       	sbc	r24, r24
 318:	99 0b       	sbc	r25, r25
 31a:	f1 d3       	rcall	.+2018   	; 0xafe <__floatsisf>
 31c:	6b 01       	movw	r12, r22
 31e:	7c 01       	movw	r14, r24
 320:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ePrev>
 324:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ePrev+0x1>
 328:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <ePrev+0x2>
 32c:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <ePrev+0x3>
 330:	e7 d2       	rcall	.+1486   	; 0x900 <__subsf3>
 332:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 336:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 33a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 33e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 342:	a5 01       	movw	r20, r10
 344:	94 01       	movw	r18, r8
 346:	45 d3       	rcall	.+1674   	; 0x9d2 <__divsf3>
 348:	cf 56       	subi	r28, 0x6F	; 111
 34a:	de 4f       	sbci	r29, 0xFE	; 254
 34c:	68 83       	st	Y, r22
 34e:	79 83       	std	Y+1, r23	; 0x01
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	9b 83       	std	Y+3, r25	; 0x03
 354:	c1 59       	subi	r28, 0x91	; 145
 356:	d1 40       	sbci	r29, 0x01	; 1
		eIntergral += (e * dt); //Integral
 358:	a5 01       	movw	r20, r10
 35a:	94 01       	movw	r18, r8
 35c:	c7 01       	movw	r24, r14
 35e:	b6 01       	movw	r22, r12
 360:	82 d4       	rcall	.+2308   	; 0xc66 <__mulsf3>
 362:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <eIntergral>
 366:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <eIntergral+0x1>
 36a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <eIntergral+0x2>
 36e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <eIntergral+0x3>
 372:	c7 d2       	rcall	.+1422   	; 0x902 <__addsf3>
 374:	4b 01       	movw	r8, r22
 376:	5c 01       	movw	r10, r24
 378:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <eIntergral>
 37c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <eIntergral+0x1>
 380:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <eIntergral+0x2>
 384:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <eIntergral+0x3>
		
		float u = (kp * e) + (kd * Dedt) + (ki * eIntergral); //Control signal
 388:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <kp>
 38c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <kp+0x1>
 390:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <kp+0x2>
 394:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <kp+0x3>
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12
 39c:	64 d4       	rcall	.+2248   	; 0xc66 <__mulsf3>
 39e:	2b 01       	movw	r4, r22
 3a0:	3c 01       	movw	r6, r24
 3a2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <kd>
 3a6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <kd+0x1>
 3aa:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <kd+0x2>
 3ae:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <kd+0x3>
 3b2:	cf 56       	subi	r28, 0x6F	; 111
 3b4:	de 4f       	sbci	r29, 0xFE	; 254
 3b6:	68 81       	ld	r22, Y
 3b8:	79 81       	ldd	r23, Y+1	; 0x01
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	9b 81       	ldd	r25, Y+3	; 0x03
 3be:	c1 59       	subi	r28, 0x91	; 145
 3c0:	d1 40       	sbci	r29, 0x01	; 1
 3c2:	51 d4       	rcall	.+2210   	; 0xc66 <__mulsf3>
 3c4:	9b 01       	movw	r18, r22
 3c6:	ac 01       	movw	r20, r24
 3c8:	c3 01       	movw	r24, r6
 3ca:	b2 01       	movw	r22, r4
 3cc:	9a d2       	rcall	.+1332   	; 0x902 <__addsf3>
 3ce:	2b 01       	movw	r4, r22
 3d0:	3c 01       	movw	r6, r24
 3d2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ki>
 3d6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ki+0x1>
 3da:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ki+0x2>
 3de:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ki+0x3>
 3e2:	c5 01       	movw	r24, r10
 3e4:	b4 01       	movw	r22, r8
 3e6:	3f d4       	rcall	.+2174   	; 0xc66 <__mulsf3>
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	c3 01       	movw	r24, r6
 3ee:	b2 01       	movw	r22, r4
 3f0:	88 d2       	rcall	.+1296   	; 0x902 <__addsf3>
 3f2:	4b 01       	movw	r8, r22
 3f4:	5c 01       	movw	r10, r24
		
		//Cap control signal maximum values
		if(u >= 100.0f)	u = 100.0f;
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	48 ec       	ldi	r20, 0xC8	; 200
 3fc:	52 e4       	ldi	r21, 0x42	; 66
 3fe:	2f d4       	rcall	.+2142   	; 0xc5e <__gesf2>
 400:	88 23       	and	r24, r24
 402:	44 f0       	brlt	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	0f 2e       	mov	r0, r31
 406:	81 2c       	mov	r8, r1
 408:	91 2c       	mov	r9, r1
 40a:	f8 ec       	ldi	r31, 0xC8	; 200
 40c:	af 2e       	mov	r10, r31
 40e:	f2 e4       	ldi	r31, 0x42	; 66
 410:	bf 2e       	mov	r11, r31
 412:	f0 2d       	mov	r31, r0
		if(u <= -100.0f) u = -100.0f;
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	48 ec       	ldi	r20, 0xC8	; 200
 41a:	52 ec       	ldi	r21, 0xC2	; 194
 41c:	c5 01       	movw	r24, r10
 41e:	b4 01       	movw	r22, r8
 420:	d4 d2       	rcall	.+1448   	; 0x9ca <__cmpsf2>
 422:	18 16       	cp	r1, r24
 424:	44 f0       	brlt	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 426:	0f 2e       	mov	r0, r31
 428:	81 2c       	mov	r8, r1
 42a:	91 2c       	mov	r9, r1
 42c:	f8 ec       	ldi	r31, 0xC8	; 200
 42e:	af 2e       	mov	r10, r31
 430:	f2 ec       	ldi	r31, 0xC2	; 194
 432:	bf 2e       	mov	r11, r31
 434:	f0 2d       	mov	r31, r0
		
		//Convert control signal to PWM
		float dutyCyle = 1.5f + (0.005f * u); //1.5 is stopped, +/-0.5 maps to full forwards and full backwards 
 436:	2a e0       	ldi	r18, 0x0A	; 10
 438:	37 ed       	ldi	r19, 0xD7	; 215
 43a:	43 ea       	ldi	r20, 0xA3	; 163
 43c:	5b e3       	ldi	r21, 0x3B	; 59
 43e:	c5 01       	movw	r24, r10
 440:	b4 01       	movw	r22, r8
 442:	11 d4       	rcall	.+2082   	; 0xc66 <__mulsf3>
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	40 ec       	ldi	r20, 0xC0	; 192
 44a:	5f e3       	ldi	r21, 0x3F	; 63
 44c:	5a d2       	rcall	.+1204   	; 0x902 <__addsf3>
		DUTY_CYCLE(dutyCyle);
 44e:	e9 d1       	rcall	.+978    	; 0x822 <DUTY_CYCLE>
	 		RS485_Transmit_byte((int16_t)encoderCount >> 8);
	 		RS485_Transmit_byte((int16_t)setpoint);
	 		RS485_Transmit_byte((int16_t)setpoint >> 8);	
		#endif //S_PID

		ePrev = e; //update previous error
 450:	c0 92 14 01 	sts	0x0114, r12	; 0x800114 <ePrev>
 454:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <ePrev+0x1>
 458:	e0 92 16 01 	sts	0x0116, r14	; 0x800116 <ePrev+0x2>
 45c:	f0 92 17 01 	sts	0x0117, r15	; 0x800117 <ePrev+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	8f ed       	ldi	r24, 0xDF	; 223
 462:	9b ea       	ldi	r25, 0xAB	; 171
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
		_delay_ms(11); //11 ms since transmitting system response had influence on tuning
		
		/***** RS485/UART Data handling *****/
		switch(uartData)
 46c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartData>
 470:	83 36       	cpi	r24, 0x63	; 99
 472:	71 f1       	breq	.+92     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 474:	86 36       	cpi	r24, 0x66	; 102
 476:	21 f0       	breq	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 478:	82 36       	cpi	r24, 0x62	; 98
 47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	aa c1       	rjmp	.+852    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
 47e:	14 c0       	rjmp	.+40     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			case 'f':
				if(e == 0) setpoint += 4; //Move forward
 480:	cb 56       	subi	r28, 0x6B	; 107
 482:	de 4f       	sbci	r29, 0xFE	; 254
 484:	a8 81       	ld	r26, Y
 486:	b9 81       	ldd	r27, Y+1	; 0x01
 488:	c5 59       	subi	r28, 0x95	; 149
 48a:	d1 40       	sbci	r29, 0x01	; 1
 48c:	ab 2b       	or	r26, r27
 48e:	49 f4       	brne	.+18     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 490:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setpoint>
 494:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <setpoint+0x1>
 498:	04 96       	adiw	r24, 0x04	; 4
 49a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <setpoint+0x1>
 49e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <setpoint>
				uartData = 0;
 4a2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
				break;
 4a6:	95 c1       	rjmp	.+810    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
			case 'b':
				if(e == 0) setpoint -= 4; //Move backward
 4a8:	cb 56       	subi	r28, 0x6B	; 107
 4aa:	de 4f       	sbci	r29, 0xFE	; 254
 4ac:	e8 81       	ld	r30, Y
 4ae:	f9 81       	ldd	r31, Y+1	; 0x01
 4b0:	c5 59       	subi	r28, 0x95	; 149
 4b2:	d1 40       	sbci	r29, 0x01	; 1
 4b4:	ef 2b       	or	r30, r31
 4b6:	49 f4       	brne	.+18     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setpoint>
 4bc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <setpoint+0x1>
 4c0:	04 97       	sbiw	r24, 0x04	; 4
 4c2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <setpoint+0x1>
 4c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <setpoint>
				uartData = 0;
 4ca:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
				break;
 4ce:	81 c1       	rjmp	.+770    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
			case 'c':
				{
					selfEncodingStatus = 1;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <selfEncodingStatus+0x1>
 4d8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <selfEncodingStatus>
					uint16_t sampleBuffer[100] = {0};
 4dc:	fe 01       	movw	r30, r28
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	88 ec       	ldi	r24, 0xC8	; 200
 4e2:	df 01       	movw	r26, r30
 4e4:	1d 92       	st	X+, r1
 4e6:	8a 95       	dec	r24
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
 4ea:	e4 5d       	subi	r30, 0xD4	; 212
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	84 e6       	ldi	r24, 0x64	; 100
 4f0:	df 01       	movw	r26, r30
 4f2:	28 2f       	mov	r18, r24
 4f4:	1d 92       	st	X+, r1
 4f6:	2a 95       	dec	r18
 4f8:	e9 f7       	brne	.-6      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
 4fa:	e4 56       	subi	r30, 0x64	; 100
 4fc:	f1 09       	sbc	r31, r1
 4fe:	df 01       	movw	r26, r30
 500:	1d 92       	st	X+, r1
 502:	8a 95       	dec	r24
 504:	e9 f7       	brne	.-6      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 506:	e1 2c       	mov	r14, r1
 508:	f1 2c       	mov	r15, r1
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
 50a:	91 2c       	mov	r9, r1
					selfEncodingStatus = 1;
					uint16_t sampleBuffer[100] = {0};
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
					uint8_t peakCounter = 0;
 50c:	81 2c       	mov	r8, r1
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 50e:	8c c0       	rjmp	.+280    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
					{
						/* Get data */
						DUTY_CYCLE(1.6);
 510:	6d ec       	ldi	r22, 0xCD	; 205
 512:	7c ec       	ldi	r23, 0xCC	; 204
 514:	8c ec       	ldi	r24, 0xCC	; 204
 516:	9f e3       	ldi	r25, 0x3F	; 63
 518:	84 d1       	rcall	.+776    	; 0x822 <DUTY_CYCLE>
						for(int i = 1; i < 100; i++)
 51a:	01 e0       	ldi	r16, 0x01	; 1
 51c:	10 e0       	ldi	r17, 0x00	; 0
 51e:	24 c0       	rjmp	.+72     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
						{
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
 520:	f8 01       	movw	r30, r16
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	2c 0f       	add	r18, r28
 52e:	3d 1f       	adc	r19, r29
 530:	e2 0f       	add	r30, r18
 532:	f3 1f       	adc	r31, r19
 534:	c0 80       	ld	r12, Z
 536:	d1 80       	ldd	r13, Z+1	; 0x01
 538:	62 de       	rcall	.-828    	; 0x1fe <TWI_Read_proximity>
 53a:	8c 0d       	add	r24, r12
 53c:	9d 1d       	adc	r25, r13
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	f8 01       	movw	r30, r16
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	4c 0f       	add	r20, r28
 54e:	5d 1f       	adc	r21, r29
 550:	e4 0f       	add	r30, r20
 552:	f5 1f       	adc	r31, r21
 554:	91 83       	std	Z+1, r25	; 0x01
 556:	80 83       	st	Z, r24
 558:	8f e3       	ldi	r24, 0x3F	; 63
 55a:	9c e9       	ldi	r25, 0x9C	; 156
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 562:	00 00       	nop
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
					{
						/* Get data */
						DUTY_CYCLE(1.6);
						for(int i = 1; i < 100; i++)
 564:	0f 5f       	subi	r16, 0xFF	; 255
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	04 36       	cpi	r16, 0x64	; 100
 56a:	11 05       	cpc	r17, r1
 56c:	cc f2       	brlt	.-78     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
						{
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
							_delay_ms(10); //LTR559 sample rate
						}
						DUTY_CYCLE(1.5);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 ec       	ldi	r24, 0xC0	; 192
 574:	9f e3       	ldi	r25, 0x3F	; 63
 576:	55 d1       	rcall	.+682    	; 0x822 <DUTY_CYCLE>
										
						for(int i = 1; i < 100; i++)
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	4e c0       	rjmp	.+156    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
						{
							if(sampleBuffer[i] > sampleBuffer[i - 1] && sampleBuffer[i] > sampleBuffer[i + 1])
 57e:	fc 01       	movw	r30, r24
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a1 e0       	ldi	r26, 0x01	; 1
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	ac 0f       	add	r26, r28
 58a:	bd 1f       	adc	r27, r29
 58c:	ea 0f       	add	r30, r26
 58e:	fb 1f       	adc	r31, r27
 590:	20 81       	ld	r18, Z
 592:	31 81       	ldd	r19, Z+1	; 0x01
 594:	fc 01       	movw	r30, r24
 596:	31 97       	sbiw	r30, 0x01	; 1
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	ea 0f       	add	r30, r26
 59e:	fb 1f       	adc	r31, r27
 5a0:	40 81       	ld	r20, Z
 5a2:	51 81       	ldd	r21, Z+1	; 0x01
 5a4:	42 17       	cp	r20, r18
 5a6:	53 07       	cpc	r21, r19
 5a8:	c0 f4       	brcc	.+48     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5aa:	fc 01       	movw	r30, r24
 5ac:	31 96       	adiw	r30, 0x01	; 1
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	ea 0f       	add	r30, r26
 5b4:	fb 1f       	adc	r31, r27
 5b6:	60 81       	ld	r22, Z
 5b8:	71 81       	ldd	r23, Z+1	; 0x01
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	68 f4       	brcc	.+26     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
							{
								peaks[peakCounter] = sampleBuffer[i];
 5c0:	e8 2d       	mov	r30, r8
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	6d e2       	ldi	r22, 0x2D	; 45
 5ca:	71 e0       	ldi	r23, 0x01	; 1
 5cc:	6c 0f       	add	r22, r28
 5ce:	7d 1f       	adc	r23, r29
 5d0:	e6 0f       	add	r30, r22
 5d2:	f7 1f       	adc	r31, r23
 5d4:	31 83       	std	Z+1, r19	; 0x01
 5d6:	20 83       	st	Z, r18
								peakCounter++;
 5d8:	83 94       	inc	r8
							}
							if(sampleBuffer[i] < sampleBuffer[i - 1] && sampleBuffer[i] < sampleBuffer[i + 1])
 5da:	24 17       	cp	r18, r20
 5dc:	35 07       	cpc	r19, r21
 5de:	e0 f4       	brcc	.+56     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 5e0:	fc 01       	movw	r30, r24
 5e2:	31 96       	adiw	r30, 0x01	; 1
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	a1 e0       	ldi	r26, 0x01	; 1
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	ac 0f       	add	r26, r28
 5ee:	bd 1f       	adc	r27, r29
 5f0:	ea 0f       	add	r30, r26
 5f2:	fb 1f       	adc	r31, r27
 5f4:	40 81       	ld	r20, Z
 5f6:	51 81       	ldd	r21, Z+1	; 0x01
 5f8:	24 17       	cp	r18, r20
 5fa:	35 07       	cpc	r19, r21
 5fc:	68 f4       	brcc	.+26     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
							{
								valleys[valleyCounter] = sampleBuffer[i];
 5fe:	e9 2d       	mov	r30, r9
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	49 ec       	ldi	r20, 0xC9	; 201
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	4c 0f       	add	r20, r28
 60c:	5d 1f       	adc	r21, r29
 60e:	e4 0f       	add	r30, r20
 610:	f5 1f       	adc	r31, r21
 612:	31 83       	std	Z+1, r19	; 0x01
 614:	20 83       	st	Z, r18
								valleyCounter++;
 616:	93 94       	inc	r9
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
							_delay_ms(10); //LTR559 sample rate
						}
						DUTY_CYCLE(1.5);
										
						for(int i = 1; i < 100; i++)
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	84 36       	cpi	r24, 0x64	; 100
 61c:	91 05       	cpc	r25, r1
 61e:	0c f4       	brge	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	ae cf       	rjmp	.-164    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 622:	5f ef       	ldi	r21, 0xFF	; 255
 624:	e5 1a       	sub	r14, r21
 626:	f5 0a       	sbc	r15, r21
 628:	67 e0       	ldi	r22, 0x07	; 7
 62a:	e6 16       	cp	r14, r22
 62c:	f1 04       	cpc	r15, r1
 62e:	0c f4       	brge	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 630:	6f cf       	rjmp	.-290    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 632:	61 2c       	mov	r6, r1
 634:	71 2c       	mov	r7, r1
 636:	41 2c       	mov	r4, r1
 638:	51 2c       	mov	r5, r1
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	a0 e0       	ldi	r26, 0x00	; 0
 63e:	cf 56       	subi	r28, 0x6F	; 111
 640:	de 4f       	sbci	r29, 0xFE	; 254
 642:	18 82       	st	Y, r1
 644:	c1 59       	subi	r28, 0x91	; 145
 646:	d1 40       	sbci	r29, 0x01	; 1
 648:	c9 56       	subi	r28, 0x69	; 105
 64a:	de 4f       	sbci	r29, 0xFE	; 254
 64c:	18 82       	st	Y, r1
 64e:	c7 59       	subi	r28, 0x97	; 151
 650:	d1 40       	sbci	r29, 0x01	; 1
 652:	21 2c       	mov	r2, r1
 654:	31 2c       	mov	r3, r1
 656:	38 c0       	rjmp	.+112    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
			
					/* Find lowest value in peaks and highest value in valleys */
					uint64_t peakSum = 0;
					uint16_t valleySum = 0;
					
					for(int i = 0; i < peakCounter; i++) peakSum += peaks[i];
 658:	c3 01       	movw	r24, r6
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	ed e2       	ldi	r30, 0x2D	; 45
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	ec 0f       	add	r30, r28
 664:	fd 1f       	adc	r31, r29
 666:	8e 0f       	add	r24, r30
 668:	9f 1f       	adc	r25, r31
 66a:	fc 01       	movw	r30, r24
 66c:	a0 80       	ld	r10, Z
 66e:	b1 80       	ldd	r11, Z+1	; 0x01
 670:	2a 2d       	mov	r18, r10
 672:	3b 2d       	mov	r19, r11
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	a4 2c       	mov	r10, r4
 682:	b5 2c       	mov	r11, r5
 684:	cb 2e       	mov	r12, r27
 686:	da 2e       	mov	r13, r26
 688:	cf 56       	subi	r28, 0x6F	; 111
 68a:	de 4f       	sbci	r29, 0xFE	; 254
 68c:	e8 80       	ld	r14, Y
 68e:	c1 59       	subi	r28, 0x91	; 145
 690:	d1 40       	sbci	r29, 0x01	; 1
 692:	c9 56       	subi	r28, 0x69	; 105
 694:	de 4f       	sbci	r29, 0xFE	; 254
 696:	f8 80       	ld	r15, Y
 698:	c7 59       	subi	r28, 0x97	; 151
 69a:	d1 40       	sbci	r29, 0x01	; 1
 69c:	02 2d       	mov	r16, r2
 69e:	13 2d       	mov	r17, r3
 6a0:	c3 d3       	rcall	.+1926   	; 0xe28 <__adddi3>
 6a2:	42 2e       	mov	r4, r18
 6a4:	53 2e       	mov	r5, r19
 6a6:	b4 2f       	mov	r27, r20
 6a8:	a5 2f       	mov	r26, r21
 6aa:	cf 56       	subi	r28, 0x6F	; 111
 6ac:	de 4f       	sbci	r29, 0xFE	; 254
 6ae:	68 83       	st	Y, r22
 6b0:	c1 59       	subi	r28, 0x91	; 145
 6b2:	d1 40       	sbci	r29, 0x01	; 1
 6b4:	c9 56       	subi	r28, 0x69	; 105
 6b6:	de 4f       	sbci	r29, 0xFE	; 254
 6b8:	78 83       	st	Y, r23
 6ba:	c7 59       	subi	r28, 0x97	; 151
 6bc:	d1 40       	sbci	r29, 0x01	; 1
 6be:	28 2e       	mov	r2, r24
 6c0:	39 2e       	mov	r3, r25
 6c2:	ff ef       	ldi	r31, 0xFF	; 255
 6c4:	6f 1a       	sub	r6, r31
 6c6:	7f 0a       	sbc	r7, r31
 6c8:	88 2d       	mov	r24, r8
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	68 16       	cp	r6, r24
 6ce:	79 06       	cpc	r7, r25
 6d0:	1c f2       	brlt	.-122    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	61 2c       	mov	r6, r1
 6d8:	71 2c       	mov	r7, r1
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
					for(int i = 0; i < valleyCounter; i++) valleySum = valleys[i];
 6dc:	9c 01       	movw	r18, r24
 6de:	22 0f       	add	r18, r18
 6e0:	33 1f       	adc	r19, r19
 6e2:	49 ec       	ldi	r20, 0xC9	; 201
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	4c 0f       	add	r20, r28
 6e8:	5d 1f       	adc	r21, r29
 6ea:	24 0f       	add	r18, r20
 6ec:	35 1f       	adc	r19, r21
 6ee:	f9 01       	movw	r30, r18
 6f0:	60 80       	ld	r6, Z
 6f2:	71 80       	ldd	r7, Z+1	; 0x01
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	29 2d       	mov	r18, r9
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	82 17       	cp	r24, r18
 6fc:	93 07       	cpc	r25, r19
 6fe:	74 f3       	brlt	.-36     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
					
					/* Calculate mid point and set LTR559 Interrupt Threshold to this value */
					uint16_t middleValue = ((peakSum/peakCounter) + (valleySum/valleyCounter)) / 2;
 700:	a8 2c       	mov	r10, r8
 702:	b1 2c       	mov	r11, r1
 704:	c1 2c       	mov	r12, r1
 706:	d1 2c       	mov	r13, r1
 708:	e1 2c       	mov	r14, r1
 70a:	f1 2c       	mov	r15, r1
 70c:	00 e0       	ldi	r16, 0x00	; 0
 70e:	10 e0       	ldi	r17, 0x00	; 0
 710:	24 2d       	mov	r18, r4
 712:	35 2d       	mov	r19, r5
 714:	4b 2f       	mov	r20, r27
 716:	5a 2f       	mov	r21, r26
 718:	cf 56       	subi	r28, 0x6F	; 111
 71a:	de 4f       	sbci	r29, 0xFE	; 254
 71c:	68 81       	ld	r22, Y
 71e:	c1 59       	subi	r28, 0x91	; 145
 720:	d1 40       	sbci	r29, 0x01	; 1
 722:	c9 56       	subi	r28, 0x69	; 105
 724:	de 4f       	sbci	r29, 0xFE	; 254
 726:	78 81       	ld	r23, Y
 728:	c7 59       	subi	r28, 0x97	; 151
 72a:	d1 40       	sbci	r29, 0x01	; 1
 72c:	82 2d       	mov	r24, r2
 72e:	93 2d       	mov	r25, r3
 730:	13 d3       	rcall	.+1574   	; 0xd58 <__udivdi3>
 732:	a2 2e       	mov	r10, r18
 734:	b3 2e       	mov	r11, r19
 736:	c4 2e       	mov	r12, r20
 738:	d5 2e       	mov	r13, r21
 73a:	e6 2e       	mov	r14, r22
 73c:	f7 2e       	mov	r15, r23
 73e:	08 2f       	mov	r16, r24
 740:	19 2f       	mov	r17, r25
 742:	69 2d       	mov	r22, r9
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	c3 01       	movw	r24, r6
 748:	f1 d2       	rcall	.+1506   	; 0xd2c <__udivmodhi4>
 74a:	ab 01       	movw	r20, r22
 74c:	24 2f       	mov	r18, r20
 74e:	35 2f       	mov	r19, r21
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	65 d3       	rcall	.+1738   	; 0xe28 <__adddi3>
 75e:	01 e0       	ldi	r16, 0x01	; 1
 760:	47 d3       	rcall	.+1678   	; 0xdf0 <__lshrdi3>
 762:	02 2f       	mov	r16, r18
 764:	13 2f       	mov	r17, r19
					TWI_Write_register(PS_THRES_UP_0, middleValue); //Upper interrupt threshold - 12 bit value
 766:	d2 2e       	mov	r13, r18
 768:	62 2f       	mov	r22, r18
 76a:	80 e9       	ldi	r24, 0x90	; 144
 76c:	e3 dc       	rcall	.-1594   	; 0x134 <TWI_Write_register>
					TWI_Write_register(PS_THRES_UP_1, middleValue >> 8);
 76e:	e1 2e       	mov	r14, r17
 770:	61 2f       	mov	r22, r17
 772:	81 e9       	ldi	r24, 0x91	; 145
 774:	df dc       	rcall	.-1602   	; 0x134 <TWI_Write_register>
					TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	82 e9       	ldi	r24, 0x92	; 146
 77a:	dc dc       	rcall	.-1608   	; 0x134 <TWI_Write_register>
					TWI_Write_register(PS_THRES_LOW_1, 0);
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	83 e9       	ldi	r24, 0x93	; 147
 780:	d9 dc       	rcall	.-1614   	; 0x134 <TWI_Write_register>
					
					//Save value in EEPROM so that it can be used upon next power cycle
					EEPROM_write(1, middleValue);
 782:	60 2f       	mov	r22, r16
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	80 dc       	rcall	.-1792   	; 0x8a <EEPROM_write>
					EEPROM_write(2, middleValue >> 8);
 78a:	61 2f       	mov	r22, r17
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	7c dc       	rcall	.-1800   	; 0x8a <EEPROM_write>
					
					#if S_SELF_CONF
						for(int i = 1; i < 100; i++)
 792:	01 e0       	ldi	r16, 0x01	; 1
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
						{
							RS485_Transmit_byte(middleValue);
 798:	8d 2d       	mov	r24, r13
 79a:	89 d0       	rcall	.+274    	; 0x8ae <RS485_Transmit_byte>
							RS485_Transmit_byte(middleValue >> 8);
 79c:	8e 2d       	mov	r24, r14
 79e:	87 d0       	rcall	.+270    	; 0x8ae <RS485_Transmit_byte>
							
							/* Plot all samples */
							RS485_Transmit_byte(sampleBuffer[i]);
 7a0:	f8 01       	movw	r30, r16
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	21 e0       	ldi	r18, 0x01	; 1
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	2c 0f       	add	r18, r28
 7ac:	3d 1f       	adc	r19, r29
 7ae:	e2 0f       	add	r30, r18
 7b0:	f3 1f       	adc	r31, r19
 7b2:	f1 80       	ldd	r15, Z+1	; 0x01
 7b4:	80 81       	ld	r24, Z
 7b6:	7b d0       	rcall	.+246    	; 0x8ae <RS485_Transmit_byte>
							RS485_Transmit_byte(sampleBuffer[i] >> 8);
 7b8:	8f 2d       	mov	r24, r15
 7ba:	79 d0       	rcall	.+242    	; 0x8ae <RS485_Transmit_byte>
					//Save value in EEPROM so that it can be used upon next power cycle
					EEPROM_write(1, middleValue);
					EEPROM_write(2, middleValue >> 8);
					
					#if S_SELF_CONF
						for(int i = 1; i < 100; i++)
 7bc:	0f 5f       	subi	r16, 0xFF	; 255
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	04 36       	cpi	r16, 0x64	; 100
 7c2:	11 05       	cpc	r17, r1
 7c4:	4c f3       	brlt	.-46     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
							RS485_Transmit_byte(sampleBuffer[i]);
							RS485_Transmit_byte(sampleBuffer[i] >> 8);
						}
					#endif
									
					selfEncodingStatus = 0;
 7c6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <selfEncodingStatus+0x1>
 7ca:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <selfEncodingStatus>
					uartData = 0;
 7ce:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
					break;
				}
		}

		/***** Button handling *****/
		if((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 7d2:	4a 9b       	sbis	0x09, 2	; 9
 7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
		{
			if(e == 0) setpoint -= 4;
 7d6:	cb 56       	subi	r28, 0x6B	; 107
 7d8:	de 4f       	sbci	r29, 0xFE	; 254
 7da:	48 81       	ld	r20, Y
 7dc:	59 81       	ldd	r21, Y+1	; 0x01
 7de:	c5 59       	subi	r28, 0x95	; 149
 7e0:	d1 40       	sbci	r29, 0x01	; 1
 7e2:	45 2b       	or	r20, r21
 7e4:	49 f4       	brne	.+18     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
 7e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setpoint>
 7ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <setpoint+0x1>
 7ee:	04 97       	sbiw	r24, 0x04	; 4
 7f0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <setpoint+0x1>
 7f4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <setpoint>
		}
		
		if((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 7f8:	4b 9b       	sbis	0x09, 3	; 9
 7fa:	7a cd       	rjmp	.-1292   	; 0x2f0 <main+0x20>
		{
			if(e == 0) setpoint += 4;
 7fc:	cb 56       	subi	r28, 0x6B	; 107
 7fe:	de 4f       	sbci	r29, 0xFE	; 254
 800:	68 81       	ld	r22, Y
 802:	79 81       	ldd	r23, Y+1	; 0x01
 804:	c5 59       	subi	r28, 0x95	; 149
 806:	d1 40       	sbci	r29, 0x01	; 1
 808:	67 2b       	or	r22, r23
 80a:	09 f0       	breq	.+2      	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
 80c:	71 cd       	rjmp	.-1310   	; 0x2f0 <main+0x20>
 80e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setpoint>
 812:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <setpoint+0x1>
 816:	04 96       	adiw	r24, 0x04	; 4
 818:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <setpoint+0x1>
 81c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <setpoint>
 820:	67 cd       	rjmp	.-1330   	; 0x2f0 <main+0x20>

00000822 <DUTY_CYCLE>:
	DUTY_CYCLE(1.5); //Duty cycle
	ICR1  = 2500; //50Hz
}

void DUTY_CYCLE(float x)
{
 822:	cf 92       	push	r12
 824:	df 92       	push	r13
 826:	ef 92       	push	r14
 828:	ff 92       	push	r15
 82a:	6b 01       	movw	r12, r22
 82c:	7c 01       	movw	r14, r24
	 OCR1A = (uint16_t)(2500 - (125 * x));
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	4a ef       	ldi	r20, 0xFA	; 250
 834:	52 e4       	ldi	r21, 0x42	; 66
 836:	17 d2       	rcall	.+1070   	; 0xc66 <__mulsf3>
 838:	9b 01       	movw	r18, r22
 83a:	ac 01       	movw	r20, r24
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	70 e4       	ldi	r23, 0x40	; 64
 840:	8c e1       	ldi	r24, 0x1C	; 28
 842:	95 e4       	ldi	r25, 0x45	; 69
 844:	5d d0       	rcall	.+186    	; 0x900 <__subsf3>
 846:	2d d1       	rcall	.+602    	; 0xaa2 <__fixunssfsi>
 848:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 84c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	 cDutyCycle = x;
 850:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <cDutyCycle>
 854:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <cDutyCycle+0x1>
 858:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <cDutyCycle+0x2>
 85c:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <cDutyCycle+0x3>
}
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	df 90       	pop	r13
 866:	cf 90       	pop	r12
 868:	08 95       	ret

0000086a <Timer_init>:

volatile float cDutyCycle = 0.0;
void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 86a:	80 ec       	ldi	r24, 0xC0	; 192
 86c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 870:	83 e1       	ldi	r24, 0x13	; 19
 872:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	DUTY_CYCLE(1.5); //Duty cycle
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	80 ec       	ldi	r24, 0xC0	; 192
 87c:	9f e3       	ldi	r25, 0x3F	; 63
 87e:	d1 df       	rcall	.-94     	; 0x822 <DUTY_CYCLE>
	ICR1  = 2500; //50Hz
 880:	84 ec       	ldi	r24, 0xC4	; 196
 882:	99 e0       	ldi	r25, 0x09	; 9
 884:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 888:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 88c:	08 95       	ret

0000088e <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 88e:	87 e6       	ldi	r24, 0x67	; 103
 890:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 894:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 898:	e1 ec       	ldi	r30, 0xC1	; 193
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	88 6d       	ori	r24, 0xD8	; 216
 8a0:	80 83       	st	Z, r24
 8a2:	e2 ec       	ldi	r30, 0xC2	; 194
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	86 60       	ori	r24, 0x06	; 6
 8aa:	80 83       	st	Z, r24
 8ac:	08 95       	ret

000008ae <RS485_Transmit_byte>:
 8ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7ff0c0>
 8b2:	95 ff       	sbrs	r25, 5
 8b4:	fc cf       	rjmp	.-8      	; 0x8ae <RS485_Transmit_byte>
 8b6:	95 b1       	in	r25, 0x05	; 5
 8b8:	94 60       	ori	r25, 0x04	; 4
 8ba:	95 b9       	out	0x05, r25	; 5
 8bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 8c0:	08 95       	ret

000008c2 <__vector_18>:

ISR(USART_RX_vect)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	8f 93       	push	r24
	uartData = UDR0; //Received data must be read to clear RXC flag
 8ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 8d2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <uartData>
}
 8d6:	8f 91       	pop	r24
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <__vector_20>:

ISR(USART_TX_vect)
{
 8e2:	1f 92       	push	r1
 8e4:	0f 92       	push	r0
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	0f 92       	push	r0
 8ea:	11 24       	eor	r1, r1
 8ec:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 8ee:	85 b1       	in	r24, 0x05	; 5
 8f0:	8b 7f       	andi	r24, 0xFB	; 251
 8f2:	85 b9       	out	0x05, r24	; 5
 8f4:	8f 91       	pop	r24
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <__subsf3>:
 900:	50 58       	subi	r21, 0x80	; 128

00000902 <__addsf3>:
 902:	bb 27       	eor	r27, r27
 904:	aa 27       	eor	r26, r26
 906:	0e d0       	rcall	.+28     	; 0x924 <__addsf3x>
 908:	70 c1       	rjmp	.+736    	; 0xbea <__fp_round>
 90a:	61 d1       	rcall	.+706    	; 0xbce <__fp_pscA>
 90c:	30 f0       	brcs	.+12     	; 0x91a <__addsf3+0x18>
 90e:	66 d1       	rcall	.+716    	; 0xbdc <__fp_pscB>
 910:	20 f0       	brcs	.+8      	; 0x91a <__addsf3+0x18>
 912:	31 f4       	brne	.+12     	; 0x920 <__addsf3+0x1e>
 914:	9f 3f       	cpi	r25, 0xFF	; 255
 916:	11 f4       	brne	.+4      	; 0x91c <__addsf3+0x1a>
 918:	1e f4       	brtc	.+6      	; 0x920 <__addsf3+0x1e>
 91a:	56 c1       	rjmp	.+684    	; 0xbc8 <__fp_nan>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__addsf3+0x1e>
 91e:	e0 95       	com	r30
 920:	e7 fb       	bst	r30, 7
 922:	4c c1       	rjmp	.+664    	; 0xbbc <__fp_inf>

00000924 <__addsf3x>:
 924:	e9 2f       	mov	r30, r25
 926:	72 d1       	rcall	.+740    	; 0xc0c <__fp_split3>
 928:	80 f3       	brcs	.-32     	; 0x90a <__addsf3+0x8>
 92a:	ba 17       	cp	r27, r26
 92c:	62 07       	cpc	r22, r18
 92e:	73 07       	cpc	r23, r19
 930:	84 07       	cpc	r24, r20
 932:	95 07       	cpc	r25, r21
 934:	18 f0       	brcs	.+6      	; 0x93c <__addsf3x+0x18>
 936:	71 f4       	brne	.+28     	; 0x954 <__addsf3x+0x30>
 938:	9e f5       	brtc	.+102    	; 0x9a0 <__addsf3x+0x7c>
 93a:	8a c1       	rjmp	.+788    	; 0xc50 <__fp_zero>
 93c:	0e f4       	brtc	.+2      	; 0x940 <__addsf3x+0x1c>
 93e:	e0 95       	com	r30
 940:	0b 2e       	mov	r0, r27
 942:	ba 2f       	mov	r27, r26
 944:	a0 2d       	mov	r26, r0
 946:	0b 01       	movw	r0, r22
 948:	b9 01       	movw	r22, r18
 94a:	90 01       	movw	r18, r0
 94c:	0c 01       	movw	r0, r24
 94e:	ca 01       	movw	r24, r20
 950:	a0 01       	movw	r20, r0
 952:	11 24       	eor	r1, r1
 954:	ff 27       	eor	r31, r31
 956:	59 1b       	sub	r21, r25
 958:	99 f0       	breq	.+38     	; 0x980 <__addsf3x+0x5c>
 95a:	59 3f       	cpi	r21, 0xF9	; 249
 95c:	50 f4       	brcc	.+20     	; 0x972 <__addsf3x+0x4e>
 95e:	50 3e       	cpi	r21, 0xE0	; 224
 960:	68 f1       	brcs	.+90     	; 0x9bc <__addsf3x+0x98>
 962:	1a 16       	cp	r1, r26
 964:	f0 40       	sbci	r31, 0x00	; 0
 966:	a2 2f       	mov	r26, r18
 968:	23 2f       	mov	r18, r19
 96a:	34 2f       	mov	r19, r20
 96c:	44 27       	eor	r20, r20
 96e:	58 5f       	subi	r21, 0xF8	; 248
 970:	f3 cf       	rjmp	.-26     	; 0x958 <__addsf3x+0x34>
 972:	46 95       	lsr	r20
 974:	37 95       	ror	r19
 976:	27 95       	ror	r18
 978:	a7 95       	ror	r26
 97a:	f0 40       	sbci	r31, 0x00	; 0
 97c:	53 95       	inc	r21
 97e:	c9 f7       	brne	.-14     	; 0x972 <__addsf3x+0x4e>
 980:	7e f4       	brtc	.+30     	; 0x9a0 <__addsf3x+0x7c>
 982:	1f 16       	cp	r1, r31
 984:	ba 0b       	sbc	r27, r26
 986:	62 0b       	sbc	r22, r18
 988:	73 0b       	sbc	r23, r19
 98a:	84 0b       	sbc	r24, r20
 98c:	ba f0       	brmi	.+46     	; 0x9bc <__addsf3x+0x98>
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	a1 f0       	breq	.+40     	; 0x9ba <__addsf3x+0x96>
 992:	ff 0f       	add	r31, r31
 994:	bb 1f       	adc	r27, r27
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	c2 f7       	brpl	.-16     	; 0x98e <__addsf3x+0x6a>
 99e:	0e c0       	rjmp	.+28     	; 0x9bc <__addsf3x+0x98>
 9a0:	ba 0f       	add	r27, r26
 9a2:	62 1f       	adc	r22, r18
 9a4:	73 1f       	adc	r23, r19
 9a6:	84 1f       	adc	r24, r20
 9a8:	48 f4       	brcc	.+18     	; 0x9bc <__addsf3x+0x98>
 9aa:	87 95       	ror	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	9e 3f       	cpi	r25, 0xFE	; 254
 9b6:	08 f0       	brcs	.+2      	; 0x9ba <__addsf3x+0x96>
 9b8:	b3 cf       	rjmp	.-154    	; 0x920 <__addsf3+0x1e>
 9ba:	93 95       	inc	r25
 9bc:	88 0f       	add	r24, r24
 9be:	08 f0       	brcs	.+2      	; 0x9c2 <__addsf3x+0x9e>
 9c0:	99 27       	eor	r25, r25
 9c2:	ee 0f       	add	r30, r30
 9c4:	97 95       	ror	r25
 9c6:	87 95       	ror	r24
 9c8:	08 95       	ret

000009ca <__cmpsf2>:
 9ca:	d4 d0       	rcall	.+424    	; 0xb74 <__fp_cmp>
 9cc:	08 f4       	brcc	.+2      	; 0x9d0 <__cmpsf2+0x6>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	08 95       	ret

000009d2 <__divsf3>:
 9d2:	0c d0       	rcall	.+24     	; 0x9ec <__divsf3x>
 9d4:	0a c1       	rjmp	.+532    	; 0xbea <__fp_round>
 9d6:	02 d1       	rcall	.+516    	; 0xbdc <__fp_pscB>
 9d8:	40 f0       	brcs	.+16     	; 0x9ea <__divsf3+0x18>
 9da:	f9 d0       	rcall	.+498    	; 0xbce <__fp_pscA>
 9dc:	30 f0       	brcs	.+12     	; 0x9ea <__divsf3+0x18>
 9de:	21 f4       	brne	.+8      	; 0x9e8 <__divsf3+0x16>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	19 f0       	breq	.+6      	; 0x9ea <__divsf3+0x18>
 9e4:	eb c0       	rjmp	.+470    	; 0xbbc <__fp_inf>
 9e6:	51 11       	cpse	r21, r1
 9e8:	34 c1       	rjmp	.+616    	; 0xc52 <__fp_szero>
 9ea:	ee c0       	rjmp	.+476    	; 0xbc8 <__fp_nan>

000009ec <__divsf3x>:
 9ec:	0f d1       	rcall	.+542    	; 0xc0c <__fp_split3>
 9ee:	98 f3       	brcs	.-26     	; 0x9d6 <__divsf3+0x4>

000009f0 <__divsf3_pse>:
 9f0:	99 23       	and	r25, r25
 9f2:	c9 f3       	breq	.-14     	; 0x9e6 <__divsf3+0x14>
 9f4:	55 23       	and	r21, r21
 9f6:	b1 f3       	breq	.-20     	; 0x9e4 <__divsf3+0x12>
 9f8:	95 1b       	sub	r25, r21
 9fa:	55 0b       	sbc	r21, r21
 9fc:	bb 27       	eor	r27, r27
 9fe:	aa 27       	eor	r26, r26
 a00:	62 17       	cp	r22, r18
 a02:	73 07       	cpc	r23, r19
 a04:	84 07       	cpc	r24, r20
 a06:	38 f0       	brcs	.+14     	; 0xa16 <__divsf3_pse+0x26>
 a08:	9f 5f       	subi	r25, 0xFF	; 255
 a0a:	5f 4f       	sbci	r21, 0xFF	; 255
 a0c:	22 0f       	add	r18, r18
 a0e:	33 1f       	adc	r19, r19
 a10:	44 1f       	adc	r20, r20
 a12:	aa 1f       	adc	r26, r26
 a14:	a9 f3       	breq	.-22     	; 0xa00 <__divsf3_pse+0x10>
 a16:	33 d0       	rcall	.+102    	; 0xa7e <__divsf3_pse+0x8e>
 a18:	0e 2e       	mov	r0, r30
 a1a:	3a f0       	brmi	.+14     	; 0xa2a <__divsf3_pse+0x3a>
 a1c:	e0 e8       	ldi	r30, 0x80	; 128
 a1e:	30 d0       	rcall	.+96     	; 0xa80 <__divsf3_pse+0x90>
 a20:	91 50       	subi	r25, 0x01	; 1
 a22:	50 40       	sbci	r21, 0x00	; 0
 a24:	e6 95       	lsr	r30
 a26:	00 1c       	adc	r0, r0
 a28:	ca f7       	brpl	.-14     	; 0xa1c <__divsf3_pse+0x2c>
 a2a:	29 d0       	rcall	.+82     	; 0xa7e <__divsf3_pse+0x8e>
 a2c:	fe 2f       	mov	r31, r30
 a2e:	27 d0       	rcall	.+78     	; 0xa7e <__divsf3_pse+0x8e>
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	bb 1f       	adc	r27, r27
 a38:	26 17       	cp	r18, r22
 a3a:	37 07       	cpc	r19, r23
 a3c:	48 07       	cpc	r20, r24
 a3e:	ab 07       	cpc	r26, r27
 a40:	b0 e8       	ldi	r27, 0x80	; 128
 a42:	09 f0       	breq	.+2      	; 0xa46 <__divsf3_pse+0x56>
 a44:	bb 0b       	sbc	r27, r27
 a46:	80 2d       	mov	r24, r0
 a48:	bf 01       	movw	r22, r30
 a4a:	ff 27       	eor	r31, r31
 a4c:	93 58       	subi	r25, 0x83	; 131
 a4e:	5f 4f       	sbci	r21, 0xFF	; 255
 a50:	2a f0       	brmi	.+10     	; 0xa5c <__divsf3_pse+0x6c>
 a52:	9e 3f       	cpi	r25, 0xFE	; 254
 a54:	51 05       	cpc	r21, r1
 a56:	68 f0       	brcs	.+26     	; 0xa72 <__divsf3_pse+0x82>
 a58:	b1 c0       	rjmp	.+354    	; 0xbbc <__fp_inf>
 a5a:	fb c0       	rjmp	.+502    	; 0xc52 <__fp_szero>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	ec f3       	brlt	.-6      	; 0xa5a <__divsf3_pse+0x6a>
 a60:	98 3e       	cpi	r25, 0xE8	; 232
 a62:	dc f3       	brlt	.-10     	; 0xa5a <__divsf3_pse+0x6a>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b7 95       	ror	r27
 a6c:	f7 95       	ror	r31
 a6e:	9f 5f       	subi	r25, 0xFF	; 255
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__divsf3_pse+0x74>
 a72:	88 0f       	add	r24, r24
 a74:	91 1d       	adc	r25, r1
 a76:	96 95       	lsr	r25
 a78:	87 95       	ror	r24
 a7a:	97 f9       	bld	r25, 7
 a7c:	08 95       	ret
 a7e:	e1 e0       	ldi	r30, 0x01	; 1
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	bb 1f       	adc	r27, r27
 a88:	62 17       	cp	r22, r18
 a8a:	73 07       	cpc	r23, r19
 a8c:	84 07       	cpc	r24, r20
 a8e:	ba 07       	cpc	r27, r26
 a90:	20 f0       	brcs	.+8      	; 0xa9a <__divsf3_pse+0xaa>
 a92:	62 1b       	sub	r22, r18
 a94:	73 0b       	sbc	r23, r19
 a96:	84 0b       	sbc	r24, r20
 a98:	ba 0b       	sbc	r27, r26
 a9a:	ee 1f       	adc	r30, r30
 a9c:	88 f7       	brcc	.-30     	; 0xa80 <__divsf3_pse+0x90>
 a9e:	e0 95       	com	r30
 aa0:	08 95       	ret

00000aa2 <__fixunssfsi>:
 aa2:	bc d0       	rcall	.+376    	; 0xc1c <__fp_splitA>
 aa4:	88 f0       	brcs	.+34     	; 0xac8 <__fixunssfsi+0x26>
 aa6:	9f 57       	subi	r25, 0x7F	; 127
 aa8:	90 f0       	brcs	.+36     	; 0xace <__fixunssfsi+0x2c>
 aaa:	b9 2f       	mov	r27, r25
 aac:	99 27       	eor	r25, r25
 aae:	b7 51       	subi	r27, 0x17	; 23
 ab0:	a0 f0       	brcs	.+40     	; 0xada <__fixunssfsi+0x38>
 ab2:	d1 f0       	breq	.+52     	; 0xae8 <__fixunssfsi+0x46>
 ab4:	66 0f       	add	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	1a f0       	brmi	.+6      	; 0xac4 <__fixunssfsi+0x22>
 abe:	ba 95       	dec	r27
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__fixunssfsi+0x12>
 ac2:	12 c0       	rjmp	.+36     	; 0xae8 <__fixunssfsi+0x46>
 ac4:	b1 30       	cpi	r27, 0x01	; 1
 ac6:	81 f0       	breq	.+32     	; 0xae8 <__fixunssfsi+0x46>
 ac8:	c3 d0       	rcall	.+390    	; 0xc50 <__fp_zero>
 aca:	b1 e0       	ldi	r27, 0x01	; 1
 acc:	08 95       	ret
 ace:	c0 c0       	rjmp	.+384    	; 0xc50 <__fp_zero>
 ad0:	67 2f       	mov	r22, r23
 ad2:	78 2f       	mov	r23, r24
 ad4:	88 27       	eor	r24, r24
 ad6:	b8 5f       	subi	r27, 0xF8	; 248
 ad8:	39 f0       	breq	.+14     	; 0xae8 <__fixunssfsi+0x46>
 ada:	b9 3f       	cpi	r27, 0xF9	; 249
 adc:	cc f3       	brlt	.-14     	; 0xad0 <__fixunssfsi+0x2e>
 ade:	86 95       	lsr	r24
 ae0:	77 95       	ror	r23
 ae2:	67 95       	ror	r22
 ae4:	b3 95       	inc	r27
 ae6:	d9 f7       	brne	.-10     	; 0xade <__fixunssfsi+0x3c>
 ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__fixunssfsi+0x56>
 aea:	90 95       	com	r25
 aec:	80 95       	com	r24
 aee:	70 95       	com	r23
 af0:	61 95       	neg	r22
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	08 95       	ret

00000afa <__floatunsisf>:
 afa:	e8 94       	clt
 afc:	09 c0       	rjmp	.+18     	; 0xb10 <__floatsisf+0x12>

00000afe <__floatsisf>:
 afe:	97 fb       	bst	r25, 7
 b00:	3e f4       	brtc	.+14     	; 0xb10 <__floatsisf+0x12>
 b02:	90 95       	com	r25
 b04:	80 95       	com	r24
 b06:	70 95       	com	r23
 b08:	61 95       	neg	r22
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	99 23       	and	r25, r25
 b12:	a9 f0       	breq	.+42     	; 0xb3e <__floatsisf+0x40>
 b14:	f9 2f       	mov	r31, r25
 b16:	96 e9       	ldi	r25, 0x96	; 150
 b18:	bb 27       	eor	r27, r27
 b1a:	93 95       	inc	r25
 b1c:	f6 95       	lsr	r31
 b1e:	87 95       	ror	r24
 b20:	77 95       	ror	r23
 b22:	67 95       	ror	r22
 b24:	b7 95       	ror	r27
 b26:	f1 11       	cpse	r31, r1
 b28:	f8 cf       	rjmp	.-16     	; 0xb1a <__floatsisf+0x1c>
 b2a:	fa f4       	brpl	.+62     	; 0xb6a <__floatsisf+0x6c>
 b2c:	bb 0f       	add	r27, r27
 b2e:	11 f4       	brne	.+4      	; 0xb34 <__floatsisf+0x36>
 b30:	60 ff       	sbrs	r22, 0
 b32:	1b c0       	rjmp	.+54     	; 0xb6a <__floatsisf+0x6c>
 b34:	6f 5f       	subi	r22, 0xFF	; 255
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	16 c0       	rjmp	.+44     	; 0xb6a <__floatsisf+0x6c>
 b3e:	88 23       	and	r24, r24
 b40:	11 f0       	breq	.+4      	; 0xb46 <__floatsisf+0x48>
 b42:	96 e9       	ldi	r25, 0x96	; 150
 b44:	11 c0       	rjmp	.+34     	; 0xb68 <__floatsisf+0x6a>
 b46:	77 23       	and	r23, r23
 b48:	21 f0       	breq	.+8      	; 0xb52 <__floatsisf+0x54>
 b4a:	9e e8       	ldi	r25, 0x8E	; 142
 b4c:	87 2f       	mov	r24, r23
 b4e:	76 2f       	mov	r23, r22
 b50:	05 c0       	rjmp	.+10     	; 0xb5c <__floatsisf+0x5e>
 b52:	66 23       	and	r22, r22
 b54:	71 f0       	breq	.+28     	; 0xb72 <__floatsisf+0x74>
 b56:	96 e8       	ldi	r25, 0x86	; 134
 b58:	86 2f       	mov	r24, r22
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	2a f0       	brmi	.+10     	; 0xb6a <__floatsisf+0x6c>
 b60:	9a 95       	dec	r25
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	da f7       	brpl	.-10     	; 0xb60 <__floatsisf+0x62>
 b6a:	88 0f       	add	r24, r24
 b6c:	96 95       	lsr	r25
 b6e:	87 95       	ror	r24
 b70:	97 f9       	bld	r25, 7
 b72:	08 95       	ret

00000b74 <__fp_cmp>:
 b74:	99 0f       	add	r25, r25
 b76:	00 08       	sbc	r0, r0
 b78:	55 0f       	add	r21, r21
 b7a:	aa 0b       	sbc	r26, r26
 b7c:	e0 e8       	ldi	r30, 0x80	; 128
 b7e:	fe ef       	ldi	r31, 0xFE	; 254
 b80:	16 16       	cp	r1, r22
 b82:	17 06       	cpc	r1, r23
 b84:	e8 07       	cpc	r30, r24
 b86:	f9 07       	cpc	r31, r25
 b88:	c0 f0       	brcs	.+48     	; 0xbba <__fp_cmp+0x46>
 b8a:	12 16       	cp	r1, r18
 b8c:	13 06       	cpc	r1, r19
 b8e:	e4 07       	cpc	r30, r20
 b90:	f5 07       	cpc	r31, r21
 b92:	98 f0       	brcs	.+38     	; 0xbba <__fp_cmp+0x46>
 b94:	62 1b       	sub	r22, r18
 b96:	73 0b       	sbc	r23, r19
 b98:	84 0b       	sbc	r24, r20
 b9a:	95 0b       	sbc	r25, r21
 b9c:	39 f4       	brne	.+14     	; 0xbac <__fp_cmp+0x38>
 b9e:	0a 26       	eor	r0, r26
 ba0:	61 f0       	breq	.+24     	; 0xbba <__fp_cmp+0x46>
 ba2:	23 2b       	or	r18, r19
 ba4:	24 2b       	or	r18, r20
 ba6:	25 2b       	or	r18, r21
 ba8:	21 f4       	brne	.+8      	; 0xbb2 <__fp_cmp+0x3e>
 baa:	08 95       	ret
 bac:	0a 26       	eor	r0, r26
 bae:	09 f4       	brne	.+2      	; 0xbb2 <__fp_cmp+0x3e>
 bb0:	a1 40       	sbci	r26, 0x01	; 1
 bb2:	a6 95       	lsr	r26
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	81 1d       	adc	r24, r1
 bb8:	81 1d       	adc	r24, r1
 bba:	08 95       	ret

00000bbc <__fp_inf>:
 bbc:	97 f9       	bld	r25, 7
 bbe:	9f 67       	ori	r25, 0x7F	; 127
 bc0:	80 e8       	ldi	r24, 0x80	; 128
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	08 95       	ret

00000bc8 <__fp_nan>:
 bc8:	9f ef       	ldi	r25, 0xFF	; 255
 bca:	80 ec       	ldi	r24, 0xC0	; 192
 bcc:	08 95       	ret

00000bce <__fp_pscA>:
 bce:	00 24       	eor	r0, r0
 bd0:	0a 94       	dec	r0
 bd2:	16 16       	cp	r1, r22
 bd4:	17 06       	cpc	r1, r23
 bd6:	18 06       	cpc	r1, r24
 bd8:	09 06       	cpc	r0, r25
 bda:	08 95       	ret

00000bdc <__fp_pscB>:
 bdc:	00 24       	eor	r0, r0
 bde:	0a 94       	dec	r0
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	05 06       	cpc	r0, r21
 be8:	08 95       	ret

00000bea <__fp_round>:
 bea:	09 2e       	mov	r0, r25
 bec:	03 94       	inc	r0
 bee:	00 0c       	add	r0, r0
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <__fp_round+0xc>
 bf2:	88 23       	and	r24, r24
 bf4:	52 f0       	brmi	.+20     	; 0xc0a <__fp_round+0x20>
 bf6:	bb 0f       	add	r27, r27
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <__fp_round+0x20>
 bfa:	bf 2b       	or	r27, r31
 bfc:	11 f4       	brne	.+4      	; 0xc02 <__fp_round+0x18>
 bfe:	60 ff       	sbrs	r22, 0
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <__fp_round+0x20>
 c02:	6f 5f       	subi	r22, 0xFF	; 255
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	08 95       	ret

00000c0c <__fp_split3>:
 c0c:	57 fd       	sbrc	r21, 7
 c0e:	90 58       	subi	r25, 0x80	; 128
 c10:	44 0f       	add	r20, r20
 c12:	55 1f       	adc	r21, r21
 c14:	59 f0       	breq	.+22     	; 0xc2c <__fp_splitA+0x10>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	71 f0       	breq	.+28     	; 0xc36 <__fp_splitA+0x1a>
 c1a:	47 95       	ror	r20

00000c1c <__fp_splitA>:
 c1c:	88 0f       	add	r24, r24
 c1e:	97 fb       	bst	r25, 7
 c20:	99 1f       	adc	r25, r25
 c22:	61 f0       	breq	.+24     	; 0xc3c <__fp_splitA+0x20>
 c24:	9f 3f       	cpi	r25, 0xFF	; 255
 c26:	79 f0       	breq	.+30     	; 0xc46 <__fp_splitA+0x2a>
 c28:	87 95       	ror	r24
 c2a:	08 95       	ret
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	14 06       	cpc	r1, r20
 c32:	55 1f       	adc	r21, r21
 c34:	f2 cf       	rjmp	.-28     	; 0xc1a <__fp_split3+0xe>
 c36:	46 95       	lsr	r20
 c38:	f1 df       	rcall	.-30     	; 0xc1c <__fp_splitA>
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <__fp_splitA+0x30>
 c3c:	16 16       	cp	r1, r22
 c3e:	17 06       	cpc	r1, r23
 c40:	18 06       	cpc	r1, r24
 c42:	99 1f       	adc	r25, r25
 c44:	f1 cf       	rjmp	.-30     	; 0xc28 <__fp_splitA+0xc>
 c46:	86 95       	lsr	r24
 c48:	71 05       	cpc	r23, r1
 c4a:	61 05       	cpc	r22, r1
 c4c:	08 94       	sec
 c4e:	08 95       	ret

00000c50 <__fp_zero>:
 c50:	e8 94       	clt

00000c52 <__fp_szero>:
 c52:	bb 27       	eor	r27, r27
 c54:	66 27       	eor	r22, r22
 c56:	77 27       	eor	r23, r23
 c58:	cb 01       	movw	r24, r22
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <__gesf2>:
 c5e:	8a df       	rcall	.-236    	; 0xb74 <__fp_cmp>
 c60:	08 f4       	brcc	.+2      	; 0xc64 <__gesf2+0x6>
 c62:	8f ef       	ldi	r24, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__mulsf3>:
 c66:	0b d0       	rcall	.+22     	; 0xc7e <__mulsf3x>
 c68:	c0 cf       	rjmp	.-128    	; 0xbea <__fp_round>
 c6a:	b1 df       	rcall	.-158    	; 0xbce <__fp_pscA>
 c6c:	28 f0       	brcs	.+10     	; 0xc78 <__mulsf3+0x12>
 c6e:	b6 df       	rcall	.-148    	; 0xbdc <__fp_pscB>
 c70:	18 f0       	brcs	.+6      	; 0xc78 <__mulsf3+0x12>
 c72:	95 23       	and	r25, r21
 c74:	09 f0       	breq	.+2      	; 0xc78 <__mulsf3+0x12>
 c76:	a2 cf       	rjmp	.-188    	; 0xbbc <__fp_inf>
 c78:	a7 cf       	rjmp	.-178    	; 0xbc8 <__fp_nan>
 c7a:	11 24       	eor	r1, r1
 c7c:	ea cf       	rjmp	.-44     	; 0xc52 <__fp_szero>

00000c7e <__mulsf3x>:
 c7e:	c6 df       	rcall	.-116    	; 0xc0c <__fp_split3>
 c80:	a0 f3       	brcs	.-24     	; 0xc6a <__mulsf3+0x4>

00000c82 <__mulsf3_pse>:
 c82:	95 9f       	mul	r25, r21
 c84:	d1 f3       	breq	.-12     	; 0xc7a <__mulsf3+0x14>
 c86:	95 0f       	add	r25, r21
 c88:	50 e0       	ldi	r21, 0x00	; 0
 c8a:	55 1f       	adc	r21, r21
 c8c:	62 9f       	mul	r22, r18
 c8e:	f0 01       	movw	r30, r0
 c90:	72 9f       	mul	r23, r18
 c92:	bb 27       	eor	r27, r27
 c94:	f0 0d       	add	r31, r0
 c96:	b1 1d       	adc	r27, r1
 c98:	63 9f       	mul	r22, r19
 c9a:	aa 27       	eor	r26, r26
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	aa 1f       	adc	r26, r26
 ca2:	64 9f       	mul	r22, r20
 ca4:	66 27       	eor	r22, r22
 ca6:	b0 0d       	add	r27, r0
 ca8:	a1 1d       	adc	r26, r1
 caa:	66 1f       	adc	r22, r22
 cac:	82 9f       	mul	r24, r18
 cae:	22 27       	eor	r18, r18
 cb0:	b0 0d       	add	r27, r0
 cb2:	a1 1d       	adc	r26, r1
 cb4:	62 1f       	adc	r22, r18
 cb6:	73 9f       	mul	r23, r19
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	83 9f       	mul	r24, r19
 cc0:	a0 0d       	add	r26, r0
 cc2:	61 1d       	adc	r22, r1
 cc4:	22 1f       	adc	r18, r18
 cc6:	74 9f       	mul	r23, r20
 cc8:	33 27       	eor	r19, r19
 cca:	a0 0d       	add	r26, r0
 ccc:	61 1d       	adc	r22, r1
 cce:	23 1f       	adc	r18, r19
 cd0:	84 9f       	mul	r24, r20
 cd2:	60 0d       	add	r22, r0
 cd4:	21 1d       	adc	r18, r1
 cd6:	82 2f       	mov	r24, r18
 cd8:	76 2f       	mov	r23, r22
 cda:	6a 2f       	mov	r22, r26
 cdc:	11 24       	eor	r1, r1
 cde:	9f 57       	subi	r25, 0x7F	; 127
 ce0:	50 40       	sbci	r21, 0x00	; 0
 ce2:	8a f0       	brmi	.+34     	; 0xd06 <__mulsf3_pse+0x84>
 ce4:	e1 f0       	breq	.+56     	; 0xd1e <__mulsf3_pse+0x9c>
 ce6:	88 23       	and	r24, r24
 ce8:	4a f0       	brmi	.+18     	; 0xcfc <__mulsf3_pse+0x7a>
 cea:	ee 0f       	add	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	bb 1f       	adc	r27, r27
 cf0:	66 1f       	adc	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	91 50       	subi	r25, 0x01	; 1
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__mulsf3_pse+0x64>
 cfc:	9e 3f       	cpi	r25, 0xFE	; 254
 cfe:	51 05       	cpc	r21, r1
 d00:	70 f0       	brcs	.+28     	; 0xd1e <__mulsf3_pse+0x9c>
 d02:	5c cf       	rjmp	.-328    	; 0xbbc <__fp_inf>
 d04:	a6 cf       	rjmp	.-180    	; 0xc52 <__fp_szero>
 d06:	5f 3f       	cpi	r21, 0xFF	; 255
 d08:	ec f3       	brlt	.-6      	; 0xd04 <__mulsf3_pse+0x82>
 d0a:	98 3e       	cpi	r25, 0xE8	; 232
 d0c:	dc f3       	brlt	.-10     	; 0xd04 <__mulsf3_pse+0x82>
 d0e:	86 95       	lsr	r24
 d10:	77 95       	ror	r23
 d12:	67 95       	ror	r22
 d14:	b7 95       	ror	r27
 d16:	f7 95       	ror	r31
 d18:	e7 95       	ror	r30
 d1a:	9f 5f       	subi	r25, 0xFF	; 255
 d1c:	c1 f7       	brne	.-16     	; 0xd0e <__mulsf3_pse+0x8c>
 d1e:	fe 2b       	or	r31, r30
 d20:	88 0f       	add	r24, r24
 d22:	91 1d       	adc	r25, r1
 d24:	96 95       	lsr	r25
 d26:	87 95       	ror	r24
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__udivmodhi4>:
 d2c:	aa 1b       	sub	r26, r26
 d2e:	bb 1b       	sub	r27, r27
 d30:	51 e1       	ldi	r21, 0x11	; 17
 d32:	07 c0       	rjmp	.+14     	; 0xd42 <__udivmodhi4_ep>

00000d34 <__udivmodhi4_loop>:
 d34:	aa 1f       	adc	r26, r26
 d36:	bb 1f       	adc	r27, r27
 d38:	a6 17       	cp	r26, r22
 d3a:	b7 07       	cpc	r27, r23
 d3c:	10 f0       	brcs	.+4      	; 0xd42 <__udivmodhi4_ep>
 d3e:	a6 1b       	sub	r26, r22
 d40:	b7 0b       	sbc	r27, r23

00000d42 <__udivmodhi4_ep>:
 d42:	88 1f       	adc	r24, r24
 d44:	99 1f       	adc	r25, r25
 d46:	5a 95       	dec	r21
 d48:	a9 f7       	brne	.-22     	; 0xd34 <__udivmodhi4_loop>
 d4a:	80 95       	com	r24
 d4c:	90 95       	com	r25
 d4e:	bc 01       	movw	r22, r24
 d50:	cd 01       	movw	r24, r26
 d52:	08 95       	ret

00000d54 <__umoddi3>:
 d54:	68 94       	set
 d56:	01 c0       	rjmp	.+2      	; 0xd5a <__udivdi3_umoddi3>

00000d58 <__udivdi3>:
 d58:	e8 94       	clt

00000d5a <__udivdi3_umoddi3>:
 d5a:	8f 92       	push	r8
 d5c:	9f 92       	push	r9
 d5e:	cf 93       	push	r28
 d60:	df 93       	push	r29
 d62:	05 d0       	rcall	.+10     	; 0xd6e <__udivmod64>
 d64:	df 91       	pop	r29
 d66:	cf 91       	pop	r28
 d68:	9f 90       	pop	r9
 d6a:	8f 90       	pop	r8
 d6c:	08 95       	ret

00000d6e <__udivmod64>:
 d6e:	88 24       	eor	r8, r8
 d70:	99 24       	eor	r9, r9
 d72:	f4 01       	movw	r30, r8
 d74:	e4 01       	movw	r28, r8
 d76:	b0 e4       	ldi	r27, 0x40	; 64
 d78:	1b 2e       	mov	r1, r27
 d7a:	d4 01       	movw	r26, r8
 d7c:	9d 15       	cp	r25, r13
 d7e:	8e 04       	cpc	r8, r14
 d80:	9f 04       	cpc	r9, r15
 d82:	e0 07       	cpc	r30, r16
 d84:	f1 07       	cpc	r31, r17
 d86:	38 f4       	brcc	.+14     	; 0xd96 <__udivmod64+0x28>
 d88:	fc 01       	movw	r30, r24
 d8a:	4b 01       	movw	r8, r22
 d8c:	ca 01       	movw	r24, r20
 d8e:	b9 01       	movw	r22, r18
 d90:	ad 01       	movw	r20, r26
 d92:	9e 01       	movw	r18, r28
 d94:	16 94       	lsr	r1
 d96:	22 0f       	add	r18, r18
 d98:	33 1f       	adc	r19, r19
 d9a:	44 1f       	adc	r20, r20
 d9c:	55 1f       	adc	r21, r21
 d9e:	66 1f       	adc	r22, r22
 da0:	77 1f       	adc	r23, r23
 da2:	88 1f       	adc	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	88 1c       	adc	r8, r8
 da8:	99 1c       	adc	r9, r9
 daa:	ee 1f       	adc	r30, r30
 dac:	ff 1f       	adc	r31, r31
 dae:	cc 1f       	adc	r28, r28
 db0:	dd 1f       	adc	r29, r29
 db2:	aa 1f       	adc	r26, r26
 db4:	bb 1f       	adc	r27, r27
 db6:	8a 14       	cp	r8, r10
 db8:	9b 04       	cpc	r9, r11
 dba:	ec 05       	cpc	r30, r12
 dbc:	fd 05       	cpc	r31, r13
 dbe:	ce 05       	cpc	r28, r14
 dc0:	df 05       	cpc	r29, r15
 dc2:	a0 07       	cpc	r26, r16
 dc4:	b1 07       	cpc	r27, r17
 dc6:	48 f0       	brcs	.+18     	; 0xdda <__udivmod64+0x6c>
 dc8:	8a 18       	sub	r8, r10
 dca:	9b 08       	sbc	r9, r11
 dcc:	ec 09       	sbc	r30, r12
 dce:	fd 09       	sbc	r31, r13
 dd0:	ce 09       	sbc	r28, r14
 dd2:	df 09       	sbc	r29, r15
 dd4:	a0 0b       	sbc	r26, r16
 dd6:	b1 0b       	sbc	r27, r17
 dd8:	21 60       	ori	r18, 0x01	; 1
 dda:	1a 94       	dec	r1
 ddc:	e1 f6       	brne	.-72     	; 0xd96 <__udivmod64+0x28>
 dde:	2e f4       	brtc	.+10     	; 0xdea <__udivmod64+0x7c>
 de0:	94 01       	movw	r18, r8
 de2:	af 01       	movw	r20, r30
 de4:	be 01       	movw	r22, r28
 de6:	cd 01       	movw	r24, r26
 de8:	00 0c       	add	r0, r0
 dea:	08 95       	ret

00000dec <__ashrdi3>:
 dec:	97 fb       	bst	r25, 7
 dee:	10 f8       	bld	r1, 0

00000df0 <__lshrdi3>:
 df0:	16 94       	lsr	r1
 df2:	00 08       	sbc	r0, r0
 df4:	0f 93       	push	r16
 df6:	08 30       	cpi	r16, 0x08	; 8
 df8:	98 f0       	brcs	.+38     	; 0xe20 <__lshrdi3+0x30>
 dfa:	08 50       	subi	r16, 0x08	; 8
 dfc:	23 2f       	mov	r18, r19
 dfe:	34 2f       	mov	r19, r20
 e00:	45 2f       	mov	r20, r21
 e02:	56 2f       	mov	r21, r22
 e04:	67 2f       	mov	r22, r23
 e06:	78 2f       	mov	r23, r24
 e08:	89 2f       	mov	r24, r25
 e0a:	90 2d       	mov	r25, r0
 e0c:	f4 cf       	rjmp	.-24     	; 0xdf6 <__lshrdi3+0x6>
 e0e:	05 94       	asr	r0
 e10:	97 95       	ror	r25
 e12:	87 95       	ror	r24
 e14:	77 95       	ror	r23
 e16:	67 95       	ror	r22
 e18:	57 95       	ror	r21
 e1a:	47 95       	ror	r20
 e1c:	37 95       	ror	r19
 e1e:	27 95       	ror	r18
 e20:	0a 95       	dec	r16
 e22:	aa f7       	brpl	.-22     	; 0xe0e <__lshrdi3+0x1e>
 e24:	0f 91       	pop	r16
 e26:	08 95       	ret

00000e28 <__adddi3>:
 e28:	2a 0d       	add	r18, r10
 e2a:	3b 1d       	adc	r19, r11
 e2c:	4c 1d       	adc	r20, r12
 e2e:	5d 1d       	adc	r21, r13
 e30:	6e 1d       	adc	r22, r14
 e32:	7f 1d       	adc	r23, r15
 e34:	80 1f       	adc	r24, r16
 e36:	91 1f       	adc	r25, r17
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
