
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000f28  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080010c  0080010c  00000fc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144a  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4e  00000000  00000000  000025c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d17  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  0000402c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00004344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b6  00000000  00000000  00004963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005319  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	ba c2       	rjmp	.+1396   	; 0x57e <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	93 c4       	rjmp	.+2342   	; 0x94c <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	be c4       	rjmp	.+2428   	; 0x9a6 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e2       	ldi	r30, 0x28	; 40
  48:	ff e0       	ldi	r31, 0x0F	; 15
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 30       	cpi	r26, 0x0C	; 12
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ac e0       	ldi	r26, 0x0C	; 12
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 33       	cpi	r26, 0x37	; 55
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	e4 d2       	rcall	.+1480   	; 0x630 <main>
  68:	5d c7       	rjmp	.+3770   	; 0xf24 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 67       	ori	r24, 0x70	; 112
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	80 67       	ori	r24, 0x70	; 112
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <selfConfigure>:
#include <avr/io.h>

volatile int selfEncodingStatus = 0;

void selfConfigure()
{
  8a:	2f 92       	push	r2
  8c:	3f 92       	push	r3
  8e:	4f 92       	push	r4
  90:	5f 92       	push	r5
  92:	6f 92       	push	r6
  94:	7f 92       	push	r7
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	c2 59       	subi	r28, 0x92	; 146
  b4:	d1 40       	sbci	r29, 0x01	; 1
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
	selfEncodingStatus = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
  c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	uint16_t sampleBuffer[100] = {0};
  cc:	fe 01       	movw	r30, r28
  ce:	31 96       	adiw	r30, 0x01	; 1
  d0:	88 ec       	ldi	r24, 0xC8	; 200
  d2:	df 01       	movw	r26, r30
  d4:	1d 92       	st	X+, r1
  d6:	8a 95       	dec	r24
  d8:	e9 f7       	brne	.-6      	; 0xd4 <selfConfigure+0x4a>
						
	/* Get peaks and valleys */
	uint16_t peaks[50] = {0};
  da:	e8 53       	subi	r30, 0x38	; 56
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	df 01       	movw	r26, r30
  e2:	28 2f       	mov	r18, r24
  e4:	1d 92       	st	X+, r1
  e6:	2a 95       	dec	r18
  e8:	e9 f7       	brne	.-6      	; 0xe4 <selfConfigure+0x5a>
	uint8_t peakCounter = 0;
	uint16_t valleys[50] = {0};
  ea:	ec 59       	subi	r30, 0x9C	; 156
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	df 01       	movw	r26, r30
  f0:	1d 92       	st	X+, r1
  f2:	8a 95       	dec	r24
  f4:	e9 f7       	brne	.-6      	; 0xf0 <selfConfigure+0x66>
	uint8_t valleyCounter = 0;
						
	//Do in increments because of limited memory
	for(int x = 0; x < 7; x++)
  f6:	61 2c       	mov	r6, r1
  f8:	71 2c       	mov	r7, r1
						
	/* Get peaks and valleys */
	uint16_t peaks[50] = {0};
	uint8_t peakCounter = 0;
	uint16_t valleys[50] = {0};
	uint8_t valleyCounter = 0;
  fa:	91 2c       	mov	r9, r1
	selfEncodingStatus = 1;
	uint16_t sampleBuffer[100] = {0};
						
	/* Get peaks and valleys */
	uint16_t peaks[50] = {0};
	uint8_t peakCounter = 0;
  fc:	81 2c       	mov	r8, r1
	uint16_t valleys[50] = {0};
	uint8_t valleyCounter = 0;
						
	//Do in increments because of limited memory
	for(int x = 0; x < 7; x++)
  fe:	8c c0       	rjmp	.+280    	; 0x218 <__DATA_REGION_LENGTH__+0x18>
	{
		/* Get data */
		DUTY_CYCLE(1.6);
 100:	6d ec       	ldi	r22, 0xCD	; 205
 102:	7c ec       	ldi	r23, 0xCC	; 204
 104:	8c ec       	ldi	r24, 0xCC	; 204
 106:	9f e3       	ldi	r25, 0x3F	; 63
 108:	71 d3       	rcall	.+1762   	; 0x7ec <DUTY_CYCLE>
		for(int i = 1; i < 100; i++)
 10a:	01 e0       	ldi	r16, 0x01	; 1
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	24 c0       	rjmp	.+72     	; 0x158 <__EEPROM_REGION_LENGTH__+0x58>
		{
			sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
 110:	f8 01       	movw	r30, r16
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	2c 0f       	add	r18, r28
 11e:	3d 1f       	adc	r19, r29
 120:	e2 0f       	add	r30, r18
 122:	f3 1f       	adc	r31, r19
 124:	40 80       	ld	r4, Z
 126:	51 80       	ldd	r5, Z+1	; 0x01
 128:	1a d2       	rcall	.+1076   	; 0x55e <TWI_Read_proximity>
 12a:	84 0d       	add	r24, r4
 12c:	95 1d       	adc	r25, r5
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	f8 01       	movw	r30, r16
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	4c 0f       	add	r20, r28
 13e:	5d 1f       	adc	r21, r29
 140:	e4 0f       	add	r30, r20
 142:	f5 1f       	adc	r31, r21
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9c e9       	ldi	r25, 0x9C	; 156
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
 152:	00 00       	nop
	//Do in increments because of limited memory
	for(int x = 0; x < 7; x++)
	{
		/* Get data */
		DUTY_CYCLE(1.6);
		for(int i = 1; i < 100; i++)
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	04 36       	cpi	r16, 0x64	; 100
 15a:	11 05       	cpc	r17, r1
 15c:	cc f2       	brlt	.-78     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
		{
			sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
			_delay_ms(10); //LTR559 sample rate
		}
		DUTY_CYCLE(1.5);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	9f e3       	ldi	r25, 0x3F	; 63
 166:	42 d3       	rcall	.+1668   	; 0x7ec <DUTY_CYCLE>
							
		for(int i = 1; i < 100; i++)
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	4e c0       	rjmp	.+156    	; 0x20a <__DATA_REGION_LENGTH__+0xa>
		{
			if(sampleBuffer[i] > sampleBuffer[i - 1] && sampleBuffer[i] > sampleBuffer[i + 1])
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	a1 e0       	ldi	r26, 0x01	; 1
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	ac 0f       	add	r26, r28
 17a:	bd 1f       	adc	r27, r29
 17c:	ea 0f       	add	r30, r26
 17e:	fb 1f       	adc	r31, r27
 180:	20 81       	ld	r18, Z
 182:	31 81       	ldd	r19, Z+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ea 0f       	add	r30, r26
 18e:	fb 1f       	adc	r31, r27
 190:	40 81       	ld	r20, Z
 192:	51 81       	ldd	r21, Z+1	; 0x01
 194:	42 17       	cp	r20, r18
 196:	53 07       	cpc	r21, r19
 198:	c0 f4       	brcc	.+48     	; 0x1ca <__EEPROM_REGION_LENGTH__+0xca>
 19a:	fc 01       	movw	r30, r24
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ea 0f       	add	r30, r26
 1a4:	fb 1f       	adc	r31, r27
 1a6:	60 81       	ld	r22, Z
 1a8:	71 81       	ldd	r23, Z+1	; 0x01
 1aa:	62 17       	cp	r22, r18
 1ac:	73 07       	cpc	r23, r19
 1ae:	68 f4       	brcc	.+26     	; 0x1ca <__EEPROM_REGION_LENGTH__+0xca>
			{
				peaks[peakCounter] = sampleBuffer[i];
 1b0:	e8 2d       	mov	r30, r8
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	69 ec       	ldi	r22, 0xC9	; 201
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	6c 0f       	add	r22, r28
 1be:	7d 1f       	adc	r23, r29
 1c0:	e6 0f       	add	r30, r22
 1c2:	f7 1f       	adc	r31, r23
 1c4:	31 83       	std	Z+1, r19	; 0x01
 1c6:	20 83       	st	Z, r18
				peakCounter++;
 1c8:	83 94       	inc	r8
			}
			if(sampleBuffer[i] < sampleBuffer[i - 1] && sampleBuffer[i] < sampleBuffer[i + 1])
 1ca:	24 17       	cp	r18, r20
 1cc:	35 07       	cpc	r19, r21
 1ce:	e0 f4       	brcc	.+56     	; 0x208 <__DATA_REGION_LENGTH__+0x8>
 1d0:	fc 01       	movw	r30, r24
 1d2:	31 96       	adiw	r30, 0x01	; 1
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	a1 e0       	ldi	r26, 0x01	; 1
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	ac 0f       	add	r26, r28
 1de:	bd 1f       	adc	r27, r29
 1e0:	ea 0f       	add	r30, r26
 1e2:	fb 1f       	adc	r31, r27
 1e4:	40 81       	ld	r20, Z
 1e6:	51 81       	ldd	r21, Z+1	; 0x01
 1e8:	24 17       	cp	r18, r20
 1ea:	35 07       	cpc	r19, r21
 1ec:	68 f4       	brcc	.+26     	; 0x208 <__DATA_REGION_LENGTH__+0x8>
			{
				valleys[valleyCounter] = sampleBuffer[i];
 1ee:	e9 2d       	mov	r30, r9
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	4d e2       	ldi	r20, 0x2D	; 45
 1f8:	51 e0       	ldi	r21, 0x01	; 1
 1fa:	4c 0f       	add	r20, r28
 1fc:	5d 1f       	adc	r21, r29
 1fe:	e4 0f       	add	r30, r20
 200:	f5 1f       	adc	r31, r21
 202:	31 83       	std	Z+1, r19	; 0x01
 204:	20 83       	st	Z, r18
				valleyCounter++;
 206:	93 94       	inc	r9
			sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
			_delay_ms(10); //LTR559 sample rate
		}
		DUTY_CYCLE(1.5);
							
		for(int i = 1; i < 100; i++)
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	84 36       	cpi	r24, 0x64	; 100
 20c:	91 05       	cpc	r25, r1
 20e:	0c f4       	brge	.+2      	; 0x212 <__DATA_REGION_LENGTH__+0x12>
 210:	ae cf       	rjmp	.-164    	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
	uint8_t peakCounter = 0;
	uint16_t valleys[50] = {0};
	uint8_t valleyCounter = 0;
						
	//Do in increments because of limited memory
	for(int x = 0; x < 7; x++)
 212:	5f ef       	ldi	r21, 0xFF	; 255
 214:	65 1a       	sub	r6, r21
 216:	75 0a       	sbc	r7, r21
 218:	67 e0       	ldi	r22, 0x07	; 7
 21a:	66 16       	cp	r6, r22
 21c:	71 04       	cpc	r7, r1
 21e:	0c f4       	brge	.+2      	; 0x222 <__DATA_REGION_LENGTH__+0x22>
 220:	6f cf       	rjmp	.-290    	; 0x100 <__EEPROM_REGION_LENGTH__>
 222:	61 2c       	mov	r6, r1
 224:	71 2c       	mov	r7, r1
 226:	41 2c       	mov	r4, r1
 228:	51 2c       	mov	r5, r1
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	a0 e0       	ldi	r26, 0x00	; 0
 22e:	cf 56       	subi	r28, 0x6F	; 111
 230:	de 4f       	sbci	r29, 0xFE	; 254
 232:	18 82       	st	Y, r1
 234:	c1 59       	subi	r28, 0x91	; 145
 236:	d1 40       	sbci	r29, 0x01	; 1
 238:	ce 56       	subi	r28, 0x6E	; 110
 23a:	de 4f       	sbci	r29, 0xFE	; 254
 23c:	18 82       	st	Y, r1
 23e:	c2 59       	subi	r28, 0x92	; 146
 240:	d1 40       	sbci	r29, 0x01	; 1
 242:	21 2c       	mov	r2, r1
 244:	31 2c       	mov	r3, r1
 246:	38 c0       	rjmp	.+112    	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
						
	/* Find lowest value in peaks and highest value in valleys */
	uint64_t peakSum = 0;
	uint16_t valleySum = 0;
						
	for(int i = 0; i < peakCounter; i++) peakSum += peaks[i];
 248:	c3 01       	movw	r24, r6
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	e9 ec       	ldi	r30, 0xC9	; 201
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	8e 0f       	add	r24, r30
 258:	9f 1f       	adc	r25, r31
 25a:	fc 01       	movw	r30, r24
 25c:	a0 80       	ld	r10, Z
 25e:	b1 80       	ldd	r11, Z+1	; 0x01
 260:	2a 2d       	mov	r18, r10
 262:	3b 2d       	mov	r19, r11
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	a4 2c       	mov	r10, r4
 272:	b5 2c       	mov	r11, r5
 274:	cb 2e       	mov	r12, r27
 276:	da 2e       	mov	r13, r26
 278:	cf 56       	subi	r28, 0x6F	; 111
 27a:	de 4f       	sbci	r29, 0xFE	; 254
 27c:	e8 80       	ld	r14, Y
 27e:	c1 59       	subi	r28, 0x91	; 145
 280:	d1 40       	sbci	r29, 0x01	; 1
 282:	ce 56       	subi	r28, 0x6E	; 110
 284:	de 4f       	sbci	r29, 0xFE	; 254
 286:	f8 80       	ld	r15, Y
 288:	c2 59       	subi	r28, 0x92	; 146
 28a:	d1 40       	sbci	r29, 0x01	; 1
 28c:	02 2d       	mov	r16, r2
 28e:	13 2d       	mov	r17, r3
 290:	40 d6       	rcall	.+3200   	; 0xf12 <__adddi3>
 292:	42 2e       	mov	r4, r18
 294:	53 2e       	mov	r5, r19
 296:	b4 2f       	mov	r27, r20
 298:	a5 2f       	mov	r26, r21
 29a:	cf 56       	subi	r28, 0x6F	; 111
 29c:	de 4f       	sbci	r29, 0xFE	; 254
 29e:	68 83       	st	Y, r22
 2a0:	c1 59       	subi	r28, 0x91	; 145
 2a2:	d1 40       	sbci	r29, 0x01	; 1
 2a4:	ce 56       	subi	r28, 0x6E	; 110
 2a6:	de 4f       	sbci	r29, 0xFE	; 254
 2a8:	78 83       	st	Y, r23
 2aa:	c2 59       	subi	r28, 0x92	; 146
 2ac:	d1 40       	sbci	r29, 0x01	; 1
 2ae:	28 2e       	mov	r2, r24
 2b0:	39 2e       	mov	r3, r25
 2b2:	ff ef       	ldi	r31, 0xFF	; 255
 2b4:	6f 1a       	sub	r6, r31
 2b6:	7f 0a       	sbc	r7, r31
 2b8:	88 2d       	mov	r24, r8
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	68 16       	cp	r6, r24
 2be:	79 06       	cpc	r7, r25
 2c0:	1c f2       	brlt	.-122    	; 0x248 <__DATA_REGION_LENGTH__+0x48>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	61 2c       	mov	r6, r1
 2c8:	71 2c       	mov	r7, r1
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
	for(int i = 0; i < valleyCounter; i++) valleySum = valleys[i];
 2cc:	9c 01       	movw	r18, r24
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	4d e2       	ldi	r20, 0x2D	; 45
 2d4:	51 e0       	ldi	r21, 0x01	; 1
 2d6:	4c 0f       	add	r20, r28
 2d8:	5d 1f       	adc	r21, r29
 2da:	24 0f       	add	r18, r20
 2dc:	35 1f       	adc	r19, r21
 2de:	f9 01       	movw	r30, r18
 2e0:	60 80       	ld	r6, Z
 2e2:	71 80       	ldd	r7, Z+1	; 0x01
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	29 2d       	mov	r18, r9
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	82 17       	cp	r24, r18
 2ec:	93 07       	cpc	r25, r19
 2ee:	74 f3       	brlt	.-36     	; 0x2cc <__DATA_REGION_LENGTH__+0xcc>
						
	/* Calculate mid point and set LTR559 Interrupt Threshold to this value */
	uint16_t middleValue = ((peakSum/peakCounter) + (valleySum/valleyCounter)) / 2;
 2f0:	a8 2c       	mov	r10, r8
 2f2:	b1 2c       	mov	r11, r1
 2f4:	c1 2c       	mov	r12, r1
 2f6:	d1 2c       	mov	r13, r1
 2f8:	e1 2c       	mov	r14, r1
 2fa:	f1 2c       	mov	r15, r1
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	24 2d       	mov	r18, r4
 302:	35 2d       	mov	r19, r5
 304:	4b 2f       	mov	r20, r27
 306:	5a 2f       	mov	r21, r26
 308:	cf 56       	subi	r28, 0x6F	; 111
 30a:	de 4f       	sbci	r29, 0xFE	; 254
 30c:	68 81       	ld	r22, Y
 30e:	c1 59       	subi	r28, 0x91	; 145
 310:	d1 40       	sbci	r29, 0x01	; 1
 312:	ce 56       	subi	r28, 0x6E	; 110
 314:	de 4f       	sbci	r29, 0xFE	; 254
 316:	78 81       	ld	r23, Y
 318:	c2 59       	subi	r28, 0x92	; 146
 31a:	d1 40       	sbci	r29, 0x01	; 1
 31c:	82 2d       	mov	r24, r2
 31e:	93 2d       	mov	r25, r3
 320:	90 d5       	rcall	.+2848   	; 0xe42 <__udivdi3>
 322:	a2 2e       	mov	r10, r18
 324:	b3 2e       	mov	r11, r19
 326:	c4 2e       	mov	r12, r20
 328:	d5 2e       	mov	r13, r21
 32a:	e6 2e       	mov	r14, r22
 32c:	f7 2e       	mov	r15, r23
 32e:	08 2f       	mov	r16, r24
 330:	19 2f       	mov	r17, r25
 332:	69 2d       	mov	r22, r9
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	c3 01       	movw	r24, r6
 338:	5b d5       	rcall	.+2742   	; 0xdf0 <__udivmodhi4>
 33a:	ab 01       	movw	r20, r22
 33c:	24 2f       	mov	r18, r20
 33e:	35 2f       	mov	r19, r21
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	e2 d5       	rcall	.+3012   	; 0xf12 <__adddi3>
 34e:	01 e0       	ldi	r16, 0x01	; 1
 350:	c4 d5       	rcall	.+2952   	; 0xeda <__lshrdi3>
 352:	02 2f       	mov	r16, r18
 354:	13 2f       	mov	r17, r19
	TWI_Write_register(PS_THRES_UP_0, middleValue); //Upper interrupt threshold - 12 bit value
 356:	d2 2e       	mov	r13, r18
 358:	62 2f       	mov	r22, r18
 35a:	80 e9       	ldi	r24, 0x90	; 144
 35c:	9f d0       	rcall	.+318    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_1, middleValue >> 8);
 35e:	e1 2e       	mov	r14, r17
 360:	61 2f       	mov	r22, r17
 362:	81 e9       	ldi	r24, 0x91	; 145
 364:	9b d0       	rcall	.+310    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	82 e9       	ldi	r24, 0x92	; 146
 36a:	98 d0       	rcall	.+304    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_1, 0);
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	83 e9       	ldi	r24, 0x93	; 147
 370:	95 d0       	rcall	.+298    	; 0x49c <TWI_Write_register>
						
	//Save value in EEPROM so that it can be used upon next power cycle
	EEPROM_write(1, middleValue);
 372:	60 2f       	mov	r22, r16
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	3c d0       	rcall	.+120    	; 0x3f2 <EEPROM_write>
	EEPROM_write(2, middleValue >> 8);
 37a:	61 2f       	mov	r22, r17
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	38 d0       	rcall	.+112    	; 0x3f2 <EEPROM_write>
						
	#if S_SELF_CONF
	for(int i = 1; i < 100; i++)
 382:	01 e0       	ldi	r16, 0x01	; 1
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <__stack+0xb1>
	{
		RS485_Transmit_byte(middleValue);
 388:	8d 2d       	mov	r24, r13
 38a:	76 d2       	rcall	.+1260   	; 0x878 <RS485_Transmit_byte>
		RS485_Transmit_byte(middleValue >> 8);
 38c:	8e 2d       	mov	r24, r14
 38e:	74 d2       	rcall	.+1256   	; 0x878 <RS485_Transmit_byte>
							
		/* Plot all samples */
		RS485_Transmit_byte(sampleBuffer[i]);
 390:	f8 01       	movw	r30, r16
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	2c 0f       	add	r18, r28
 39c:	3d 1f       	adc	r19, r29
 39e:	e2 0f       	add	r30, r18
 3a0:	f3 1f       	adc	r31, r19
 3a2:	f1 80       	ldd	r15, Z+1	; 0x01
 3a4:	80 81       	ld	r24, Z
 3a6:	68 d2       	rcall	.+1232   	; 0x878 <RS485_Transmit_byte>
		RS485_Transmit_byte(sampleBuffer[i] >> 8);
 3a8:	8f 2d       	mov	r24, r15
 3aa:	66 d2       	rcall	.+1228   	; 0x878 <RS485_Transmit_byte>
	//Save value in EEPROM so that it can be used upon next power cycle
	EEPROM_write(1, middleValue);
	EEPROM_write(2, middleValue >> 8);
						
	#if S_SELF_CONF
	for(int i = 1; i < 100; i++)
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	04 36       	cpi	r16, 0x64	; 100
 3b2:	11 05       	cpc	r17, r1
 3b4:	4c f3       	brlt	.-46     	; 0x388 <__stack+0x89>
		RS485_Transmit_byte(sampleBuffer[i]);
		RS485_Transmit_byte(sampleBuffer[i] >> 8);
	}
	#endif
						
	selfEncodingStatus = 0;
 3b6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 3ba:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 3be:	ce 56       	subi	r28, 0x6E	; 110
 3c0:	de 4f       	sbci	r29, 0xFE	; 254
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	bf 90       	pop	r11
 3de:	af 90       	pop	r10
 3e0:	9f 90       	pop	r9
 3e2:	8f 90       	pop	r8
 3e4:	7f 90       	pop	r7
 3e6:	6f 90       	pop	r6
 3e8:	5f 90       	pop	r5
 3ea:	4f 90       	pop	r4
 3ec:	3f 90       	pop	r3
 3ee:	2f 90       	pop	r2
 3f0:	08 95       	ret

000003f2 <EEPROM_write>:
#include "eeprom.h"
#include <avr/interrupt.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	cli();
 3f2:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 3f4:	f9 99       	sbic	0x1f, 1	; 31
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <EEPROM_write+0x2>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
 3f8:	92 bd       	out	0x22, r25	; 34
 3fa:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 3fc:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 3fe:	8f b3       	in	r24, 0x1f	; 31
 400:	84 60       	ori	r24, 0x04	; 4
 402:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 404:	8f b3       	in	r24, 0x1f	; 31
 406:	82 60       	ori	r24, 0x02	; 2
 408:	8f bb       	out	0x1f, r24	; 31
	sei();
 40a:	78 94       	sei
 40c:	08 95       	ret

0000040e <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	cli();
 40e:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 410:	f9 99       	sbic	0x1f, 1	; 31
 412:	fe cf       	rjmp	.-4      	; 0x410 <EEPROM_read+0x2>
	;
	/* Set up address register */
	EEAR = uiAddress;
 414:	92 bd       	out	0x22, r25	; 34
 416:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 418:	8f b3       	in	r24, 0x1f	; 31
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	8f bb       	out	0x1f, r24	; 31
	sei();
 41e:	78 94       	sei
	/* Return data from Data Register */
	return EEDR;
 420:	80 b5       	in	r24, 0x20	; 32
 422:	08 95       	ret

00000424 <TWI_Init>:
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}

void TWI_Init()
{
	TWBR = 12; //400kHz = (16MHz) / (16 + 2(12) * (1))
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
 42a:	08 95       	ret

0000042c <TWI_Read_register>:
}

uint8_t TWI_Read_register(uint8_t registerValue)
{
	/*set the start condition*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
 42c:	94 ea       	ldi	r25, 0xA4	; 164
 42e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 432:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 436:	99 23       	and	r25, r25
 438:	e4 f7       	brge	.-8      	; 0x432 <TWI_Read_register+0x6>
			
	/*send the address*/
	TWDR = LTR_WRITE;
 43a:	96 e4       	ldi	r25, 0x46	; 70
 43c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT); //trigger I2C action
 440:	94 e8       	ldi	r25, 0x84	; 132
 442:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 446:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 44a:	99 23       	and	r25, r25
 44c:	e4 f7       	brge	.-8      	; 0x446 <TWI_Read_register+0x1a>
				
	/*specify the register*/
	TWDR = registerValue; //register value in the data register
 44e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 452:	84 e8       	ldi	r24, 0x84	; 132
 454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 458:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 45c:	88 23       	and	r24, r24
 45e:	e4 f7       	brge	.-8      	; 0x458 <TWI_Read_register+0x2c>
			
	/*switch master to read (receiver) mode and slave to transmitter*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA); //Set another start condition
 460:	84 ea       	ldi	r24, 0xA4	; 164
 462:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 466:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 46a:	88 23       	and	r24, r24
 46c:	e4 f7       	brge	.-8      	; 0x466 <TWI_Read_register+0x3a>
	
	TWDR = LTR_READ;
 46e:	87 e4       	ldi	r24, 0x47	; 71
 470:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 474:	84 e8       	ldi	r24, 0x84	; 132
 476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 47a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 47e:	88 23       	and	r24, r24
 480:	e4 f7       	brge	.-8      	; 0x47a <TWI_Read_register+0x4e>
			
	TWCR = (1 << TWEN) | (1 << TWINT);
 482:	84 e8       	ldi	r24, 0x84	; 132
 484:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 488:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 48c:	88 23       	and	r24, r24
 48e:	e4 f7       	brge	.-8      	; 0x488 <TWI_Read_register+0x5c>
	
	/*The received byte is now in the TWDR data register*/
	uint8_t register_value = TWDR;
 490:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
			
	/*set stop condition*/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 494:	94 e9       	ldi	r25, 0x94	; 148
 496:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>

	return register_value;
}
 49a:	08 95       	ret

0000049c <TWI_Write_register>:

void TWI_Write_register(uint8_t reg, uint8_t data)
{
	/*set the start condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTA));
 49c:	94 ea       	ldi	r25, 0xA4	; 164
 49e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 4a2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 4a6:	99 23       	and	r25, r25
 4a8:	e4 f7       	brge	.-8      	; 0x4a2 <TWI_Write_register+0x6>
	
	/*send the address*/
	TWDR = LTR_WRITE;                       //Data to send - ie, address + write bit
 4aa:	96 e4       	ldi	r25, 0x46	; 70
 4ac:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 4b0:	94 e8       	ldi	r25, 0x84	; 132
 4b2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 4b6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 4ba:	99 23       	and	r25, r25
 4bc:	e4 f7       	brge	.-8      	; 0x4b6 <TWI_Write_register+0x1a>
	
	/*send the register address*/
	TWDR = reg;								//Register address
 4be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN )| (1 << TWINT));	//Trigger I2C action
 4c2:	84 e8       	ldi	r24, 0x84	; 132
 4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 4c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 4cc:	88 23       	and	r24, r24
 4ce:	e4 f7       	brge	.-8      	; 0x4c8 <TWI_Write_register+0x2c>
	
	/*send the data byte*/
	TWDR = data;							//Data byte
 4d0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 4d4:	84 e8       	ldi	r24, 0x84	; 132
 4d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 4da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 4de:	88 23       	and	r24, r24
 4e0:	e4 f7       	brge	.-8      	; 0x4da <TWI_Write_register+0x3e>
	
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
 4e2:	84 e9       	ldi	r24, 0x94	; 148
 4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 4e8:	08 95       	ret

000004ea <LTR559_Init>:
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void LTR559_Init()
{
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
	/*Enable interrupt on PC2 - PCINT10*/
	PCICR |= (1 << PCIE1);
 4f2:	e8 e6       	ldi	r30, 0x68	; 104
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 4fc:	ec e6       	ldi	r30, 0x6C	; 108
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	84 60       	ori	r24, 0x04	; 4
 504:	80 83       	st	Z, r24
	
	TWI_Init();
 506:	8e df       	rcall	.-228    	; 0x424 <TWI_Init>
	TWI_Write_register(LTR_INTERRUPT, 0x05); //INT active high - only PS trigger
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	8f e8       	ldi	r24, 0x8F	; 143
 50c:	c7 df       	rcall	.-114    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_LED, 0b00011111); //60Khz LED pulse - DUTY 50% - LED 50mA
 50e:	6f e1       	ldi	r22, 0x1F	; 31
 510:	82 e8       	ldi	r24, 0x82	; 130
 512:	c4 df       	rcall	.-120    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_CONTR, 0x03); //Active mode - saturation indicator off
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	81 e8       	ldi	r24, 0x81	; 129
 518:	c1 df       	rcall	.-126    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_MEAS_RATE, 0x08); //10ms measurement repeat rate
 51a:	68 e0       	ldi	r22, 0x08	; 8
 51c:	84 e8       	ldi	r24, 0x84	; 132
 51e:	be df       	rcall	.-132    	; 0x49c <TWI_Write_register>
	
	/* Read threshold value from EEPROM previously saved by a self configure */
	uint16_t upperThreshold = 0;
	upperThreshold = EEPROM_read(1);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	74 df       	rcall	.-280    	; 0x40e <EEPROM_read>
 526:	08 2f       	mov	r16, r24
 528:	10 e0       	ldi	r17, 0x00	; 0
	upperThreshold |= (EEPROM_read(2) << 8);
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	6f df       	rcall	.-290    	; 0x40e <EEPROM_read>
 530:	c8 2f       	mov	r28, r24
 532:	d0 e0       	ldi	r29, 0x00	; 0
 534:	dc 2f       	mov	r29, r28
 536:	cc 27       	eor	r28, r28
 538:	c0 2b       	or	r28, r16
 53a:	d1 2b       	or	r29, r17

	TWI_Write_register(PS_THRES_UP_0, upperThreshold); //Upper interrupt threshold - 12 bit value
 53c:	6c 2f       	mov	r22, r28
 53e:	80 e9       	ldi	r24, 0x90	; 144
 540:	ad df       	rcall	.-166    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_1, upperThreshold >> 8);
 542:	6d 2f       	mov	r22, r29
 544:	81 e9       	ldi	r24, 0x91	; 145
 546:	aa df       	rcall	.-172    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	82 e9       	ldi	r24, 0x92	; 146
 54c:	a7 df       	rcall	.-178    	; 0x49c <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_1, 0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	83 e9       	ldi	r24, 0x93	; 147
 552:	a4 df       	rcall	.-184    	; 0x49c <TWI_Write_register>
	
	//TWI_Write_register(0x83, 0b00001000); //Number of pulses
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <TWI_Read_proximity>:
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
}

uint16_t TWI_Read_proximity()
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
 562:	8d e8       	ldi	r24, 0x8D	; 141
 564:	63 df       	rcall	.-314    	; 0x42c <TWI_Read_register>
 566:	c8 2f       	mov	r28, r24
 568:	d0 e0       	ldi	r29, 0x00	; 0
	psData += TWI_Read_register(0x8E) << 8;
 56a:	8e e8       	ldi	r24, 0x8E	; 142
 56c:	5f df       	rcall	.-322    	; 0x42c <TWI_Read_register>
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	98 2f       	mov	r25, r24
 572:	88 27       	eor	r24, r24

	return psData;
}
 574:	8c 0f       	add	r24, r28
 576:	9d 1f       	adc	r25, r29
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <__vector_4>:

volatile int encoderCount = 0;
extern volatile float cDutyCycle;
extern volatile int selfEncodingStatus;
ISR(PCINT1_vect)
{	
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	if(selfEncodingStatus != 1)
 5a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 5a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	89 f1       	breq	.+98     	; 0x60e <__vector_4+0x90>
	{
		if(cDutyCycle > 1.5f)
 5ac:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 5b0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 5b4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 5b8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	40 ec       	ldi	r20, 0xC0	; 192
 5c2:	5f e3       	ldi	r21, 0x3F	; 63
 5c4:	ae d3       	rcall	.+1884   	; 0xd22 <__gesf2>
 5c6:	18 16       	cp	r1, r24
 5c8:	54 f4       	brge	.+20     	; 0x5de <__vector_4+0x60>
			encoderCount++;
 5ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderCount>
 5ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderCount+0x1>
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderCount+0x1>
 5d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderCount>
 5dc:	18 c0       	rjmp	.+48     	; 0x60e <__vector_4+0x90>
		else if(cDutyCycle < 1.5f)
 5de:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 5e2:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 5e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 5ea:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 ec       	ldi	r20, 0xC0	; 192
 5f4:	5f e3       	ldi	r21, 0x3F	; 63
 5f6:	4b d2       	rcall	.+1174   	; 0xa8e <__cmpsf2>
 5f8:	88 23       	and	r24, r24
 5fa:	4c f4       	brge	.+18     	; 0x60e <__vector_4+0x90>
			encoderCount--;
 5fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderCount>
 600:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderCount+0x1>
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <encoderCount+0x1>
 60a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <encoderCount>
	}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <main>:
float dt = 0.01; //Sample period
float eIntergral = 0; //Integral counter
int setpoint = 0;

int main(void)
{
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	00 d0       	rcall	.+0      	; 0x636 <main+0x6>
 636:	00 d0       	rcall	.+0      	; 0x638 <main+0x8>
 638:	00 d0       	rcall	.+0      	; 0x63a <main+0xa>
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
	Board_init();		
 63e:	16 dd       	rcall	.-1492   	; 0x6c <Board_init>
	Timer_init();
 640:	f9 d0       	rcall	.+498    	; 0x834 <Timer_init>
	RS485_init();
 642:	0a d1       	rcall	.+532    	; 0x858 <RS485_init>
	LTR559_Init();
 644:	52 df       	rcall	.-348    	; 0x4ea <LTR559_Init>
		
	sei(); //Enable interrupts
 646:	78 94       	sei

    while (1) 
	{	
		/***** PID Control *****/
		int e = setpoint - encoderCount; //Error
 648:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <setpoint>
 64c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <setpoint+0x1>
 650:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <encoderCount>
 654:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <encoderCount+0x1>
 658:	28 1b       	sub	r18, r24
 65a:	39 0b       	sbc	r19, r25
 65c:	3e 83       	std	Y+6, r19	; 0x06
 65e:	2d 83       	std	Y+5, r18	; 0x05
		float Dedt = (e - ePrev) / dt; //Derivative
 660:	b9 01       	movw	r22, r18
 662:	33 0f       	add	r19, r19
 664:	88 0b       	sbc	r24, r24
 666:	99 0b       	sbc	r25, r25
 668:	ac d2       	rcall	.+1368   	; 0xbc2 <__floatsisf>
 66a:	6b 01       	movw	r12, r22
 66c:	7c 01       	movw	r14, r24
 66e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <ePrev>
 672:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <ePrev+0x1>
 676:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <ePrev+0x2>
 67a:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <ePrev+0x3>
 67e:	a2 d1       	rcall	.+836    	; 0x9c4 <__subsf3>
 680:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
 684:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
 688:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
 68c:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
 690:	a5 01       	movw	r20, r10
 692:	94 01       	movw	r18, r8
 694:	00 d2       	rcall	.+1024   	; 0xa96 <__divsf3>
 696:	2b 01       	movw	r4, r22
 698:	3c 01       	movw	r6, r24
		eIntergral += (e * dt); //Integral
 69a:	a5 01       	movw	r20, r10
 69c:	94 01       	movw	r18, r8
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	43 d3       	rcall	.+1670   	; 0xd2a <__mulsf3>
 6a4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <eIntergral>
 6a8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <eIntergral+0x1>
 6ac:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <eIntergral+0x2>
 6b0:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <eIntergral+0x3>
 6b4:	88 d1       	rcall	.+784    	; 0x9c6 <__addsf3>
 6b6:	4b 01       	movw	r8, r22
 6b8:	5c 01       	movw	r10, r24
 6ba:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <eIntergral>
 6be:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <eIntergral+0x1>
 6c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <eIntergral+0x2>
 6c6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <eIntergral+0x3>
		
		float u = (kp * e) + (kd * Dedt) + (ki * eIntergral); //Control signal
 6ca:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <kp>
 6ce:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <kp+0x1>
 6d2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <kp+0x2>
 6d6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <kp+0x3>
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	25 d3       	rcall	.+1610   	; 0xd2a <__mulsf3>
 6e0:	69 83       	std	Y+1, r22	; 0x01
 6e2:	7a 83       	std	Y+2, r23	; 0x02
 6e4:	8b 83       	std	Y+3, r24	; 0x03
 6e6:	9c 83       	std	Y+4, r25	; 0x04
 6e8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <kd>
 6ec:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <kd+0x1>
 6f0:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <kd+0x2>
 6f4:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <kd+0x3>
 6f8:	c3 01       	movw	r24, r6
 6fa:	b2 01       	movw	r22, r4
 6fc:	16 d3       	rcall	.+1580   	; 0xd2a <__mulsf3>
 6fe:	9b 01       	movw	r18, r22
 700:	ac 01       	movw	r20, r24
 702:	69 81       	ldd	r22, Y+1	; 0x01
 704:	7a 81       	ldd	r23, Y+2	; 0x02
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	9c 81       	ldd	r25, Y+4	; 0x04
 70a:	5d d1       	rcall	.+698    	; 0x9c6 <__addsf3>
 70c:	2b 01       	movw	r4, r22
 70e:	3c 01       	movw	r6, r24
 710:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ki>
 714:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ki+0x1>
 718:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ki+0x2>
 71c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ki+0x3>
 720:	c5 01       	movw	r24, r10
 722:	b4 01       	movw	r22, r8
 724:	02 d3       	rcall	.+1540   	; 0xd2a <__mulsf3>
 726:	9b 01       	movw	r18, r22
 728:	ac 01       	movw	r20, r24
 72a:	c3 01       	movw	r24, r6
 72c:	b2 01       	movw	r22, r4
 72e:	4b d1       	rcall	.+662    	; 0x9c6 <__addsf3>
 730:	4b 01       	movw	r8, r22
 732:	5c 01       	movw	r10, r24
		
		//Cap control signal maximum values
		if(u >= 100.0f)	u = 100.0f;
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	48 ec       	ldi	r20, 0xC8	; 200
 73a:	52 e4       	ldi	r21, 0x42	; 66
 73c:	f2 d2       	rcall	.+1508   	; 0xd22 <__gesf2>
 73e:	88 23       	and	r24, r24
 740:	44 f0       	brlt	.+16     	; 0x752 <main+0x122>
 742:	0f 2e       	mov	r0, r31
 744:	81 2c       	mov	r8, r1
 746:	91 2c       	mov	r9, r1
 748:	f8 ec       	ldi	r31, 0xC8	; 200
 74a:	af 2e       	mov	r10, r31
 74c:	f2 e4       	ldi	r31, 0x42	; 66
 74e:	bf 2e       	mov	r11, r31
 750:	f0 2d       	mov	r31, r0
		if(u <= -100.0f) u = -100.0f;
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	48 ec       	ldi	r20, 0xC8	; 200
 758:	52 ec       	ldi	r21, 0xC2	; 194
 75a:	c5 01       	movw	r24, r10
 75c:	b4 01       	movw	r22, r8
 75e:	97 d1       	rcall	.+814    	; 0xa8e <__cmpsf2>
 760:	18 16       	cp	r1, r24
 762:	44 f0       	brlt	.+16     	; 0x774 <main+0x144>
 764:	0f 2e       	mov	r0, r31
 766:	81 2c       	mov	r8, r1
 768:	91 2c       	mov	r9, r1
 76a:	f8 ec       	ldi	r31, 0xC8	; 200
 76c:	af 2e       	mov	r10, r31
 76e:	f2 ec       	ldi	r31, 0xC2	; 194
 770:	bf 2e       	mov	r11, r31
 772:	f0 2d       	mov	r31, r0
		
		//Convert control signal to PWM
		float dutyCyle = 1.5f + (0.005f * u); //1.5 is stopped, +/-0.5 maps to full forwards and full backwards 
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	37 ed       	ldi	r19, 0xD7	; 215
 778:	43 ea       	ldi	r20, 0xA3	; 163
 77a:	5b e3       	ldi	r21, 0x3B	; 59
 77c:	c5 01       	movw	r24, r10
 77e:	b4 01       	movw	r22, r8
 780:	d4 d2       	rcall	.+1448   	; 0xd2a <__mulsf3>
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	40 ec       	ldi	r20, 0xC0	; 192
 788:	5f e3       	ldi	r21, 0x3F	; 63
 78a:	1d d1       	rcall	.+570    	; 0x9c6 <__addsf3>
		DUTY_CYCLE(dutyCyle);
 78c:	2f d0       	rcall	.+94     	; 0x7ec <DUTY_CYCLE>
	 		RS485_Transmit_byte((int16_t)encoderCount >> 8);
	 		RS485_Transmit_byte((int16_t)setpoint);
	 		RS485_Transmit_byte((int16_t)setpoint >> 8);	
		#endif //S_PID

		ePrev = e; //update previous error
 78e:	c0 92 16 01 	sts	0x0116, r12	; 0x800116 <ePrev>
 792:	d0 92 17 01 	sts	0x0117, r13	; 0x800117 <ePrev+0x1>
 796:	e0 92 18 01 	sts	0x0118, r14	; 0x800118 <ePrev+0x2>
 79a:	f0 92 19 01 	sts	0x0119, r15	; 0x800119 <ePrev+0x3>
 79e:	8f ed       	ldi	r24, 0xDF	; 223
 7a0:	9b ea       	ldi	r25, 0xAB	; 171
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <main+0x172>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x178>
 7a8:	00 00       	nop
		_delay_ms(11); //11 ms since transmitting system response had influence on tuning
		
		/***** RS485/UART Data handling *****/
		RS485_Parse_Data();
 7aa:	70 d0       	rcall	.+224    	; 0x88c <RS485_Parse_Data>

		/***** Button handling *****/
		if((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 7ac:	4a 9b       	sbis	0x09, 2	; 9
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <main+0x19a>
		{
			if(e == 0) setpoint -= 4;
 7b0:	2d 81       	ldd	r18, Y+5	; 0x05
 7b2:	3e 81       	ldd	r19, Y+6	; 0x06
 7b4:	23 2b       	or	r18, r19
 7b6:	49 f4       	brne	.+18     	; 0x7ca <main+0x19a>
 7b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setpoint>
 7bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setpoint+0x1>
 7c0:	04 97       	sbiw	r24, 0x04	; 4
 7c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setpoint+0x1>
 7c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setpoint>
		}
		
		if((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 7ca:	4b 9b       	sbis	0x09, 3	; 9
 7cc:	3d cf       	rjmp	.-390    	; 0x648 <main+0x18>
		{
			if(e == 0) setpoint += 4;
 7ce:	8d 81       	ldd	r24, Y+5	; 0x05
 7d0:	9e 81       	ldd	r25, Y+6	; 0x06
 7d2:	89 2b       	or	r24, r25
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <main+0x1a8>
 7d6:	38 cf       	rjmp	.-400    	; 0x648 <main+0x18>
 7d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setpoint>
 7dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setpoint+0x1>
 7e0:	04 96       	adiw	r24, 0x04	; 4
 7e2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setpoint+0x1>
 7e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setpoint>
 7ea:	2e cf       	rjmp	.-420    	; 0x648 <main+0x18>

000007ec <DUTY_CYCLE>:
	DUTY_CYCLE(1.5); //Duty cycle
	ICR1  = 2500; //50Hz
}

void DUTY_CYCLE(float x)
{
 7ec:	cf 92       	push	r12
 7ee:	df 92       	push	r13
 7f0:	ef 92       	push	r14
 7f2:	ff 92       	push	r15
 7f4:	6b 01       	movw	r12, r22
 7f6:	7c 01       	movw	r14, r24
	 OCR1A = (uint16_t)(2500 - (125 * x));
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	4a ef       	ldi	r20, 0xFA	; 250
 7fe:	52 e4       	ldi	r21, 0x42	; 66
 800:	94 d2       	rcall	.+1320   	; 0xd2a <__mulsf3>
 802:	9b 01       	movw	r18, r22
 804:	ac 01       	movw	r20, r24
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e4       	ldi	r23, 0x40	; 64
 80a:	8c e1       	ldi	r24, 0x1C	; 28
 80c:	95 e4       	ldi	r25, 0x45	; 69
 80e:	da d0       	rcall	.+436    	; 0x9c4 <__subsf3>
 810:	aa d1       	rcall	.+852    	; 0xb66 <__fixunssfsi>
 812:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 816:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	 cDutyCycle = x;
 81a:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <cDutyCycle>
 81e:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <cDutyCycle+0x1>
 822:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <cDutyCycle+0x2>
 826:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <cDutyCycle+0x3>
}
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	08 95       	ret

00000834 <Timer_init>:

volatile float cDutyCycle = 0.0;
void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 834:	80 ec       	ldi	r24, 0xC0	; 192
 836:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 83a:	83 e1       	ldi	r24, 0x13	; 19
 83c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	DUTY_CYCLE(1.5); //Duty cycle
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 ec       	ldi	r24, 0xC0	; 192
 846:	9f e3       	ldi	r25, 0x3F	; 63
 848:	d1 df       	rcall	.-94     	; 0x7ec <DUTY_CYCLE>
	ICR1  = 2500; //50Hz
 84a:	84 ec       	ldi	r24, 0xC4	; 196
 84c:	99 e0       	ldi	r25, 0x09	; 9
 84e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 852:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 856:	08 95       	ret

00000858 <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 858:	87 e6       	ldi	r24, 0x67	; 103
 85a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 85e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 862:	e1 ec       	ldi	r30, 0xC1	; 193
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	88 6d       	ori	r24, 0xD8	; 216
 86a:	80 83       	st	Z, r24
 86c:	e2 ec       	ldi	r30, 0xC2	; 194
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	86 60       	ori	r24, 0x06	; 6
 874:	80 83       	st	Z, r24
 876:	08 95       	ret

00000878 <RS485_Transmit_byte>:
 878:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7ff0c0>
 87c:	95 ff       	sbrs	r25, 5
 87e:	fc cf       	rjmp	.-8      	; 0x878 <RS485_Transmit_byte>
 880:	95 b1       	in	r25, 0x05	; 5
 882:	94 60       	ori	r25, 0x04	; 4
 884:	95 b9       	out	0x05, r25	; 5
 886:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 88a:	08 95       	ret

0000088c <RS485_Parse_Data>:

void RS485_Parse_Data()
{
	if(uartData[0] == 1)
 88c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <uartData>
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	09 f0       	breq	.+2      	; 0x896 <RS485_Parse_Data+0xa>
 894:	3e c0       	rjmp	.+124    	; 0x912 <RS485_Parse_Data+0x86>
	{
		//Wait untill full packet has been received
		if(uartData[1] == uartDataCounter)
 896:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uartData+0x1>
 89a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartDataCounter>
 89e:	98 13       	cpse	r25, r24
 8a0:	54 c0       	rjmp	.+168    	; 0x94a <RS485_Parse_Data+0xbe>
		{
			switch(uartData[2])
 8a2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <uartData+0x2>
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <RS485_Parse_Data+0x24>
 8aa:	82 30       	cpi	r24, 0x02	; 2
 8ac:	19 f0       	breq	.+6      	; 0x8b4 <RS485_Parse_Data+0x28>
 8ae:	1f c0       	rjmp	.+62     	; 0x8ee <RS485_Parse_Data+0x62>
			{
				case 0x01: //Self configure command
				{
					selfConfigure();
 8b0:	ec db       	rcall	.-2088   	; 0x8a <selfConfigure>
					break;
 8b2:	1d c0       	rjmp	.+58     	; 0x8ee <RS485_Parse_Data+0x62>
				}
				case 0x02: //Move tape command
				{
					if(uartData[3] == 1)
 8b4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <uartData+0x3>
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	69 f4       	brne	.+26     	; 0x8d6 <RS485_Parse_Data+0x4a>
					{
						setpoint -= uartData[4];
 8bc:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <uartData+0x4>
 8c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setpoint>
 8c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setpoint+0x1>
 8c8:	82 1b       	sub	r24, r18
 8ca:	91 09       	sbc	r25, r1
 8cc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setpoint+0x1>
 8d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setpoint>
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <RS485_Parse_Data+0x62>
					}
					else
					{
						setpoint += uartData[4];
 8d6:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <uartData+0x4>
 8da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <setpoint>
 8de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <setpoint+0x1>
 8e2:	82 0f       	add	r24, r18
 8e4:	91 1d       	adc	r25, r1
 8e6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <setpoint+0x1>
 8ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <setpoint>
		charCounter++;
	}
}

void RS485_Parse_Data()
{
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <RS485_Parse_Data+0x74>
			}
			
			//reset buffer and counter
			for(int i = 0; i < uartDataCounter; i++)
			{
				uartData[i] = 0;
 8f4:	f9 01       	movw	r30, r18
 8f6:	ed 5d       	subi	r30, 0xDD	; 221
 8f8:	fe 4f       	sbci	r31, 0xFE	; 254
 8fa:	10 82       	st	Z, r1
					break;
				}
			}
			
			//reset buffer and counter
			for(int i = 0; i < uartDataCounter; i++)
 8fc:	2f 5f       	subi	r18, 0xFF	; 255
 8fe:	3f 4f       	sbci	r19, 0xFF	; 255
 900:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartDataCounter>
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	a4 f3       	brlt	.-24     	; 0x8f4 <RS485_Parse_Data+0x68>
			{
				uartData[i] = 0;
			}
			uartDataCounter = 0;
 90c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartDataCounter>
 910:	08 95       	ret
		}
	}
	else if(uartData[0] != 1)
 912:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <uartData>
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	c1 f0       	breq	.+48     	; 0x94a <RS485_Parse_Data+0xbe>
	{
		if(uartData[1] == uartDataCounter)
 91a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uartData+0x1>
 91e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartDataCounter>
 922:	98 13       	cpse	r25, r24
 924:	12 c0       	rjmp	.+36     	; 0x94a <RS485_Parse_Data+0xbe>
 926:	07 c0       	rjmp	.+14     	; 0x936 <RS485_Parse_Data+0xaa>
		{
			//Reset buffer since data is not for us
			for(int i = 0; i < uartDataCounter; i++)
			{
				uartData[i] = 0;
 928:	f9 01       	movw	r30, r18
 92a:	ed 5d       	subi	r30, 0xDD	; 221
 92c:	fe 4f       	sbci	r31, 0xFE	; 254
 92e:	10 82       	st	Z, r1
	else if(uartData[0] != 1)
	{
		if(uartData[1] == uartDataCounter)
		{
			//Reset buffer since data is not for us
			for(int i = 0; i < uartDataCounter; i++)
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	02 c0       	rjmp	.+4      	; 0x93a <RS485_Parse_Data+0xae>
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartDataCounter>
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	28 17       	cp	r18, r24
 942:	39 07       	cpc	r19, r25
 944:	8c f3       	brlt	.-30     	; 0x928 <RS485_Parse_Data+0x9c>
			{
				uartData[i] = 0;
			}
			uartDataCounter = 0;
 946:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartDataCounter>
 94a:	08 95       	ret

0000094c <__vector_18>:
		}
	}
}

ISR(USART_RX_vect)
{
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	uartData[uartDataCounter] = UDR0; //Received data must be read to clear RXC flag
 968:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <uartDataCounter>
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 972:	ed 5d       	subi	r30, 0xDD	; 221
 974:	fe 4f       	sbci	r31, 0xFE	; 254
 976:	80 83       	st	Z, r24
	uartDataCounter = (uartDataCounter + 1) % 20;
 978:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartDataCounter>
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	64 e1       	ldi	r22, 0x14	; 20
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	49 d2       	rcall	.+1170   	; 0xe18 <__divmodhi4>
 986:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <uartDataCounter>
}
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	bf 91       	pop	r27
 990:	af 91       	pop	r26
 992:	9f 91       	pop	r25
 994:	8f 91       	pop	r24
 996:	7f 91       	pop	r23
 998:	6f 91       	pop	r22
 99a:	5f 91       	pop	r21
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <__vector_20>:

ISR(USART_TX_vect)
{
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 9b2:	85 b1       	in	r24, 0x05	; 5
 9b4:	8b 7f       	andi	r24, 0xFB	; 251
 9b6:	85 b9       	out	0x05, r24	; 5
 9b8:	8f 91       	pop	r24
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <__subsf3>:
 9c4:	50 58       	subi	r21, 0x80	; 128

000009c6 <__addsf3>:
 9c6:	bb 27       	eor	r27, r27
 9c8:	aa 27       	eor	r26, r26
 9ca:	0e d0       	rcall	.+28     	; 0x9e8 <__addsf3x>
 9cc:	70 c1       	rjmp	.+736    	; 0xcae <__fp_round>
 9ce:	61 d1       	rcall	.+706    	; 0xc92 <__fp_pscA>
 9d0:	30 f0       	brcs	.+12     	; 0x9de <__addsf3+0x18>
 9d2:	66 d1       	rcall	.+716    	; 0xca0 <__fp_pscB>
 9d4:	20 f0       	brcs	.+8      	; 0x9de <__addsf3+0x18>
 9d6:	31 f4       	brne	.+12     	; 0x9e4 <__addsf3+0x1e>
 9d8:	9f 3f       	cpi	r25, 0xFF	; 255
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__addsf3+0x1a>
 9dc:	1e f4       	brtc	.+6      	; 0x9e4 <__addsf3+0x1e>
 9de:	56 c1       	rjmp	.+684    	; 0xc8c <__fp_nan>
 9e0:	0e f4       	brtc	.+2      	; 0x9e4 <__addsf3+0x1e>
 9e2:	e0 95       	com	r30
 9e4:	e7 fb       	bst	r30, 7
 9e6:	4c c1       	rjmp	.+664    	; 0xc80 <__fp_inf>

000009e8 <__addsf3x>:
 9e8:	e9 2f       	mov	r30, r25
 9ea:	72 d1       	rcall	.+740    	; 0xcd0 <__fp_split3>
 9ec:	80 f3       	brcs	.-32     	; 0x9ce <__addsf3+0x8>
 9ee:	ba 17       	cp	r27, r26
 9f0:	62 07       	cpc	r22, r18
 9f2:	73 07       	cpc	r23, r19
 9f4:	84 07       	cpc	r24, r20
 9f6:	95 07       	cpc	r25, r21
 9f8:	18 f0       	brcs	.+6      	; 0xa00 <__addsf3x+0x18>
 9fa:	71 f4       	brne	.+28     	; 0xa18 <__addsf3x+0x30>
 9fc:	9e f5       	brtc	.+102    	; 0xa64 <__addsf3x+0x7c>
 9fe:	8a c1       	rjmp	.+788    	; 0xd14 <__fp_zero>
 a00:	0e f4       	brtc	.+2      	; 0xa04 <__addsf3x+0x1c>
 a02:	e0 95       	com	r30
 a04:	0b 2e       	mov	r0, r27
 a06:	ba 2f       	mov	r27, r26
 a08:	a0 2d       	mov	r26, r0
 a0a:	0b 01       	movw	r0, r22
 a0c:	b9 01       	movw	r22, r18
 a0e:	90 01       	movw	r18, r0
 a10:	0c 01       	movw	r0, r24
 a12:	ca 01       	movw	r24, r20
 a14:	a0 01       	movw	r20, r0
 a16:	11 24       	eor	r1, r1
 a18:	ff 27       	eor	r31, r31
 a1a:	59 1b       	sub	r21, r25
 a1c:	99 f0       	breq	.+38     	; 0xa44 <__addsf3x+0x5c>
 a1e:	59 3f       	cpi	r21, 0xF9	; 249
 a20:	50 f4       	brcc	.+20     	; 0xa36 <__addsf3x+0x4e>
 a22:	50 3e       	cpi	r21, 0xE0	; 224
 a24:	68 f1       	brcs	.+90     	; 0xa80 <__addsf3x+0x98>
 a26:	1a 16       	cp	r1, r26
 a28:	f0 40       	sbci	r31, 0x00	; 0
 a2a:	a2 2f       	mov	r26, r18
 a2c:	23 2f       	mov	r18, r19
 a2e:	34 2f       	mov	r19, r20
 a30:	44 27       	eor	r20, r20
 a32:	58 5f       	subi	r21, 0xF8	; 248
 a34:	f3 cf       	rjmp	.-26     	; 0xa1c <__addsf3x+0x34>
 a36:	46 95       	lsr	r20
 a38:	37 95       	ror	r19
 a3a:	27 95       	ror	r18
 a3c:	a7 95       	ror	r26
 a3e:	f0 40       	sbci	r31, 0x00	; 0
 a40:	53 95       	inc	r21
 a42:	c9 f7       	brne	.-14     	; 0xa36 <__addsf3x+0x4e>
 a44:	7e f4       	brtc	.+30     	; 0xa64 <__addsf3x+0x7c>
 a46:	1f 16       	cp	r1, r31
 a48:	ba 0b       	sbc	r27, r26
 a4a:	62 0b       	sbc	r22, r18
 a4c:	73 0b       	sbc	r23, r19
 a4e:	84 0b       	sbc	r24, r20
 a50:	ba f0       	brmi	.+46     	; 0xa80 <__addsf3x+0x98>
 a52:	91 50       	subi	r25, 0x01	; 1
 a54:	a1 f0       	breq	.+40     	; 0xa7e <__addsf3x+0x96>
 a56:	ff 0f       	add	r31, r31
 a58:	bb 1f       	adc	r27, r27
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	c2 f7       	brpl	.-16     	; 0xa52 <__addsf3x+0x6a>
 a62:	0e c0       	rjmp	.+28     	; 0xa80 <__addsf3x+0x98>
 a64:	ba 0f       	add	r27, r26
 a66:	62 1f       	adc	r22, r18
 a68:	73 1f       	adc	r23, r19
 a6a:	84 1f       	adc	r24, r20
 a6c:	48 f4       	brcc	.+18     	; 0xa80 <__addsf3x+0x98>
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b7 95       	ror	r27
 a76:	f7 95       	ror	r31
 a78:	9e 3f       	cpi	r25, 0xFE	; 254
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0x96>
 a7c:	b3 cf       	rjmp	.-154    	; 0x9e4 <__addsf3+0x1e>
 a7e:	93 95       	inc	r25
 a80:	88 0f       	add	r24, r24
 a82:	08 f0       	brcs	.+2      	; 0xa86 <__addsf3x+0x9e>
 a84:	99 27       	eor	r25, r25
 a86:	ee 0f       	add	r30, r30
 a88:	97 95       	ror	r25
 a8a:	87 95       	ror	r24
 a8c:	08 95       	ret

00000a8e <__cmpsf2>:
 a8e:	d4 d0       	rcall	.+424    	; 0xc38 <__fp_cmp>
 a90:	08 f4       	brcc	.+2      	; 0xa94 <__cmpsf2+0x6>
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	08 95       	ret

00000a96 <__divsf3>:
 a96:	0c d0       	rcall	.+24     	; 0xab0 <__divsf3x>
 a98:	0a c1       	rjmp	.+532    	; 0xcae <__fp_round>
 a9a:	02 d1       	rcall	.+516    	; 0xca0 <__fp_pscB>
 a9c:	40 f0       	brcs	.+16     	; 0xaae <__divsf3+0x18>
 a9e:	f9 d0       	rcall	.+498    	; 0xc92 <__fp_pscA>
 aa0:	30 f0       	brcs	.+12     	; 0xaae <__divsf3+0x18>
 aa2:	21 f4       	brne	.+8      	; 0xaac <__divsf3+0x16>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	19 f0       	breq	.+6      	; 0xaae <__divsf3+0x18>
 aa8:	eb c0       	rjmp	.+470    	; 0xc80 <__fp_inf>
 aaa:	51 11       	cpse	r21, r1
 aac:	34 c1       	rjmp	.+616    	; 0xd16 <__fp_szero>
 aae:	ee c0       	rjmp	.+476    	; 0xc8c <__fp_nan>

00000ab0 <__divsf3x>:
 ab0:	0f d1       	rcall	.+542    	; 0xcd0 <__fp_split3>
 ab2:	98 f3       	brcs	.-26     	; 0xa9a <__divsf3+0x4>

00000ab4 <__divsf3_pse>:
 ab4:	99 23       	and	r25, r25
 ab6:	c9 f3       	breq	.-14     	; 0xaaa <__divsf3+0x14>
 ab8:	55 23       	and	r21, r21
 aba:	b1 f3       	breq	.-20     	; 0xaa8 <__divsf3+0x12>
 abc:	95 1b       	sub	r25, r21
 abe:	55 0b       	sbc	r21, r21
 ac0:	bb 27       	eor	r27, r27
 ac2:	aa 27       	eor	r26, r26
 ac4:	62 17       	cp	r22, r18
 ac6:	73 07       	cpc	r23, r19
 ac8:	84 07       	cpc	r24, r20
 aca:	38 f0       	brcs	.+14     	; 0xada <__divsf3_pse+0x26>
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	5f 4f       	sbci	r21, 0xFF	; 255
 ad0:	22 0f       	add	r18, r18
 ad2:	33 1f       	adc	r19, r19
 ad4:	44 1f       	adc	r20, r20
 ad6:	aa 1f       	adc	r26, r26
 ad8:	a9 f3       	breq	.-22     	; 0xac4 <__divsf3_pse+0x10>
 ada:	33 d0       	rcall	.+102    	; 0xb42 <__divsf3_pse+0x8e>
 adc:	0e 2e       	mov	r0, r30
 ade:	3a f0       	brmi	.+14     	; 0xaee <__divsf3_pse+0x3a>
 ae0:	e0 e8       	ldi	r30, 0x80	; 128
 ae2:	30 d0       	rcall	.+96     	; 0xb44 <__divsf3_pse+0x90>
 ae4:	91 50       	subi	r25, 0x01	; 1
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	e6 95       	lsr	r30
 aea:	00 1c       	adc	r0, r0
 aec:	ca f7       	brpl	.-14     	; 0xae0 <__divsf3_pse+0x2c>
 aee:	29 d0       	rcall	.+82     	; 0xb42 <__divsf3_pse+0x8e>
 af0:	fe 2f       	mov	r31, r30
 af2:	27 d0       	rcall	.+78     	; 0xb42 <__divsf3_pse+0x8e>
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	bb 1f       	adc	r27, r27
 afc:	26 17       	cp	r18, r22
 afe:	37 07       	cpc	r19, r23
 b00:	48 07       	cpc	r20, r24
 b02:	ab 07       	cpc	r26, r27
 b04:	b0 e8       	ldi	r27, 0x80	; 128
 b06:	09 f0       	breq	.+2      	; 0xb0a <__divsf3_pse+0x56>
 b08:	bb 0b       	sbc	r27, r27
 b0a:	80 2d       	mov	r24, r0
 b0c:	bf 01       	movw	r22, r30
 b0e:	ff 27       	eor	r31, r31
 b10:	93 58       	subi	r25, 0x83	; 131
 b12:	5f 4f       	sbci	r21, 0xFF	; 255
 b14:	2a f0       	brmi	.+10     	; 0xb20 <__divsf3_pse+0x6c>
 b16:	9e 3f       	cpi	r25, 0xFE	; 254
 b18:	51 05       	cpc	r21, r1
 b1a:	68 f0       	brcs	.+26     	; 0xb36 <__divsf3_pse+0x82>
 b1c:	b1 c0       	rjmp	.+354    	; 0xc80 <__fp_inf>
 b1e:	fb c0       	rjmp	.+502    	; 0xd16 <__fp_szero>
 b20:	5f 3f       	cpi	r21, 0xFF	; 255
 b22:	ec f3       	brlt	.-6      	; 0xb1e <__divsf3_pse+0x6a>
 b24:	98 3e       	cpi	r25, 0xE8	; 232
 b26:	dc f3       	brlt	.-10     	; 0xb1e <__divsf3_pse+0x6a>
 b28:	86 95       	lsr	r24
 b2a:	77 95       	ror	r23
 b2c:	67 95       	ror	r22
 b2e:	b7 95       	ror	r27
 b30:	f7 95       	ror	r31
 b32:	9f 5f       	subi	r25, 0xFF	; 255
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__divsf3_pse+0x74>
 b36:	88 0f       	add	r24, r24
 b38:	91 1d       	adc	r25, r1
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	97 f9       	bld	r25, 7
 b40:	08 95       	ret
 b42:	e1 e0       	ldi	r30, 0x01	; 1
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	bb 1f       	adc	r27, r27
 b4c:	62 17       	cp	r22, r18
 b4e:	73 07       	cpc	r23, r19
 b50:	84 07       	cpc	r24, r20
 b52:	ba 07       	cpc	r27, r26
 b54:	20 f0       	brcs	.+8      	; 0xb5e <__divsf3_pse+0xaa>
 b56:	62 1b       	sub	r22, r18
 b58:	73 0b       	sbc	r23, r19
 b5a:	84 0b       	sbc	r24, r20
 b5c:	ba 0b       	sbc	r27, r26
 b5e:	ee 1f       	adc	r30, r30
 b60:	88 f7       	brcc	.-30     	; 0xb44 <__divsf3_pse+0x90>
 b62:	e0 95       	com	r30
 b64:	08 95       	ret

00000b66 <__fixunssfsi>:
 b66:	bc d0       	rcall	.+376    	; 0xce0 <__fp_splitA>
 b68:	88 f0       	brcs	.+34     	; 0xb8c <__fixunssfsi+0x26>
 b6a:	9f 57       	subi	r25, 0x7F	; 127
 b6c:	90 f0       	brcs	.+36     	; 0xb92 <__fixunssfsi+0x2c>
 b6e:	b9 2f       	mov	r27, r25
 b70:	99 27       	eor	r25, r25
 b72:	b7 51       	subi	r27, 0x17	; 23
 b74:	a0 f0       	brcs	.+40     	; 0xb9e <__fixunssfsi+0x38>
 b76:	d1 f0       	breq	.+52     	; 0xbac <__fixunssfsi+0x46>
 b78:	66 0f       	add	r22, r22
 b7a:	77 1f       	adc	r23, r23
 b7c:	88 1f       	adc	r24, r24
 b7e:	99 1f       	adc	r25, r25
 b80:	1a f0       	brmi	.+6      	; 0xb88 <__fixunssfsi+0x22>
 b82:	ba 95       	dec	r27
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__fixunssfsi+0x12>
 b86:	12 c0       	rjmp	.+36     	; 0xbac <__fixunssfsi+0x46>
 b88:	b1 30       	cpi	r27, 0x01	; 1
 b8a:	81 f0       	breq	.+32     	; 0xbac <__fixunssfsi+0x46>
 b8c:	c3 d0       	rcall	.+390    	; 0xd14 <__fp_zero>
 b8e:	b1 e0       	ldi	r27, 0x01	; 1
 b90:	08 95       	ret
 b92:	c0 c0       	rjmp	.+384    	; 0xd14 <__fp_zero>
 b94:	67 2f       	mov	r22, r23
 b96:	78 2f       	mov	r23, r24
 b98:	88 27       	eor	r24, r24
 b9a:	b8 5f       	subi	r27, 0xF8	; 248
 b9c:	39 f0       	breq	.+14     	; 0xbac <__fixunssfsi+0x46>
 b9e:	b9 3f       	cpi	r27, 0xF9	; 249
 ba0:	cc f3       	brlt	.-14     	; 0xb94 <__fixunssfsi+0x2e>
 ba2:	86 95       	lsr	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b3 95       	inc	r27
 baa:	d9 f7       	brne	.-10     	; 0xba2 <__fixunssfsi+0x3c>
 bac:	3e f4       	brtc	.+14     	; 0xbbc <__fixunssfsi+0x56>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	08 95       	ret

00000bbe <__floatunsisf>:
 bbe:	e8 94       	clt
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__floatsisf+0x12>

00000bc2 <__floatsisf>:
 bc2:	97 fb       	bst	r25, 7
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__floatsisf+0x12>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	99 23       	and	r25, r25
 bd6:	a9 f0       	breq	.+42     	; 0xc02 <__floatsisf+0x40>
 bd8:	f9 2f       	mov	r31, r25
 bda:	96 e9       	ldi	r25, 0x96	; 150
 bdc:	bb 27       	eor	r27, r27
 bde:	93 95       	inc	r25
 be0:	f6 95       	lsr	r31
 be2:	87 95       	ror	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	b7 95       	ror	r27
 bea:	f1 11       	cpse	r31, r1
 bec:	f8 cf       	rjmp	.-16     	; 0xbde <__floatsisf+0x1c>
 bee:	fa f4       	brpl	.+62     	; 0xc2e <__floatsisf+0x6c>
 bf0:	bb 0f       	add	r27, r27
 bf2:	11 f4       	brne	.+4      	; 0xbf8 <__floatsisf+0x36>
 bf4:	60 ff       	sbrs	r22, 0
 bf6:	1b c0       	rjmp	.+54     	; 0xc2e <__floatsisf+0x6c>
 bf8:	6f 5f       	subi	r22, 0xFF	; 255
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	16 c0       	rjmp	.+44     	; 0xc2e <__floatsisf+0x6c>
 c02:	88 23       	and	r24, r24
 c04:	11 f0       	breq	.+4      	; 0xc0a <__floatsisf+0x48>
 c06:	96 e9       	ldi	r25, 0x96	; 150
 c08:	11 c0       	rjmp	.+34     	; 0xc2c <__floatsisf+0x6a>
 c0a:	77 23       	and	r23, r23
 c0c:	21 f0       	breq	.+8      	; 0xc16 <__floatsisf+0x54>
 c0e:	9e e8       	ldi	r25, 0x8E	; 142
 c10:	87 2f       	mov	r24, r23
 c12:	76 2f       	mov	r23, r22
 c14:	05 c0       	rjmp	.+10     	; 0xc20 <__floatsisf+0x5e>
 c16:	66 23       	and	r22, r22
 c18:	71 f0       	breq	.+28     	; 0xc36 <__floatsisf+0x74>
 c1a:	96 e8       	ldi	r25, 0x86	; 134
 c1c:	86 2f       	mov	r24, r22
 c1e:	70 e0       	ldi	r23, 0x00	; 0
 c20:	60 e0       	ldi	r22, 0x00	; 0
 c22:	2a f0       	brmi	.+10     	; 0xc2e <__floatsisf+0x6c>
 c24:	9a 95       	dec	r25
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	da f7       	brpl	.-10     	; 0xc24 <__floatsisf+0x62>
 c2e:	88 0f       	add	r24, r24
 c30:	96 95       	lsr	r25
 c32:	87 95       	ror	r24
 c34:	97 f9       	bld	r25, 7
 c36:	08 95       	ret

00000c38 <__fp_cmp>:
 c38:	99 0f       	add	r25, r25
 c3a:	00 08       	sbc	r0, r0
 c3c:	55 0f       	add	r21, r21
 c3e:	aa 0b       	sbc	r26, r26
 c40:	e0 e8       	ldi	r30, 0x80	; 128
 c42:	fe ef       	ldi	r31, 0xFE	; 254
 c44:	16 16       	cp	r1, r22
 c46:	17 06       	cpc	r1, r23
 c48:	e8 07       	cpc	r30, r24
 c4a:	f9 07       	cpc	r31, r25
 c4c:	c0 f0       	brcs	.+48     	; 0xc7e <__fp_cmp+0x46>
 c4e:	12 16       	cp	r1, r18
 c50:	13 06       	cpc	r1, r19
 c52:	e4 07       	cpc	r30, r20
 c54:	f5 07       	cpc	r31, r21
 c56:	98 f0       	brcs	.+38     	; 0xc7e <__fp_cmp+0x46>
 c58:	62 1b       	sub	r22, r18
 c5a:	73 0b       	sbc	r23, r19
 c5c:	84 0b       	sbc	r24, r20
 c5e:	95 0b       	sbc	r25, r21
 c60:	39 f4       	brne	.+14     	; 0xc70 <__fp_cmp+0x38>
 c62:	0a 26       	eor	r0, r26
 c64:	61 f0       	breq	.+24     	; 0xc7e <__fp_cmp+0x46>
 c66:	23 2b       	or	r18, r19
 c68:	24 2b       	or	r18, r20
 c6a:	25 2b       	or	r18, r21
 c6c:	21 f4       	brne	.+8      	; 0xc76 <__fp_cmp+0x3e>
 c6e:	08 95       	ret
 c70:	0a 26       	eor	r0, r26
 c72:	09 f4       	brne	.+2      	; 0xc76 <__fp_cmp+0x3e>
 c74:	a1 40       	sbci	r26, 0x01	; 1
 c76:	a6 95       	lsr	r26
 c78:	8f ef       	ldi	r24, 0xFF	; 255
 c7a:	81 1d       	adc	r24, r1
 c7c:	81 1d       	adc	r24, r1
 c7e:	08 95       	ret

00000c80 <__fp_inf>:
 c80:	97 f9       	bld	r25, 7
 c82:	9f 67       	ori	r25, 0x7F	; 127
 c84:	80 e8       	ldi	r24, 0x80	; 128
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	08 95       	ret

00000c8c <__fp_nan>:
 c8c:	9f ef       	ldi	r25, 0xFF	; 255
 c8e:	80 ec       	ldi	r24, 0xC0	; 192
 c90:	08 95       	ret

00000c92 <__fp_pscA>:
 c92:	00 24       	eor	r0, r0
 c94:	0a 94       	dec	r0
 c96:	16 16       	cp	r1, r22
 c98:	17 06       	cpc	r1, r23
 c9a:	18 06       	cpc	r1, r24
 c9c:	09 06       	cpc	r0, r25
 c9e:	08 95       	ret

00000ca0 <__fp_pscB>:
 ca0:	00 24       	eor	r0, r0
 ca2:	0a 94       	dec	r0
 ca4:	12 16       	cp	r1, r18
 ca6:	13 06       	cpc	r1, r19
 ca8:	14 06       	cpc	r1, r20
 caa:	05 06       	cpc	r0, r21
 cac:	08 95       	ret

00000cae <__fp_round>:
 cae:	09 2e       	mov	r0, r25
 cb0:	03 94       	inc	r0
 cb2:	00 0c       	add	r0, r0
 cb4:	11 f4       	brne	.+4      	; 0xcba <__fp_round+0xc>
 cb6:	88 23       	and	r24, r24
 cb8:	52 f0       	brmi	.+20     	; 0xcce <__fp_round+0x20>
 cba:	bb 0f       	add	r27, r27
 cbc:	40 f4       	brcc	.+16     	; 0xcce <__fp_round+0x20>
 cbe:	bf 2b       	or	r27, r31
 cc0:	11 f4       	brne	.+4      	; 0xcc6 <__fp_round+0x18>
 cc2:	60 ff       	sbrs	r22, 0
 cc4:	04 c0       	rjmp	.+8      	; 0xcce <__fp_round+0x20>
 cc6:	6f 5f       	subi	r22, 0xFF	; 255
 cc8:	7f 4f       	sbci	r23, 0xFF	; 255
 cca:	8f 4f       	sbci	r24, 0xFF	; 255
 ccc:	9f 4f       	sbci	r25, 0xFF	; 255
 cce:	08 95       	ret

00000cd0 <__fp_split3>:
 cd0:	57 fd       	sbrc	r21, 7
 cd2:	90 58       	subi	r25, 0x80	; 128
 cd4:	44 0f       	add	r20, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	59 f0       	breq	.+22     	; 0xcf0 <__fp_splitA+0x10>
 cda:	5f 3f       	cpi	r21, 0xFF	; 255
 cdc:	71 f0       	breq	.+28     	; 0xcfa <__fp_splitA+0x1a>
 cde:	47 95       	ror	r20

00000ce0 <__fp_splitA>:
 ce0:	88 0f       	add	r24, r24
 ce2:	97 fb       	bst	r25, 7
 ce4:	99 1f       	adc	r25, r25
 ce6:	61 f0       	breq	.+24     	; 0xd00 <__fp_splitA+0x20>
 ce8:	9f 3f       	cpi	r25, 0xFF	; 255
 cea:	79 f0       	breq	.+30     	; 0xd0a <__fp_splitA+0x2a>
 cec:	87 95       	ror	r24
 cee:	08 95       	ret
 cf0:	12 16       	cp	r1, r18
 cf2:	13 06       	cpc	r1, r19
 cf4:	14 06       	cpc	r1, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	f2 cf       	rjmp	.-28     	; 0xcde <__fp_split3+0xe>
 cfa:	46 95       	lsr	r20
 cfc:	f1 df       	rcall	.-30     	; 0xce0 <__fp_splitA>
 cfe:	08 c0       	rjmp	.+16     	; 0xd10 <__fp_splitA+0x30>
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	18 06       	cpc	r1, r24
 d06:	99 1f       	adc	r25, r25
 d08:	f1 cf       	rjmp	.-30     	; 0xcec <__fp_splitA+0xc>
 d0a:	86 95       	lsr	r24
 d0c:	71 05       	cpc	r23, r1
 d0e:	61 05       	cpc	r22, r1
 d10:	08 94       	sec
 d12:	08 95       	ret

00000d14 <__fp_zero>:
 d14:	e8 94       	clt

00000d16 <__fp_szero>:
 d16:	bb 27       	eor	r27, r27
 d18:	66 27       	eor	r22, r22
 d1a:	77 27       	eor	r23, r23
 d1c:	cb 01       	movw	r24, r22
 d1e:	97 f9       	bld	r25, 7
 d20:	08 95       	ret

00000d22 <__gesf2>:
 d22:	8a df       	rcall	.-236    	; 0xc38 <__fp_cmp>
 d24:	08 f4       	brcc	.+2      	; 0xd28 <__gesf2+0x6>
 d26:	8f ef       	ldi	r24, 0xFF	; 255
 d28:	08 95       	ret

00000d2a <__mulsf3>:
 d2a:	0b d0       	rcall	.+22     	; 0xd42 <__mulsf3x>
 d2c:	c0 cf       	rjmp	.-128    	; 0xcae <__fp_round>
 d2e:	b1 df       	rcall	.-158    	; 0xc92 <__fp_pscA>
 d30:	28 f0       	brcs	.+10     	; 0xd3c <__mulsf3+0x12>
 d32:	b6 df       	rcall	.-148    	; 0xca0 <__fp_pscB>
 d34:	18 f0       	brcs	.+6      	; 0xd3c <__mulsf3+0x12>
 d36:	95 23       	and	r25, r21
 d38:	09 f0       	breq	.+2      	; 0xd3c <__mulsf3+0x12>
 d3a:	a2 cf       	rjmp	.-188    	; 0xc80 <__fp_inf>
 d3c:	a7 cf       	rjmp	.-178    	; 0xc8c <__fp_nan>
 d3e:	11 24       	eor	r1, r1
 d40:	ea cf       	rjmp	.-44     	; 0xd16 <__fp_szero>

00000d42 <__mulsf3x>:
 d42:	c6 df       	rcall	.-116    	; 0xcd0 <__fp_split3>
 d44:	a0 f3       	brcs	.-24     	; 0xd2e <__mulsf3+0x4>

00000d46 <__mulsf3_pse>:
 d46:	95 9f       	mul	r25, r21
 d48:	d1 f3       	breq	.-12     	; 0xd3e <__mulsf3+0x14>
 d4a:	95 0f       	add	r25, r21
 d4c:	50 e0       	ldi	r21, 0x00	; 0
 d4e:	55 1f       	adc	r21, r21
 d50:	62 9f       	mul	r22, r18
 d52:	f0 01       	movw	r30, r0
 d54:	72 9f       	mul	r23, r18
 d56:	bb 27       	eor	r27, r27
 d58:	f0 0d       	add	r31, r0
 d5a:	b1 1d       	adc	r27, r1
 d5c:	63 9f       	mul	r22, r19
 d5e:	aa 27       	eor	r26, r26
 d60:	f0 0d       	add	r31, r0
 d62:	b1 1d       	adc	r27, r1
 d64:	aa 1f       	adc	r26, r26
 d66:	64 9f       	mul	r22, r20
 d68:	66 27       	eor	r22, r22
 d6a:	b0 0d       	add	r27, r0
 d6c:	a1 1d       	adc	r26, r1
 d6e:	66 1f       	adc	r22, r22
 d70:	82 9f       	mul	r24, r18
 d72:	22 27       	eor	r18, r18
 d74:	b0 0d       	add	r27, r0
 d76:	a1 1d       	adc	r26, r1
 d78:	62 1f       	adc	r22, r18
 d7a:	73 9f       	mul	r23, r19
 d7c:	b0 0d       	add	r27, r0
 d7e:	a1 1d       	adc	r26, r1
 d80:	62 1f       	adc	r22, r18
 d82:	83 9f       	mul	r24, r19
 d84:	a0 0d       	add	r26, r0
 d86:	61 1d       	adc	r22, r1
 d88:	22 1f       	adc	r18, r18
 d8a:	74 9f       	mul	r23, r20
 d8c:	33 27       	eor	r19, r19
 d8e:	a0 0d       	add	r26, r0
 d90:	61 1d       	adc	r22, r1
 d92:	23 1f       	adc	r18, r19
 d94:	84 9f       	mul	r24, r20
 d96:	60 0d       	add	r22, r0
 d98:	21 1d       	adc	r18, r1
 d9a:	82 2f       	mov	r24, r18
 d9c:	76 2f       	mov	r23, r22
 d9e:	6a 2f       	mov	r22, r26
 da0:	11 24       	eor	r1, r1
 da2:	9f 57       	subi	r25, 0x7F	; 127
 da4:	50 40       	sbci	r21, 0x00	; 0
 da6:	8a f0       	brmi	.+34     	; 0xdca <__mulsf3_pse+0x84>
 da8:	e1 f0       	breq	.+56     	; 0xde2 <__mulsf3_pse+0x9c>
 daa:	88 23       	and	r24, r24
 dac:	4a f0       	brmi	.+18     	; 0xdc0 <__mulsf3_pse+0x7a>
 dae:	ee 0f       	add	r30, r30
 db0:	ff 1f       	adc	r31, r31
 db2:	bb 1f       	adc	r27, r27
 db4:	66 1f       	adc	r22, r22
 db6:	77 1f       	adc	r23, r23
 db8:	88 1f       	adc	r24, r24
 dba:	91 50       	subi	r25, 0x01	; 1
 dbc:	50 40       	sbci	r21, 0x00	; 0
 dbe:	a9 f7       	brne	.-22     	; 0xdaa <__mulsf3_pse+0x64>
 dc0:	9e 3f       	cpi	r25, 0xFE	; 254
 dc2:	51 05       	cpc	r21, r1
 dc4:	70 f0       	brcs	.+28     	; 0xde2 <__mulsf3_pse+0x9c>
 dc6:	5c cf       	rjmp	.-328    	; 0xc80 <__fp_inf>
 dc8:	a6 cf       	rjmp	.-180    	; 0xd16 <__fp_szero>
 dca:	5f 3f       	cpi	r21, 0xFF	; 255
 dcc:	ec f3       	brlt	.-6      	; 0xdc8 <__mulsf3_pse+0x82>
 dce:	98 3e       	cpi	r25, 0xE8	; 232
 dd0:	dc f3       	brlt	.-10     	; 0xdc8 <__mulsf3_pse+0x82>
 dd2:	86 95       	lsr	r24
 dd4:	77 95       	ror	r23
 dd6:	67 95       	ror	r22
 dd8:	b7 95       	ror	r27
 dda:	f7 95       	ror	r31
 ddc:	e7 95       	ror	r30
 dde:	9f 5f       	subi	r25, 0xFF	; 255
 de0:	c1 f7       	brne	.-16     	; 0xdd2 <__mulsf3_pse+0x8c>
 de2:	fe 2b       	or	r31, r30
 de4:	88 0f       	add	r24, r24
 de6:	91 1d       	adc	r25, r1
 de8:	96 95       	lsr	r25
 dea:	87 95       	ror	r24
 dec:	97 f9       	bld	r25, 7
 dee:	08 95       	ret

00000df0 <__udivmodhi4>:
 df0:	aa 1b       	sub	r26, r26
 df2:	bb 1b       	sub	r27, r27
 df4:	51 e1       	ldi	r21, 0x11	; 17
 df6:	07 c0       	rjmp	.+14     	; 0xe06 <__udivmodhi4_ep>

00000df8 <__udivmodhi4_loop>:
 df8:	aa 1f       	adc	r26, r26
 dfa:	bb 1f       	adc	r27, r27
 dfc:	a6 17       	cp	r26, r22
 dfe:	b7 07       	cpc	r27, r23
 e00:	10 f0       	brcs	.+4      	; 0xe06 <__udivmodhi4_ep>
 e02:	a6 1b       	sub	r26, r22
 e04:	b7 0b       	sbc	r27, r23

00000e06 <__udivmodhi4_ep>:
 e06:	88 1f       	adc	r24, r24
 e08:	99 1f       	adc	r25, r25
 e0a:	5a 95       	dec	r21
 e0c:	a9 f7       	brne	.-22     	; 0xdf8 <__udivmodhi4_loop>
 e0e:	80 95       	com	r24
 e10:	90 95       	com	r25
 e12:	bc 01       	movw	r22, r24
 e14:	cd 01       	movw	r24, r26
 e16:	08 95       	ret

00000e18 <__divmodhi4>:
 e18:	97 fb       	bst	r25, 7
 e1a:	07 2e       	mov	r0, r23
 e1c:	16 f4       	brtc	.+4      	; 0xe22 <__divmodhi4+0xa>
 e1e:	00 94       	com	r0
 e20:	06 d0       	rcall	.+12     	; 0xe2e <__divmodhi4_neg1>
 e22:	77 fd       	sbrc	r23, 7
 e24:	08 d0       	rcall	.+16     	; 0xe36 <__divmodhi4_neg2>
 e26:	e4 df       	rcall	.-56     	; 0xdf0 <__udivmodhi4>
 e28:	07 fc       	sbrc	r0, 7
 e2a:	05 d0       	rcall	.+10     	; 0xe36 <__divmodhi4_neg2>
 e2c:	3e f4       	brtc	.+14     	; 0xe3c <__divmodhi4_exit>

00000e2e <__divmodhi4_neg1>:
 e2e:	90 95       	com	r25
 e30:	81 95       	neg	r24
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	08 95       	ret

00000e36 <__divmodhi4_neg2>:
 e36:	70 95       	com	r23
 e38:	61 95       	neg	r22
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e3c <__divmodhi4_exit>:
 e3c:	08 95       	ret

00000e3e <__umoddi3>:
 e3e:	68 94       	set
 e40:	01 c0       	rjmp	.+2      	; 0xe44 <__udivdi3_umoddi3>

00000e42 <__udivdi3>:
 e42:	e8 94       	clt

00000e44 <__udivdi3_umoddi3>:
 e44:	8f 92       	push	r8
 e46:	9f 92       	push	r9
 e48:	cf 93       	push	r28
 e4a:	df 93       	push	r29
 e4c:	05 d0       	rcall	.+10     	; 0xe58 <__udivmod64>
 e4e:	df 91       	pop	r29
 e50:	cf 91       	pop	r28
 e52:	9f 90       	pop	r9
 e54:	8f 90       	pop	r8
 e56:	08 95       	ret

00000e58 <__udivmod64>:
 e58:	88 24       	eor	r8, r8
 e5a:	99 24       	eor	r9, r9
 e5c:	f4 01       	movw	r30, r8
 e5e:	e4 01       	movw	r28, r8
 e60:	b0 e4       	ldi	r27, 0x40	; 64
 e62:	1b 2e       	mov	r1, r27
 e64:	d4 01       	movw	r26, r8
 e66:	9d 15       	cp	r25, r13
 e68:	8e 04       	cpc	r8, r14
 e6a:	9f 04       	cpc	r9, r15
 e6c:	e0 07       	cpc	r30, r16
 e6e:	f1 07       	cpc	r31, r17
 e70:	38 f4       	brcc	.+14     	; 0xe80 <__udivmod64+0x28>
 e72:	fc 01       	movw	r30, r24
 e74:	4b 01       	movw	r8, r22
 e76:	ca 01       	movw	r24, r20
 e78:	b9 01       	movw	r22, r18
 e7a:	ad 01       	movw	r20, r26
 e7c:	9e 01       	movw	r18, r28
 e7e:	16 94       	lsr	r1
 e80:	22 0f       	add	r18, r18
 e82:	33 1f       	adc	r19, r19
 e84:	44 1f       	adc	r20, r20
 e86:	55 1f       	adc	r21, r21
 e88:	66 1f       	adc	r22, r22
 e8a:	77 1f       	adc	r23, r23
 e8c:	88 1f       	adc	r24, r24
 e8e:	99 1f       	adc	r25, r25
 e90:	88 1c       	adc	r8, r8
 e92:	99 1c       	adc	r9, r9
 e94:	ee 1f       	adc	r30, r30
 e96:	ff 1f       	adc	r31, r31
 e98:	cc 1f       	adc	r28, r28
 e9a:	dd 1f       	adc	r29, r29
 e9c:	aa 1f       	adc	r26, r26
 e9e:	bb 1f       	adc	r27, r27
 ea0:	8a 14       	cp	r8, r10
 ea2:	9b 04       	cpc	r9, r11
 ea4:	ec 05       	cpc	r30, r12
 ea6:	fd 05       	cpc	r31, r13
 ea8:	ce 05       	cpc	r28, r14
 eaa:	df 05       	cpc	r29, r15
 eac:	a0 07       	cpc	r26, r16
 eae:	b1 07       	cpc	r27, r17
 eb0:	48 f0       	brcs	.+18     	; 0xec4 <__udivmod64+0x6c>
 eb2:	8a 18       	sub	r8, r10
 eb4:	9b 08       	sbc	r9, r11
 eb6:	ec 09       	sbc	r30, r12
 eb8:	fd 09       	sbc	r31, r13
 eba:	ce 09       	sbc	r28, r14
 ebc:	df 09       	sbc	r29, r15
 ebe:	a0 0b       	sbc	r26, r16
 ec0:	b1 0b       	sbc	r27, r17
 ec2:	21 60       	ori	r18, 0x01	; 1
 ec4:	1a 94       	dec	r1
 ec6:	e1 f6       	brne	.-72     	; 0xe80 <__udivmod64+0x28>
 ec8:	2e f4       	brtc	.+10     	; 0xed4 <__udivmod64+0x7c>
 eca:	94 01       	movw	r18, r8
 ecc:	af 01       	movw	r20, r30
 ece:	be 01       	movw	r22, r28
 ed0:	cd 01       	movw	r24, r26
 ed2:	00 0c       	add	r0, r0
 ed4:	08 95       	ret

00000ed6 <__ashrdi3>:
 ed6:	97 fb       	bst	r25, 7
 ed8:	10 f8       	bld	r1, 0

00000eda <__lshrdi3>:
 eda:	16 94       	lsr	r1
 edc:	00 08       	sbc	r0, r0
 ede:	0f 93       	push	r16
 ee0:	08 30       	cpi	r16, 0x08	; 8
 ee2:	98 f0       	brcs	.+38     	; 0xf0a <__lshrdi3+0x30>
 ee4:	08 50       	subi	r16, 0x08	; 8
 ee6:	23 2f       	mov	r18, r19
 ee8:	34 2f       	mov	r19, r20
 eea:	45 2f       	mov	r20, r21
 eec:	56 2f       	mov	r21, r22
 eee:	67 2f       	mov	r22, r23
 ef0:	78 2f       	mov	r23, r24
 ef2:	89 2f       	mov	r24, r25
 ef4:	90 2d       	mov	r25, r0
 ef6:	f4 cf       	rjmp	.-24     	; 0xee0 <__lshrdi3+0x6>
 ef8:	05 94       	asr	r0
 efa:	97 95       	ror	r25
 efc:	87 95       	ror	r24
 efe:	77 95       	ror	r23
 f00:	67 95       	ror	r22
 f02:	57 95       	ror	r21
 f04:	47 95       	ror	r20
 f06:	37 95       	ror	r19
 f08:	27 95       	ror	r18
 f0a:	0a 95       	dec	r16
 f0c:	aa f7       	brpl	.-22     	; 0xef8 <__lshrdi3+0x1e>
 f0e:	0f 91       	pop	r16
 f10:	08 95       	ret

00000f12 <__adddi3>:
 f12:	2a 0d       	add	r18, r10
 f14:	3b 1d       	adc	r19, r11
 f16:	4c 1d       	adc	r20, r12
 f18:	5d 1d       	adc	r21, r13
 f1a:	6e 1d       	adc	r22, r14
 f1c:	7f 1d       	adc	r23, r15
 f1e:	80 1f       	adc	r24, r16
 f20:	91 1f       	adc	r25, r17
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
