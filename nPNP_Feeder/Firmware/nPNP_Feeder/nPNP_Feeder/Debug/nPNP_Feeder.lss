
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000bf2  00000c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080012e  0080012e  00000cb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001102  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bcd  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab0  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000589  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000632  00000000  00000000  00003dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000043df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	af c0       	rjmp	.+350    	; 0x168 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	68 c1       	rjmp	.+720    	; 0x2e8 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	ce c2       	rjmp	.+1436   	; 0x5c2 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	fb c2       	rjmp	.+1526   	; 0x620 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ef       	ldi	r30, 0xF2	; 242
  48:	fb e0       	ldi	r31, 0x0B	; 11
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 32       	cpi	r26, 0x2E	; 46
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e2       	ldi	r26, 0x2E	; 46
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 33       	cpi	r26, 0x37	; 55
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	92 d0       	rcall	.+292    	; 0x18c <main>
  68:	c2 c5       	rjmp	.+2948   	; 0xbee <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 67       	ori	r24, 0x70	; 112
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	80 67       	ori	r24, 0x70	; 112
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <Error_Handler>:
}

void Error_Handler()
{
	cli();
  8a:	f8 94       	cli
	
	/*Wait until both buttons are pressed*/
	while(((PIND & (1 << BUTTON_A)) != (1 << BUTTON_A)) || ((PIND & (1 << BUTTON_B)) != (1 << BUTTON_B)))
  8c:	18 c0       	rjmp	.+48     	; 0xbe <Error_Handler+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	89 e6       	ldi	r24, 0x69	; 105
  92:	98 e1       	ldi	r25, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <Error_Handler+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <Error_Handler+0x14>
  9e:	00 00       	nop
	{
		_delay_ms(500);
		PORTD |= (1 << LED_R) | (1 << LED_B);
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	80 63       	ori	r24, 0x30	; 48
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <Error_Handler+0x22>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <Error_Handler+0x2c>
  b6:	00 00       	nop
		_delay_ms(500);
		PORTD &= ~(1 << LED_R) & ~(1 << LED_B);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 7c       	andi	r24, 0xCF	; 207
  bc:	8b b9       	out	0x0b, r24	; 11
void Error_Handler()
{
	cli();
	
	/*Wait until both buttons are pressed*/
	while(((PIND & (1 << BUTTON_A)) != (1 << BUTTON_A)) || ((PIND & (1 << BUTTON_B)) != (1 << BUTTON_B)))
  be:	4a 9b       	sbis	0x09, 2	; 9
  c0:	e6 cf       	rjmp	.-52     	; 0x8e <Error_Handler+0x4>
  c2:	4b 9b       	sbis	0x09, 3	; 9
  c4:	e4 cf       	rjmp	.-56     	; 0x8e <Error_Handler+0x4>
		PORTD |= (1 << LED_R) | (1 << LED_B);
		_delay_ms(500);
		PORTD &= ~(1 << LED_R) & ~(1 << LED_B);
	}
	
	PORTD |= (1 << LED_R) | (1 << LED_B); //Turn LED's off again
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	8b b9       	out	0x0b, r24	; 11
	sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <TWI_Init>:
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
	psData += TWI_Read_register(0x8E) << 8;
	RS485_Transmit_byte(psData); //Low PS byte
	RS485_Transmit_byte(psData >> 8); //High PS byte
}
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  d6:	08 95       	ret

000000d8 <TWI_Write_register>:
  d8:	94 ea       	ldi	r25, 0xA4	; 164
  da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  e2:	99 23       	and	r25, r25
  e4:	e4 f7       	brge	.-8      	; 0xde <TWI_Write_register+0x6>
  e6:	96 e4       	ldi	r25, 0x46	; 70
  e8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  ec:	94 e8       	ldi	r25, 0x84	; 132
  ee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  f6:	99 23       	and	r25, r25
  f8:	e4 f7       	brge	.-8      	; 0xf2 <TWI_Write_register+0x1a>
  fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 10c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 116:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 11a:	88 23       	and	r24, r24
 11c:	e4 f7       	brge	.-8      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 11e:	84 e9       	ldi	r24, 0x94	; 148
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 124:	08 95       	ret

00000126 <LTR559_Init>:
 126:	e8 e6       	ldi	r30, 0x68	; 104
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
 130:	ec e6       	ldi	r30, 0x6C	; 108
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24
 13a:	ca df       	rcall	.-108    	; 0xd0 <TWI_Init>
 13c:	65 e0       	ldi	r22, 0x05	; 5
 13e:	8f e8       	ldi	r24, 0x8F	; 143
 140:	cb df       	rcall	.-106    	; 0xd8 <TWI_Write_register>
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	81 e8       	ldi	r24, 0x81	; 129
 146:	c8 df       	rcall	.-112    	; 0xd8 <TWI_Write_register>
 148:	68 e0       	ldi	r22, 0x08	; 8
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	c5 df       	rcall	.-118    	; 0xd8 <TWI_Write_register>
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	80 e9       	ldi	r24, 0x90	; 144
 152:	c2 df       	rcall	.-124    	; 0xd8 <TWI_Write_register>
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e9       	ldi	r24, 0x91	; 145
 158:	bf df       	rcall	.-130    	; 0xd8 <TWI_Write_register>
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e9       	ldi	r24, 0x92	; 146
 15e:	bc df       	rcall	.-136    	; 0xd8 <TWI_Write_register>
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	83 e9       	ldi	r24, 0x93	; 147
 164:	b9 df       	rcall	.-142    	; 0xd8 <TWI_Write_register>
 166:	08 95       	ret

00000168 <__vector_4>:

ISR(PCINT1_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
	PORTD ^= (1 << LED_G); //Toggle led when rotary encoder makes threshold go above configured value
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	89 27       	eor	r24, r25
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
	Board_init();		
 18c:	6f df       	rcall	.-290    	; 0x6c <Board_init>
	Timer_init();
 18e:	2e d0       	rcall	.+92     	; 0x1ec <Timer_init>
	RS485_init();
 190:	e1 d1       	rcall	.+962    	; 0x554 <RS485_init>
	LTR559_Init();
 192:	c9 df       	rcall	.-110    	; 0x126 <LTR559_Init>
	
	sei(); //Enable interrupts
 194:	78 94       	sei
 196:	12 c0       	rjmp	.+36     	; 0x1bc <main+0x30>
    {
// 		TWI_Read_proximity(); //Used to test LTR559 by reading PS data and transmitting over RS485 to pc
// 		_delay_ms(1000);
		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
		{
			if(Servo_move(1, forward, slow) != SERVO_OK)
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	30 d0       	rcall	.+96     	; 0x206 <Servo_move>
 1a6:	81 11       	cpse	r24, r1
			{
				Error_Handler();
 1a8:	70 df       	rcall	.-288    	; 0x8a <Error_Handler>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	81 ee       	ldi	r24, 0xE1	; 225
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x24>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x2e>
 1ba:	00 00       	nop
	
    while (1) 
    {
// 		TWI_Read_proximity(); //Used to test LTR559 by reading PS data and transmitting over RS485 to pc
// 		_delay_ms(1000);
		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 1bc:	4a 9b       	sbis	0x09, 2	; 9
 1be:	13 c0       	rjmp	.+38     	; 0x1e6 <main+0x5a>
 1c0:	eb cf       	rjmp	.-42     	; 0x198 <main+0xc>
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
		{
			if(Servo_move(1, reverse, slow) != SERVO_OK)
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	1b d0       	rcall	.+54     	; 0x206 <Servo_move>
 1d0:	81 11       	cpse	r24, r1
			{
				Error_Handler();
 1d2:	5b df       	rcall	.-330    	; 0x8a <Error_Handler>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	81 ee       	ldi	r24, 0xE1	; 225
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x4e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x58>
 1e4:	00 00       	nop
				Error_Handler();
			}
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 1e6:	4b 99       	sbic	0x09, 3	; 9
 1e8:	ec cf       	rjmp	.-40     	; 0x1c2 <main+0x36>
 1ea:	e8 cf       	rjmp	.-48     	; 0x1bc <main+0x30>

000001ec <Timer_init>:
volatile servo myServo; //volatile since status variable used in ISR also used outside ISR

void Timer_init()
{
	/*Configure timer1*/
	TCCR1B = (1 << WGM12) | (1 << CS10); //CTC, no prescaling
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	OCR1A = 1600; //16000000/1600 = 10Khz ISR
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	96 e0       	ldi	r25, 0x06	; 6
 1f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	TIMSK1 = (1 << OCIE1A); //Enable the compare match interrupt
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7ff06f>
 204:	08 95       	ret

00000206 <Servo_move>:
}

servoStatus Servo_move(int steps, int direction, int speed)
{
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	e2 97       	sbiw	r28, 0x32	; 50
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	cli();
 226:	f8 94       	cli
	myServo.direction = direction;
 228:	e0 e3       	ldi	r30, 0x30	; 48
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	73 83       	std	Z+3, r23	; 0x03
 22e:	62 83       	std	Z+2, r22	; 0x02
	myServo.speed = speed;
 230:	55 83       	std	Z+5, r21	; 0x05
 232:	44 83       	std	Z+4, r20	; 0x04
	myServo.steps = steps + 1;
 234:	9c 01       	movw	r18, r24
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	31 83       	std	Z+1, r19	; 0x01
 23c:	20 83       	st	Z, r18
	myServo.status = true;
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	26 83       	std	Z+6, r18	; 0x06
	count = 0; //Reset count to 0 to make sure timer starts with new pulse
 242:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 246:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	sei();
 24a:	78 94       	sei
	
	uint32_t tempCounter = 0;
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
	while(myServo.status == true)
 252:	1f c0       	rjmp	.+62     	; 0x292 <Servo_move+0x8c>
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	39 ef       	ldi	r19, 0xF9	; 249
 258:	e0 e0       	ldi	r30, 0x00	; 0
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	30 40       	sbci	r19, 0x00	; 0
 25e:	e0 40       	sbci	r30, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <Servo_move+0x54>
 262:	00 c0       	rjmp	.+0      	; 0x264 <Servo_move+0x5e>
 264:	00 00       	nop
	{
		_delay_ms(20); //One pulse should take 20ms
		if(tempCounter > steps + 10)
 266:	8c 01       	movw	r16, r24
 268:	06 5f       	subi	r16, 0xF6	; 246
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	01 2e       	mov	r0, r17
 26e:	00 0c       	add	r0, r0
 270:	22 0b       	sbc	r18, r18
 272:	33 0b       	sbc	r19, r19
 274:	0c 15       	cp	r16, r12
 276:	1d 05       	cpc	r17, r13
 278:	2e 05       	cpc	r18, r14
 27a:	3f 05       	cpc	r19, r15
 27c:	28 f4       	brcc	.+10     	; 0x288 <Servo_move+0x82>
		{
			RS485_Transmit_string("SERVO_TIMEOUT"); //Transmit error message
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	82 d1       	rcall	.+772    	; 0x588 <RS485_Transmit_string>
			return SERVO_TIMEOUT; //If servo has been moving 200ms more than expected return timeout
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	21 c0       	rjmp	.+66     	; 0x2ca <Servo_move+0xc4>
		}
		tempCounter++;
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	c2 1a       	sub	r12, r18
 28c:	d2 0a       	sbc	r13, r18
 28e:	e2 0a       	sbc	r14, r18
 290:	f2 0a       	sbc	r15, r18
	myServo.status = true;
	count = 0; //Reset count to 0 to make sure timer starts with new pulse
	sei();
	
	uint32_t tempCounter = 0;
	while(myServo.status == true)
 292:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <myServo+0x6>
 296:	21 11       	cpse	r18, r1
 298:	dd cf       	rjmp	.-70     	; 0x254 <Servo_move+0x4e>
		}
		tempCounter++;
	}
	
	char str[50]; //Allocate data for string
	sprintf(str, "SERVO_OK: %d STEPS - %d - %d\n\r", steps, direction, speed);
 29a:	5f 93       	push	r21
 29c:	4f 93       	push	r20
 29e:	7f 93       	push	r23
 2a0:	6f 93       	push	r22
 2a2:	9f 93       	push	r25
 2a4:	8f 93       	push	r24
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	8e 01       	movw	r16, r28
 2b0:	0f 5f       	subi	r16, 0xFF	; 255
 2b2:	1f 4f       	sbci	r17, 0xFF	; 255
 2b4:	1f 93       	push	r17
 2b6:	0f 93       	push	r16
 2b8:	c2 d1       	rcall	.+900    	; 0x63e <sprintf>
	RS485_Transmit_string(str);
 2ba:	c8 01       	movw	r24, r16
 2bc:	65 d1       	rcall	.+714    	; 0x588 <RS485_Transmit_string>
	
	return SERVO_OK; //If status flag has been updated within timeout margin return OK status
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	80 e0       	ldi	r24, 0x00	; 0
}
 2ca:	e2 96       	adiw	r28, 0x32	; 50
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	08 95       	ret

000002e8 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	/*One ISR tick is 0.1ms*/
	count++;
 2fa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 2fe:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 308:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	
	if(myServo.steps > 0)
 30c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <myServo>
 310:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <myServo+0x1>
 314:	18 16       	cp	r1, r24
 316:	19 06       	cpc	r1, r25
 318:	0c f0       	brlt	.+2      	; 0x31c <__stack+0x1d>
 31a:	05 c1       	rjmp	.+522    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	{
		PORTD &= ~(1 << LED_R); //Red LED on
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	8f 7e       	andi	r24, 0xEF	; 239
 320:	8b b9       	out	0x0b, r24	; 11
		switch (myServo.speed)
 322:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <myServo+0x4>
 326:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <myServo+0x5>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	91 05       	cpc	r25, r1
 32e:	09 f4       	brne	.+2      	; 0x332 <__stack+0x33>
 330:	59 c0       	rjmp	.+178    	; 0x3e4 <__stack+0xe5>
 332:	83 30       	cpi	r24, 0x03	; 3
 334:	91 05       	cpc	r25, r1
 336:	09 f4       	brne	.+2      	; 0x33a <__stack+0x3b>
 338:	a7 c0       	rjmp	.+334    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <__stack+0x41>
 33e:	f3 c0       	rjmp	.+486    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		{
			case slow:
			if(myServo.direction == forward)
 340:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <myServo+0x2>
 344:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <myServo+0x3>
 348:	89 2b       	or	r24, r25
 34a:	31 f5       	brne	.+76     	; 0x398 <__stack+0x99>
			{
				if(count == 0 || count == 14) //--13--___187___
 34c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 350:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 354:	89 2b       	or	r24, r25
 356:	31 f0       	breq	.+12     	; 0x364 <__stack+0x65>
 358:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 35c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 360:	0e 97       	sbiw	r24, 0x0e	; 14
 362:	21 f4       	brne	.+8      	; 0x36c <__stack+0x6d>
				{
					PORTB ^= (1 << PB1); //toggle pin
 364:	95 b1       	in	r25, 0x05	; 5
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	89 27       	eor	r24, r25
 36a:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 36c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 370:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 374:	88 3c       	cpi	r24, 0xC8	; 200
 376:	91 05       	cpc	r25, r1
 378:	09 f0       	breq	.+2      	; 0x37c <__stack+0x7d>
 37a:	d5 c0       	rjmp	.+426    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 37c:	e0 e3       	ldi	r30, 0x30	; 48
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	91 83       	std	Z+1, r25	; 0x01
 388:	80 83       	st	Z, r24
					count = -1; //restart counting
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 392:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 396:	c7 c0       	rjmp	.+398    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				}
			}
			else
			{
				if(count == 0 || count == 16) //--17--___183___
 398:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 39c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 3a0:	89 2b       	or	r24, r25
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <__stack+0xb1>
 3a4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 3a8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 3ac:	40 97       	sbiw	r24, 0x10	; 16
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <__stack+0xb9>
				{
					PORTB ^= (1 << PB1); //toggle pin
 3b0:	95 b1       	in	r25, 0x05	; 5
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	89 27       	eor	r24, r25
 3b6:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 3b8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 3bc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 3c0:	88 3c       	cpi	r24, 0xC8	; 200
 3c2:	91 05       	cpc	r25, r1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__stack+0xc9>
 3c6:	af c0       	rjmp	.+350    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 3c8:	e0 e3       	ldi	r30, 0x30	; 48
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	91 83       	std	Z+1, r25	; 0x01
 3d4:	80 83       	st	Z, r24
					count = -1; //restart counting
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	9f ef       	ldi	r25, 0xFF	; 255
 3da:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 3de:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 3e2:	a1 c0       	rjmp	.+322    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				}
			}
			break;
			case medium:
			if(myServo.direction == forward)
 3e4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <myServo+0x2>
 3e8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <myServo+0x3>
 3ec:	89 2b       	or	r24, r25
 3ee:	31 f5       	brne	.+76     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{
				if(count == 0 || count == 12) //--11--___189___
 3f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 3f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 3f8:	89 2b       	or	r24, r25
 3fa:	31 f0       	breq	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 400:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 404:	0c 97       	sbiw	r24, 0x0c	; 12
 406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				{
					PORTB ^= (1 << PB1); //toggle pin
 408:	95 b1       	in	r25, 0x05	; 5
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	89 27       	eor	r24, r25
 40e:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 410:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 414:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 418:	88 3c       	cpi	r24, 0xC8	; 200
 41a:	91 05       	cpc	r25, r1
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	83 c0       	rjmp	.+262    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 420:	e0 e3       	ldi	r30, 0x30	; 48
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	80 81       	ld	r24, Z
 426:	91 81       	ldd	r25, Z+1	; 0x01
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	91 83       	std	Z+1, r25	; 0x01
 42c:	80 83       	st	Z, r24
					count = -1; //restart counting
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	9f ef       	ldi	r25, 0xFF	; 255
 432:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 436:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 43a:	75 c0       	rjmp	.+234    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				}
			}
			else
			{
				if(count == 0 || count == 18) //--18--___182___
 43c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 440:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 444:	89 2b       	or	r24, r25
 446:	31 f0       	breq	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 448:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 44c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 450:	42 97       	sbiw	r24, 0x12	; 18
 452:	21 f4       	brne	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				{
					PORTB ^= (1 << PB1); //toggle pin
 454:	95 b1       	in	r25, 0x05	; 5
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	89 27       	eor	r24, r25
 45a:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 45c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 460:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 464:	88 3c       	cpi	r24, 0xC8	; 200
 466:	91 05       	cpc	r25, r1
 468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	5d c0       	rjmp	.+186    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 46c:	e0 e3       	ldi	r30, 0x30	; 48
 46e:	f1 e0       	ldi	r31, 0x01	; 1
 470:	80 81       	ld	r24, Z
 472:	91 81       	ldd	r25, Z+1	; 0x01
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	91 83       	std	Z+1, r25	; 0x01
 478:	80 83       	st	Z, r24
					count = -1; //restart counting
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	9f ef       	ldi	r25, 0xFF	; 255
 47e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 482:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 486:	4f c0       	rjmp	.+158    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				}
			}
			break;
			case fast:
			if(myServo.direction == forward)
 488:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <myServo+0x2>
 48c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <myServo+0x3>
 490:	89 2b       	or	r24, r25
 492:	29 f5       	brne	.+74     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			{
				if(count == 0 || count == 5) //--9--___191___
 494:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 498:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 49c:	89 2b       	or	r24, r25
 49e:	31 f0       	breq	.+12     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 4a4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 4a8:	05 97       	sbiw	r24, 0x05	; 5
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
				{
					PORTB ^= (1 << PB1); //toggle pin
 4ac:	95 b1       	in	r25, 0x05	; 5
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	89 27       	eor	r24, r25
 4b2:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 4b4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 4b8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 4bc:	88 3c       	cpi	r24, 0xC8	; 200
 4be:	91 05       	cpc	r25, r1
 4c0:	91 f5       	brne	.+100    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 4c2:	e0 e3       	ldi	r30, 0x30	; 48
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	80 83       	st	Z, r24
					count = -1; //restart counting
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	9f ef       	ldi	r25, 0xFF	; 255
 4d4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 4d8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 4dc:	24 c0       	rjmp	.+72     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				}
			}
			else
			{
				if(count == 0 || count == 25) //--20--___180___
 4de:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 4e2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 4e6:	89 2b       	or	r24, r25
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4ea:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 4ee:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 4f2:	49 97       	sbiw	r24, 0x19	; 25
 4f4:	21 f4       	brne	.+8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
				{
					PORTB ^= (1 << PB1); //toggle pin
 4f6:	95 b1       	in	r25, 0x05	; 5
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	89 27       	eor	r24, r25
 4fc:	85 b9       	out	0x05, r24	; 5
				}
				if(count == 200)
 4fe:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 502:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 506:	88 3c       	cpi	r24, 0xC8	; 200
 508:	91 05       	cpc	r25, r1
 50a:	69 f4       	brne	.+26     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				{
					myServo.steps--; //reduce one of the steps left to take
 50c:	e0 e3       	ldi	r30, 0x30	; 48
 50e:	f1 e0       	ldi	r31, 0x01	; 1
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	91 83       	std	Z+1, r25	; 0x01
 518:	80 83       	st	Z, r24
					count = -1; //restart counting
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 522:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
				}
			}
			break;
		}
	}
	if(myServo.steps == 0)
 526:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <myServo>
 52a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <myServo+0x1>
 52e:	89 2b       	or	r24, r25
 530:	41 f4       	brne	.+16     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	{
		PORTD |= (1 << LED_R); //Red LED off
 532:	8b b1       	in	r24, 0x0b	; 11
 534:	80 61       	ori	r24, 0x10	; 16
 536:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB1); //Servo pin high
 538:	85 b1       	in	r24, 0x05	; 5
 53a:	82 60       	ori	r24, 0x02	; 2
 53c:	85 b9       	out	0x05, r24	; 5
		myServo.status = false;
 53e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <myServo+0x6>
	}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <RS485_init>:
#include <string.h>

void RS485_init()
{
	//Set baud rate
	UBRR0L = UBRRVAL; //low byte
 554:	87 e6       	ldi	r24, 0x67	; 103
 556:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
	UBRR0H = (UBRRVAL >> 8); //high byte
 55a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
	
	/*8 data bits - no parity - 1 stop bit*/
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0); //UART receiver/transmitter enable and enable RX complete interrupt
 55e:	e1 ec       	ldi	r30, 0xC1	; 193
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	88 6d       	ori	r24, 0xD8	; 216
 566:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //8 Bit
 568:	e2 ec       	ldi	r30, 0xC2	; 194
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	86 60       	ori	r24, 0x06	; 6
 570:	80 83       	st	Z, r24
 572:	08 95       	ret

00000574 <RS485_Transmit_byte>:
}

void RS485_Transmit_byte(uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0))); //Wait until there is no more data in UDR0
 574:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7ff0c0>
 578:	95 ff       	sbrs	r25, 5
 57a:	fc cf       	rjmp	.-8      	; 0x574 <RS485_Transmit_byte>
	PORTB |= (1 << RS485_DE); //Enable RS485 transmitting
 57c:	95 b1       	in	r25, 0x05	; 5
 57e:	94 60       	ori	r25, 0x04	; 4
 580:	95 b9       	out	0x05, r25	; 5
	UDR0 = data; //Transmit data
 582:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 586:	08 95       	ret

00000588 <RS485_Transmit_string>:
}

void RS485_Transmit_string(char *string)
{
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	8c 01       	movw	r16, r24
	int charCounter = 0;
 592:	c0 e0       	ldi	r28, 0x00	; 0
 594:	d0 e0       	ldi	r29, 0x00	; 0
	while(charCounter < strlen(string))
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <RS485_Transmit_string+0x1c>
	{
		RS485_Transmit_byte(*(string + charCounter));
 598:	f8 01       	movw	r30, r16
 59a:	ec 0f       	add	r30, r28
 59c:	fd 1f       	adc	r31, r29
 59e:	80 81       	ld	r24, Z
 5a0:	e9 df       	rcall	.-46     	; 0x574 <RS485_Transmit_byte>
		charCounter++;
 5a2:	21 96       	adiw	r28, 0x01	; 1
}

void RS485_Transmit_string(char *string)
{
	int charCounter = 0;
	while(charCounter < strlen(string))
 5a4:	f8 01       	movw	r30, r16
 5a6:	01 90       	ld	r0, Z+
 5a8:	00 20       	and	r0, r0
 5aa:	e9 f7       	brne	.-6      	; 0x5a6 <RS485_Transmit_string+0x1e>
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	e0 1b       	sub	r30, r16
 5b0:	f1 0b       	sbc	r31, r17
 5b2:	ce 17       	cp	r28, r30
 5b4:	df 07       	cpc	r29, r31
 5b6:	80 f3       	brcs	.-32     	; 0x598 <RS485_Transmit_string+0x10>
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <__vector_18>:

ISR(USART_RX_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	uint8_t data = UDR0; //Received data must be read to clear RXC flag
 5e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
	if (data == 'a')
 5e8:	81 36       	cpi	r24, 0x61	; 97
 5ea:	49 f4       	brne	.+18     	; 0x5fe <__vector_18+0x3c>
	{
		if(Servo_move(20, forward, slow) != SERVO_OK)
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	84 e1       	ldi	r24, 0x14	; 20
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	06 de       	rcall	.-1012   	; 0x206 <Servo_move>
 5fa:	81 11       	cpse	r24, r1
		{
			Error_Handler();
 5fc:	46 dd       	rcall	.-1396   	; 0x8a <Error_Handler>
		}
	}
}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__vector_20>:

ISR(USART_TX_vect)
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 62c:	85 b1       	in	r24, 0x05	; 5
 62e:	8b 7f       	andi	r24, 0xFB	; 251
 630:	85 b9       	out	0x05, r24	; 5
 632:	8f 91       	pop	r24
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <sprintf>:
 63e:	ae e0       	ldi	r26, 0x0E	; 14
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e4 e2       	ldi	r30, 0x24	; 36
 644:	f3 e0       	ldi	r31, 0x03	; 3
 646:	aa c2       	rjmp	.+1364   	; 0xb9c <__prologue_saves__+0x1c>
 648:	0d 89       	ldd	r16, Y+21	; 0x15
 64a:	1e 89       	ldd	r17, Y+22	; 0x16
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	8c 83       	std	Y+4, r24	; 0x04
 650:	1a 83       	std	Y+2, r17	; 0x02
 652:	09 83       	std	Y+1, r16	; 0x01
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	9f e7       	ldi	r25, 0x7F	; 127
 658:	9e 83       	std	Y+6, r25	; 0x06
 65a:	8d 83       	std	Y+5, r24	; 0x05
 65c:	ae 01       	movw	r20, r28
 65e:	47 5e       	subi	r20, 0xE7	; 231
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	6f 89       	ldd	r22, Y+23	; 0x17
 664:	78 8d       	ldd	r23, Y+24	; 0x18
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	08 d0       	rcall	.+16     	; 0x67c <vfprintf>
 66c:	ef 81       	ldd	r30, Y+7	; 0x07
 66e:	f8 85       	ldd	r31, Y+8	; 0x08
 670:	e0 0f       	add	r30, r16
 672:	f1 1f       	adc	r31, r17
 674:	10 82       	st	Z, r1
 676:	2e 96       	adiw	r28, 0x0e	; 14
 678:	e4 e0       	ldi	r30, 0x04	; 4
 67a:	ac c2       	rjmp	.+1368   	; 0xbd4 <__epilogue_restores__+0x1c>

0000067c <vfprintf>:
 67c:	ab e0       	ldi	r26, 0x0B	; 11
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	e3 e4       	ldi	r30, 0x43	; 67
 682:	f3 e0       	ldi	r31, 0x03	; 3
 684:	7d c2       	rjmp	.+1274   	; 0xb80 <__prologue_saves__>
 686:	6c 01       	movw	r12, r24
 688:	7b 01       	movw	r14, r22
 68a:	8a 01       	movw	r16, r20
 68c:	fc 01       	movw	r30, r24
 68e:	17 82       	std	Z+7, r1	; 0x07
 690:	16 82       	std	Z+6, r1	; 0x06
 692:	83 81       	ldd	r24, Z+3	; 0x03
 694:	81 ff       	sbrs	r24, 1
 696:	bf c1       	rjmp	.+894    	; 0xa16 <vfprintf+0x39a>
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	3c 01       	movw	r6, r24
 69e:	f6 01       	movw	r30, r12
 6a0:	93 81       	ldd	r25, Z+3	; 0x03
 6a2:	f7 01       	movw	r30, r14
 6a4:	93 fd       	sbrc	r25, 3
 6a6:	85 91       	lpm	r24, Z+
 6a8:	93 ff       	sbrs	r25, 3
 6aa:	81 91       	ld	r24, Z+
 6ac:	7f 01       	movw	r14, r30
 6ae:	88 23       	and	r24, r24
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <vfprintf+0x38>
 6b2:	ad c1       	rjmp	.+858    	; 0xa0e <vfprintf+0x392>
 6b4:	85 32       	cpi	r24, 0x25	; 37
 6b6:	39 f4       	brne	.+14     	; 0x6c6 <vfprintf+0x4a>
 6b8:	93 fd       	sbrc	r25, 3
 6ba:	85 91       	lpm	r24, Z+
 6bc:	93 ff       	sbrs	r25, 3
 6be:	81 91       	ld	r24, Z+
 6c0:	7f 01       	movw	r14, r30
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	21 f4       	brne	.+8      	; 0x6ce <vfprintf+0x52>
 6c6:	b6 01       	movw	r22, r12
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	c0 d1       	rcall	.+896    	; 0xa4c <fputc>
 6cc:	e8 cf       	rjmp	.-48     	; 0x69e <vfprintf+0x22>
 6ce:	91 2c       	mov	r9, r1
 6d0:	21 2c       	mov	r2, r1
 6d2:	31 2c       	mov	r3, r1
 6d4:	ff e1       	ldi	r31, 0x1F	; 31
 6d6:	f3 15       	cp	r31, r3
 6d8:	d8 f0       	brcs	.+54     	; 0x710 <vfprintf+0x94>
 6da:	8b 32       	cpi	r24, 0x2B	; 43
 6dc:	79 f0       	breq	.+30     	; 0x6fc <vfprintf+0x80>
 6de:	38 f4       	brcc	.+14     	; 0x6ee <vfprintf+0x72>
 6e0:	80 32       	cpi	r24, 0x20	; 32
 6e2:	79 f0       	breq	.+30     	; 0x702 <vfprintf+0x86>
 6e4:	83 32       	cpi	r24, 0x23	; 35
 6e6:	a1 f4       	brne	.+40     	; 0x710 <vfprintf+0x94>
 6e8:	23 2d       	mov	r18, r3
 6ea:	20 61       	ori	r18, 0x10	; 16
 6ec:	1d c0       	rjmp	.+58     	; 0x728 <vfprintf+0xac>
 6ee:	8d 32       	cpi	r24, 0x2D	; 45
 6f0:	61 f0       	breq	.+24     	; 0x70a <vfprintf+0x8e>
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	69 f4       	brne	.+26     	; 0x710 <vfprintf+0x94>
 6f6:	23 2d       	mov	r18, r3
 6f8:	21 60       	ori	r18, 0x01	; 1
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <vfprintf+0xac>
 6fc:	83 2d       	mov	r24, r3
 6fe:	82 60       	ori	r24, 0x02	; 2
 700:	38 2e       	mov	r3, r24
 702:	e3 2d       	mov	r30, r3
 704:	e4 60       	ori	r30, 0x04	; 4
 706:	3e 2e       	mov	r3, r30
 708:	2a c0       	rjmp	.+84     	; 0x75e <vfprintf+0xe2>
 70a:	f3 2d       	mov	r31, r3
 70c:	f8 60       	ori	r31, 0x08	; 8
 70e:	1d c0       	rjmp	.+58     	; 0x74a <vfprintf+0xce>
 710:	37 fc       	sbrc	r3, 7
 712:	2d c0       	rjmp	.+90     	; 0x76e <vfprintf+0xf2>
 714:	20 ed       	ldi	r18, 0xD0	; 208
 716:	28 0f       	add	r18, r24
 718:	2a 30       	cpi	r18, 0x0A	; 10
 71a:	40 f0       	brcs	.+16     	; 0x72c <vfprintf+0xb0>
 71c:	8e 32       	cpi	r24, 0x2E	; 46
 71e:	b9 f4       	brne	.+46     	; 0x74e <vfprintf+0xd2>
 720:	36 fc       	sbrc	r3, 6
 722:	75 c1       	rjmp	.+746    	; 0xa0e <vfprintf+0x392>
 724:	23 2d       	mov	r18, r3
 726:	20 64       	ori	r18, 0x40	; 64
 728:	32 2e       	mov	r3, r18
 72a:	19 c0       	rjmp	.+50     	; 0x75e <vfprintf+0xe2>
 72c:	36 fe       	sbrs	r3, 6
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0xc0>
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	98 9e       	mul	r9, r24
 734:	20 0d       	add	r18, r0
 736:	11 24       	eor	r1, r1
 738:	92 2e       	mov	r9, r18
 73a:	11 c0       	rjmp	.+34     	; 0x75e <vfprintf+0xe2>
 73c:	ea e0       	ldi	r30, 0x0A	; 10
 73e:	2e 9e       	mul	r2, r30
 740:	20 0d       	add	r18, r0
 742:	11 24       	eor	r1, r1
 744:	22 2e       	mov	r2, r18
 746:	f3 2d       	mov	r31, r3
 748:	f0 62       	ori	r31, 0x20	; 32
 74a:	3f 2e       	mov	r3, r31
 74c:	08 c0       	rjmp	.+16     	; 0x75e <vfprintf+0xe2>
 74e:	8c 36       	cpi	r24, 0x6C	; 108
 750:	21 f4       	brne	.+8      	; 0x75a <vfprintf+0xde>
 752:	83 2d       	mov	r24, r3
 754:	80 68       	ori	r24, 0x80	; 128
 756:	38 2e       	mov	r3, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0xe2>
 75a:	88 36       	cpi	r24, 0x68	; 104
 75c:	41 f4       	brne	.+16     	; 0x76e <vfprintf+0xf2>
 75e:	f7 01       	movw	r30, r14
 760:	93 fd       	sbrc	r25, 3
 762:	85 91       	lpm	r24, Z+
 764:	93 ff       	sbrs	r25, 3
 766:	81 91       	ld	r24, Z+
 768:	7f 01       	movw	r14, r30
 76a:	81 11       	cpse	r24, r1
 76c:	b3 cf       	rjmp	.-154    	; 0x6d4 <vfprintf+0x58>
 76e:	98 2f       	mov	r25, r24
 770:	9f 7d       	andi	r25, 0xDF	; 223
 772:	95 54       	subi	r25, 0x45	; 69
 774:	93 30       	cpi	r25, 0x03	; 3
 776:	28 f4       	brcc	.+10     	; 0x782 <vfprintf+0x106>
 778:	0c 5f       	subi	r16, 0xFC	; 252
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	9f e3       	ldi	r25, 0x3F	; 63
 77e:	99 83       	std	Y+1, r25	; 0x01
 780:	0d c0       	rjmp	.+26     	; 0x79c <vfprintf+0x120>
 782:	83 36       	cpi	r24, 0x63	; 99
 784:	31 f0       	breq	.+12     	; 0x792 <vfprintf+0x116>
 786:	83 37       	cpi	r24, 0x73	; 115
 788:	71 f0       	breq	.+28     	; 0x7a6 <vfprintf+0x12a>
 78a:	83 35       	cpi	r24, 0x53	; 83
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x114>
 78e:	55 c0       	rjmp	.+170    	; 0x83a <vfprintf+0x1be>
 790:	20 c0       	rjmp	.+64     	; 0x7d2 <vfprintf+0x156>
 792:	f8 01       	movw	r30, r16
 794:	80 81       	ld	r24, Z
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	0e 5f       	subi	r16, 0xFE	; 254
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	88 24       	eor	r8, r8
 79e:	83 94       	inc	r8
 7a0:	91 2c       	mov	r9, r1
 7a2:	53 01       	movw	r10, r6
 7a4:	12 c0       	rjmp	.+36     	; 0x7ca <vfprintf+0x14e>
 7a6:	28 01       	movw	r4, r16
 7a8:	f2 e0       	ldi	r31, 0x02	; 2
 7aa:	4f 0e       	add	r4, r31
 7ac:	51 1c       	adc	r5, r1
 7ae:	f8 01       	movw	r30, r16
 7b0:	a0 80       	ld	r10, Z
 7b2:	b1 80       	ldd	r11, Z+1	; 0x01
 7b4:	36 fe       	sbrs	r3, 6
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <vfprintf+0x142>
 7b8:	69 2d       	mov	r22, r9
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x146>
 7be:	6f ef       	ldi	r22, 0xFF	; 255
 7c0:	7f ef       	ldi	r23, 0xFF	; 255
 7c2:	c5 01       	movw	r24, r10
 7c4:	38 d1       	rcall	.+624    	; 0xa36 <strnlen>
 7c6:	4c 01       	movw	r8, r24
 7c8:	82 01       	movw	r16, r4
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 77       	andi	r31, 0x7F	; 127
 7ce:	3f 2e       	mov	r3, r31
 7d0:	15 c0       	rjmp	.+42     	; 0x7fc <vfprintf+0x180>
 7d2:	28 01       	movw	r4, r16
 7d4:	22 e0       	ldi	r18, 0x02	; 2
 7d6:	42 0e       	add	r4, r18
 7d8:	51 1c       	adc	r5, r1
 7da:	f8 01       	movw	r30, r16
 7dc:	a0 80       	ld	r10, Z
 7de:	b1 80       	ldd	r11, Z+1	; 0x01
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <vfprintf+0x16e>
 7e4:	69 2d       	mov	r22, r9
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x172>
 7ea:	6f ef       	ldi	r22, 0xFF	; 255
 7ec:	7f ef       	ldi	r23, 0xFF	; 255
 7ee:	c5 01       	movw	r24, r10
 7f0:	17 d1       	rcall	.+558    	; 0xa20 <strnlen_P>
 7f2:	4c 01       	movw	r8, r24
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f0 68       	ori	r31, 0x80	; 128
 7f8:	3f 2e       	mov	r3, r31
 7fa:	82 01       	movw	r16, r4
 7fc:	33 fc       	sbrc	r3, 3
 7fe:	19 c0       	rjmp	.+50     	; 0x832 <vfprintf+0x1b6>
 800:	82 2d       	mov	r24, r2
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	88 16       	cp	r8, r24
 806:	99 06       	cpc	r9, r25
 808:	a0 f4       	brcc	.+40     	; 0x832 <vfprintf+0x1b6>
 80a:	b6 01       	movw	r22, r12
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	1d d1       	rcall	.+570    	; 0xa4c <fputc>
 812:	2a 94       	dec	r2
 814:	f5 cf       	rjmp	.-22     	; 0x800 <vfprintf+0x184>
 816:	f5 01       	movw	r30, r10
 818:	37 fc       	sbrc	r3, 7
 81a:	85 91       	lpm	r24, Z+
 81c:	37 fe       	sbrs	r3, 7
 81e:	81 91       	ld	r24, Z+
 820:	5f 01       	movw	r10, r30
 822:	b6 01       	movw	r22, r12
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	12 d1       	rcall	.+548    	; 0xa4c <fputc>
 828:	21 10       	cpse	r2, r1
 82a:	2a 94       	dec	r2
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	82 1a       	sub	r8, r18
 830:	91 08       	sbc	r9, r1
 832:	81 14       	cp	r8, r1
 834:	91 04       	cpc	r9, r1
 836:	79 f7       	brne	.-34     	; 0x816 <vfprintf+0x19a>
 838:	e1 c0       	rjmp	.+450    	; 0x9fc <vfprintf+0x380>
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	11 f0       	breq	.+4      	; 0x842 <vfprintf+0x1c6>
 83e:	89 36       	cpi	r24, 0x69	; 105
 840:	39 f5       	brne	.+78     	; 0x890 <vfprintf+0x214>
 842:	f8 01       	movw	r30, r16
 844:	37 fe       	sbrs	r3, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <vfprintf+0x1da>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	08 c0       	rjmp	.+16     	; 0x866 <vfprintf+0x1ea>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	07 2e       	mov	r0, r23
 85c:	00 0c       	add	r0, r0
 85e:	88 0b       	sbc	r24, r24
 860:	99 0b       	sbc	r25, r25
 862:	0e 5f       	subi	r16, 0xFE	; 254
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	f3 2d       	mov	r31, r3
 868:	ff 76       	andi	r31, 0x6F	; 111
 86a:	3f 2e       	mov	r3, r31
 86c:	97 ff       	sbrs	r25, 7
 86e:	09 c0       	rjmp	.+18     	; 0x882 <vfprintf+0x206>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	f0 68       	ori	r31, 0x80	; 128
 880:	3f 2e       	mov	r3, r31
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	a3 01       	movw	r20, r6
 888:	1d d1       	rcall	.+570    	; 0xac4 <__ultoa_invert>
 88a:	88 2e       	mov	r8, r24
 88c:	86 18       	sub	r8, r6
 88e:	44 c0       	rjmp	.+136    	; 0x918 <vfprintf+0x29c>
 890:	85 37       	cpi	r24, 0x75	; 117
 892:	31 f4       	brne	.+12     	; 0x8a0 <vfprintf+0x224>
 894:	23 2d       	mov	r18, r3
 896:	2f 7e       	andi	r18, 0xEF	; 239
 898:	b2 2e       	mov	r11, r18
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	25 c0       	rjmp	.+74     	; 0x8ea <vfprintf+0x26e>
 8a0:	93 2d       	mov	r25, r3
 8a2:	99 7f       	andi	r25, 0xF9	; 249
 8a4:	b9 2e       	mov	r11, r25
 8a6:	8f 36       	cpi	r24, 0x6F	; 111
 8a8:	c1 f0       	breq	.+48     	; 0x8da <vfprintf+0x25e>
 8aa:	18 f4       	brcc	.+6      	; 0x8b2 <vfprintf+0x236>
 8ac:	88 35       	cpi	r24, 0x58	; 88
 8ae:	79 f0       	breq	.+30     	; 0x8ce <vfprintf+0x252>
 8b0:	ae c0       	rjmp	.+348    	; 0xa0e <vfprintf+0x392>
 8b2:	80 37       	cpi	r24, 0x70	; 112
 8b4:	19 f0       	breq	.+6      	; 0x8bc <vfprintf+0x240>
 8b6:	88 37       	cpi	r24, 0x78	; 120
 8b8:	21 f0       	breq	.+8      	; 0x8c2 <vfprintf+0x246>
 8ba:	a9 c0       	rjmp	.+338    	; 0xa0e <vfprintf+0x392>
 8bc:	e9 2f       	mov	r30, r25
 8be:	e0 61       	ori	r30, 0x10	; 16
 8c0:	be 2e       	mov	r11, r30
 8c2:	b4 fe       	sbrs	r11, 4
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x264>
 8c6:	fb 2d       	mov	r31, r11
 8c8:	f4 60       	ori	r31, 0x04	; 4
 8ca:	bf 2e       	mov	r11, r31
 8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <vfprintf+0x264>
 8ce:	34 fe       	sbrs	r3, 4
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <vfprintf+0x26a>
 8d2:	29 2f       	mov	r18, r25
 8d4:	26 60       	ori	r18, 0x06	; 6
 8d6:	b2 2e       	mov	r11, r18
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0x26a>
 8da:	28 e0       	ldi	r18, 0x08	; 8
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <vfprintf+0x26e>
 8e0:	20 e1       	ldi	r18, 0x10	; 16
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x26e>
 8e6:	20 e1       	ldi	r18, 0x10	; 16
 8e8:	32 e0       	ldi	r19, 0x02	; 2
 8ea:	f8 01       	movw	r30, r16
 8ec:	b7 fe       	sbrs	r11, 7
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <vfprintf+0x282>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	82 81       	ldd	r24, Z+2	; 0x02
 8f6:	93 81       	ldd	r25, Z+3	; 0x03
 8f8:	0c 5f       	subi	r16, 0xFC	; 252
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <vfprintf+0x28e>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 5f       	subi	r16, 0xFE	; 254
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	a3 01       	movw	r20, r6
 90c:	db d0       	rcall	.+438    	; 0xac4 <__ultoa_invert>
 90e:	88 2e       	mov	r8, r24
 910:	86 18       	sub	r8, r6
 912:	fb 2d       	mov	r31, r11
 914:	ff 77       	andi	r31, 0x7F	; 127
 916:	3f 2e       	mov	r3, r31
 918:	36 fe       	sbrs	r3, 6
 91a:	0d c0       	rjmp	.+26     	; 0x936 <vfprintf+0x2ba>
 91c:	23 2d       	mov	r18, r3
 91e:	2e 7f       	andi	r18, 0xFE	; 254
 920:	a2 2e       	mov	r10, r18
 922:	89 14       	cp	r8, r9
 924:	58 f4       	brcc	.+22     	; 0x93c <vfprintf+0x2c0>
 926:	34 fe       	sbrs	r3, 4
 928:	0b c0       	rjmp	.+22     	; 0x940 <vfprintf+0x2c4>
 92a:	32 fc       	sbrc	r3, 2
 92c:	09 c0       	rjmp	.+18     	; 0x940 <vfprintf+0x2c4>
 92e:	83 2d       	mov	r24, r3
 930:	8e 7e       	andi	r24, 0xEE	; 238
 932:	a8 2e       	mov	r10, r24
 934:	05 c0       	rjmp	.+10     	; 0x940 <vfprintf+0x2c4>
 936:	b8 2c       	mov	r11, r8
 938:	a3 2c       	mov	r10, r3
 93a:	03 c0       	rjmp	.+6      	; 0x942 <vfprintf+0x2c6>
 93c:	b8 2c       	mov	r11, r8
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x2c6>
 940:	b9 2c       	mov	r11, r9
 942:	a4 fe       	sbrs	r10, 4
 944:	0f c0       	rjmp	.+30     	; 0x964 <vfprintf+0x2e8>
 946:	fe 01       	movw	r30, r28
 948:	e8 0d       	add	r30, r8
 94a:	f1 1d       	adc	r31, r1
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	21 f4       	brne	.+8      	; 0x95a <vfprintf+0x2de>
 952:	9a 2d       	mov	r25, r10
 954:	99 7e       	andi	r25, 0xE9	; 233
 956:	a9 2e       	mov	r10, r25
 958:	09 c0       	rjmp	.+18     	; 0x96c <vfprintf+0x2f0>
 95a:	a2 fe       	sbrs	r10, 2
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0x2ee>
 95e:	b3 94       	inc	r11
 960:	b3 94       	inc	r11
 962:	04 c0       	rjmp	.+8      	; 0x96c <vfprintf+0x2f0>
 964:	8a 2d       	mov	r24, r10
 966:	86 78       	andi	r24, 0x86	; 134
 968:	09 f0       	breq	.+2      	; 0x96c <vfprintf+0x2f0>
 96a:	b3 94       	inc	r11
 96c:	a3 fc       	sbrc	r10, 3
 96e:	10 c0       	rjmp	.+32     	; 0x990 <vfprintf+0x314>
 970:	a0 fe       	sbrs	r10, 0
 972:	06 c0       	rjmp	.+12     	; 0x980 <vfprintf+0x304>
 974:	b2 14       	cp	r11, r2
 976:	80 f4       	brcc	.+32     	; 0x998 <vfprintf+0x31c>
 978:	28 0c       	add	r2, r8
 97a:	92 2c       	mov	r9, r2
 97c:	9b 18       	sub	r9, r11
 97e:	0d c0       	rjmp	.+26     	; 0x99a <vfprintf+0x31e>
 980:	b2 14       	cp	r11, r2
 982:	58 f4       	brcc	.+22     	; 0x99a <vfprintf+0x31e>
 984:	b6 01       	movw	r22, r12
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	60 d0       	rcall	.+192    	; 0xa4c <fputc>
 98c:	b3 94       	inc	r11
 98e:	f8 cf       	rjmp	.-16     	; 0x980 <vfprintf+0x304>
 990:	b2 14       	cp	r11, r2
 992:	18 f4       	brcc	.+6      	; 0x99a <vfprintf+0x31e>
 994:	2b 18       	sub	r2, r11
 996:	02 c0       	rjmp	.+4      	; 0x99c <vfprintf+0x320>
 998:	98 2c       	mov	r9, r8
 99a:	21 2c       	mov	r2, r1
 99c:	a4 fe       	sbrs	r10, 4
 99e:	0f c0       	rjmp	.+30     	; 0x9be <vfprintf+0x342>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	52 d0       	rcall	.+164    	; 0xa4c <fputc>
 9a8:	a2 fe       	sbrs	r10, 2
 9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <vfprintf+0x35c>
 9ac:	a1 fc       	sbrc	r10, 1
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <vfprintf+0x33a>
 9b0:	88 e7       	ldi	r24, 0x78	; 120
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <vfprintf+0x33e>
 9b6:	88 e5       	ldi	r24, 0x58	; 88
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b6 01       	movw	r22, r12
 9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <vfprintf+0x35a>
 9be:	8a 2d       	mov	r24, r10
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	51 f0       	breq	.+20     	; 0x9d8 <vfprintf+0x35c>
 9c4:	a1 fe       	sbrs	r10, 1
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <vfprintf+0x350>
 9c8:	8b e2       	ldi	r24, 0x2B	; 43
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <vfprintf+0x352>
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	a7 fc       	sbrc	r10, 7
 9d0:	8d e2       	ldi	r24, 0x2D	; 45
 9d2:	b6 01       	movw	r22, r12
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	3a d0       	rcall	.+116    	; 0xa4c <fputc>
 9d8:	89 14       	cp	r8, r9
 9da:	30 f4       	brcc	.+12     	; 0x9e8 <vfprintf+0x36c>
 9dc:	b6 01       	movw	r22, r12
 9de:	80 e3       	ldi	r24, 0x30	; 48
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	34 d0       	rcall	.+104    	; 0xa4c <fputc>
 9e4:	9a 94       	dec	r9
 9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <vfprintf+0x35c>
 9e8:	8a 94       	dec	r8
 9ea:	f3 01       	movw	r30, r6
 9ec:	e8 0d       	add	r30, r8
 9ee:	f1 1d       	adc	r31, r1
 9f0:	80 81       	ld	r24, Z
 9f2:	b6 01       	movw	r22, r12
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	2a d0       	rcall	.+84     	; 0xa4c <fputc>
 9f8:	81 10       	cpse	r8, r1
 9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <vfprintf+0x36c>
 9fc:	22 20       	and	r2, r2
 9fe:	09 f4       	brne	.+2      	; 0xa02 <vfprintf+0x386>
 a00:	4e ce       	rjmp	.-868    	; 0x69e <vfprintf+0x22>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	21 d0       	rcall	.+66     	; 0xa4c <fputc>
 a0a:	2a 94       	dec	r2
 a0c:	f7 cf       	rjmp	.-18     	; 0x9fc <vfprintf+0x380>
 a0e:	f6 01       	movw	r30, r12
 a10:	86 81       	ldd	r24, Z+6	; 0x06
 a12:	97 81       	ldd	r25, Z+7	; 0x07
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x39e>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	9f ef       	ldi	r25, 0xFF	; 255
 a1a:	2b 96       	adiw	r28, 0x0b	; 11
 a1c:	e2 e1       	ldi	r30, 0x12	; 18
 a1e:	cc c0       	rjmp	.+408    	; 0xbb8 <__epilogue_restores__>

00000a20 <strnlen_P>:
 a20:	fc 01       	movw	r30, r24
 a22:	05 90       	lpm	r0, Z+
 a24:	61 50       	subi	r22, 0x01	; 1
 a26:	70 40       	sbci	r23, 0x00	; 0
 a28:	01 10       	cpse	r0, r1
 a2a:	d8 f7       	brcc	.-10     	; 0xa22 <strnlen_P+0x2>
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	08 95       	ret

00000a36 <strnlen>:
 a36:	fc 01       	movw	r30, r24
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	70 40       	sbci	r23, 0x00	; 0
 a3c:	01 90       	ld	r0, Z+
 a3e:	01 10       	cpse	r0, r1
 a40:	d8 f7       	brcc	.-10     	; 0xa38 <strnlen+0x2>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	8e 0f       	add	r24, r30
 a48:	9f 1f       	adc	r25, r31
 a4a:	08 95       	ret

00000a4c <fputc>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	fb 01       	movw	r30, r22
 a56:	23 81       	ldd	r18, Z+3	; 0x03
 a58:	21 fd       	sbrc	r18, 1
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <fputc+0x16>
 a5c:	8f ef       	ldi	r24, 0xFF	; 255
 a5e:	9f ef       	ldi	r25, 0xFF	; 255
 a60:	2c c0       	rjmp	.+88     	; 0xaba <fputc+0x6e>
 a62:	22 ff       	sbrs	r18, 2
 a64:	16 c0       	rjmp	.+44     	; 0xa92 <fputc+0x46>
 a66:	46 81       	ldd	r20, Z+6	; 0x06
 a68:	57 81       	ldd	r21, Z+7	; 0x07
 a6a:	24 81       	ldd	r18, Z+4	; 0x04
 a6c:	35 81       	ldd	r19, Z+5	; 0x05
 a6e:	42 17       	cp	r20, r18
 a70:	53 07       	cpc	r21, r19
 a72:	44 f4       	brge	.+16     	; 0xa84 <fputc+0x38>
 a74:	a0 81       	ld	r26, Z
 a76:	b1 81       	ldd	r27, Z+1	; 0x01
 a78:	9d 01       	movw	r18, r26
 a7a:	2f 5f       	subi	r18, 0xFF	; 255
 a7c:	3f 4f       	sbci	r19, 0xFF	; 255
 a7e:	31 83       	std	Z+1, r19	; 0x01
 a80:	20 83       	st	Z, r18
 a82:	8c 93       	st	X, r24
 a84:	26 81       	ldd	r18, Z+6	; 0x06
 a86:	37 81       	ldd	r19, Z+7	; 0x07
 a88:	2f 5f       	subi	r18, 0xFF	; 255
 a8a:	3f 4f       	sbci	r19, 0xFF	; 255
 a8c:	37 83       	std	Z+7, r19	; 0x07
 a8e:	26 83       	std	Z+6, r18	; 0x06
 a90:	14 c0       	rjmp	.+40     	; 0xaba <fputc+0x6e>
 a92:	8b 01       	movw	r16, r22
 a94:	ec 01       	movw	r28, r24
 a96:	fb 01       	movw	r30, r22
 a98:	00 84       	ldd	r0, Z+8	; 0x08
 a9a:	f1 85       	ldd	r31, Z+9	; 0x09
 a9c:	e0 2d       	mov	r30, r0
 a9e:	09 95       	icall
 aa0:	89 2b       	or	r24, r25
 aa2:	e1 f6       	brne	.-72     	; 0xa5c <fputc+0x10>
 aa4:	d8 01       	movw	r26, r16
 aa6:	16 96       	adiw	r26, 0x06	; 6
 aa8:	8d 91       	ld	r24, X+
 aaa:	9c 91       	ld	r25, X
 aac:	17 97       	sbiw	r26, 0x07	; 7
 aae:	01 96       	adiw	r24, 0x01	; 1
 ab0:	17 96       	adiw	r26, 0x07	; 7
 ab2:	9c 93       	st	X, r25
 ab4:	8e 93       	st	-X, r24
 ab6:	16 97       	sbiw	r26, 0x06	; 6
 ab8:	ce 01       	movw	r24, r28
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	1f 91       	pop	r17
 ac0:	0f 91       	pop	r16
 ac2:	08 95       	ret

00000ac4 <__ultoa_invert>:
 ac4:	fa 01       	movw	r30, r20
 ac6:	aa 27       	eor	r26, r26
 ac8:	28 30       	cpi	r18, 0x08	; 8
 aca:	51 f1       	breq	.+84     	; 0xb20 <__ultoa_invert+0x5c>
 acc:	20 31       	cpi	r18, 0x10	; 16
 ace:	81 f1       	breq	.+96     	; 0xb30 <__ultoa_invert+0x6c>
 ad0:	e8 94       	clt
 ad2:	6f 93       	push	r22
 ad4:	6e 7f       	andi	r22, 0xFE	; 254
 ad6:	6e 5f       	subi	r22, 0xFE	; 254
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	af 4f       	sbci	r26, 0xFF	; 255
 ae0:	b1 e0       	ldi	r27, 0x01	; 1
 ae2:	3e d0       	rcall	.+124    	; 0xb60 <__ultoa_invert+0x9c>
 ae4:	b4 e0       	ldi	r27, 0x04	; 4
 ae6:	3c d0       	rcall	.+120    	; 0xb60 <__ultoa_invert+0x9c>
 ae8:	67 0f       	add	r22, r23
 aea:	78 1f       	adc	r23, r24
 aec:	89 1f       	adc	r24, r25
 aee:	9a 1f       	adc	r25, r26
 af0:	a1 1d       	adc	r26, r1
 af2:	68 0f       	add	r22, r24
 af4:	79 1f       	adc	r23, r25
 af6:	8a 1f       	adc	r24, r26
 af8:	91 1d       	adc	r25, r1
 afa:	a1 1d       	adc	r26, r1
 afc:	6a 0f       	add	r22, r26
 afe:	71 1d       	adc	r23, r1
 b00:	81 1d       	adc	r24, r1
 b02:	91 1d       	adc	r25, r1
 b04:	a1 1d       	adc	r26, r1
 b06:	20 d0       	rcall	.+64     	; 0xb48 <__ultoa_invert+0x84>
 b08:	09 f4       	brne	.+2      	; 0xb0c <__ultoa_invert+0x48>
 b0a:	68 94       	set
 b0c:	3f 91       	pop	r19
 b0e:	2a e0       	ldi	r18, 0x0A	; 10
 b10:	26 9f       	mul	r18, r22
 b12:	11 24       	eor	r1, r1
 b14:	30 19       	sub	r19, r0
 b16:	30 5d       	subi	r19, 0xD0	; 208
 b18:	31 93       	st	Z+, r19
 b1a:	de f6       	brtc	.-74     	; 0xad2 <__ultoa_invert+0xe>
 b1c:	cf 01       	movw	r24, r30
 b1e:	08 95       	ret
 b20:	46 2f       	mov	r20, r22
 b22:	47 70       	andi	r20, 0x07	; 7
 b24:	40 5d       	subi	r20, 0xD0	; 208
 b26:	41 93       	st	Z+, r20
 b28:	b3 e0       	ldi	r27, 0x03	; 3
 b2a:	0f d0       	rcall	.+30     	; 0xb4a <__ultoa_invert+0x86>
 b2c:	c9 f7       	brne	.-14     	; 0xb20 <__ultoa_invert+0x5c>
 b2e:	f6 cf       	rjmp	.-20     	; 0xb1c <__ultoa_invert+0x58>
 b30:	46 2f       	mov	r20, r22
 b32:	4f 70       	andi	r20, 0x0F	; 15
 b34:	40 5d       	subi	r20, 0xD0	; 208
 b36:	4a 33       	cpi	r20, 0x3A	; 58
 b38:	18 f0       	brcs	.+6      	; 0xb40 <__ultoa_invert+0x7c>
 b3a:	49 5d       	subi	r20, 0xD9	; 217
 b3c:	31 fd       	sbrc	r19, 1
 b3e:	40 52       	subi	r20, 0x20	; 32
 b40:	41 93       	st	Z+, r20
 b42:	02 d0       	rcall	.+4      	; 0xb48 <__ultoa_invert+0x84>
 b44:	a9 f7       	brne	.-22     	; 0xb30 <__ultoa_invert+0x6c>
 b46:	ea cf       	rjmp	.-44     	; 0xb1c <__ultoa_invert+0x58>
 b48:	b4 e0       	ldi	r27, 0x04	; 4
 b4a:	a6 95       	lsr	r26
 b4c:	97 95       	ror	r25
 b4e:	87 95       	ror	r24
 b50:	77 95       	ror	r23
 b52:	67 95       	ror	r22
 b54:	ba 95       	dec	r27
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__ultoa_invert+0x86>
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	61 05       	cpc	r22, r1
 b5c:	71 05       	cpc	r23, r1
 b5e:	08 95       	ret
 b60:	9b 01       	movw	r18, r22
 b62:	ac 01       	movw	r20, r24
 b64:	0a 2e       	mov	r0, r26
 b66:	06 94       	lsr	r0
 b68:	57 95       	ror	r21
 b6a:	47 95       	ror	r20
 b6c:	37 95       	ror	r19
 b6e:	27 95       	ror	r18
 b70:	ba 95       	dec	r27
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__ultoa_invert+0xa2>
 b74:	62 0f       	add	r22, r18
 b76:	73 1f       	adc	r23, r19
 b78:	84 1f       	adc	r24, r20
 b7a:	95 1f       	adc	r25, r21
 b7c:	a0 1d       	adc	r26, r0
 b7e:	08 95       	ret

00000b80 <__prologue_saves__>:
 b80:	2f 92       	push	r2
 b82:	3f 92       	push	r3
 b84:	4f 92       	push	r4
 b86:	5f 92       	push	r5
 b88:	6f 92       	push	r6
 b8a:	7f 92       	push	r7
 b8c:	8f 92       	push	r8
 b8e:	9f 92       	push	r9
 b90:	af 92       	push	r10
 b92:	bf 92       	push	r11
 b94:	cf 92       	push	r12
 b96:	df 92       	push	r13
 b98:	ef 92       	push	r14
 b9a:	ff 92       	push	r15
 b9c:	0f 93       	push	r16
 b9e:	1f 93       	push	r17
 ba0:	cf 93       	push	r28
 ba2:	df 93       	push	r29
 ba4:	cd b7       	in	r28, 0x3d	; 61
 ba6:	de b7       	in	r29, 0x3e	; 62
 ba8:	ca 1b       	sub	r28, r26
 baa:	db 0b       	sbc	r29, r27
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	f8 94       	cli
 bb0:	de bf       	out	0x3e, r29	; 62
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	cd bf       	out	0x3d, r28	; 61
 bb6:	09 94       	ijmp

00000bb8 <__epilogue_restores__>:
 bb8:	2a 88       	ldd	r2, Y+18	; 0x12
 bba:	39 88       	ldd	r3, Y+17	; 0x11
 bbc:	48 88       	ldd	r4, Y+16	; 0x10
 bbe:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc0:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc2:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc4:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc6:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc8:	aa 84       	ldd	r10, Y+10	; 0x0a
 bca:	b9 84       	ldd	r11, Y+9	; 0x09
 bcc:	c8 84       	ldd	r12, Y+8	; 0x08
 bce:	df 80       	ldd	r13, Y+7	; 0x07
 bd0:	ee 80       	ldd	r14, Y+6	; 0x06
 bd2:	fd 80       	ldd	r15, Y+5	; 0x05
 bd4:	0c 81       	ldd	r16, Y+4	; 0x04
 bd6:	1b 81       	ldd	r17, Y+3	; 0x03
 bd8:	aa 81       	ldd	r26, Y+2	; 0x02
 bda:	b9 81       	ldd	r27, Y+1	; 0x01
 bdc:	ce 0f       	add	r28, r30
 bde:	d1 1d       	adc	r29, r1
 be0:	0f b6       	in	r0, 0x3f	; 63
 be2:	f8 94       	cli
 be4:	de bf       	out	0x3e, r29	; 62
 be6:	0f be       	out	0x3f, r0	; 63
 be8:	cd bf       	out	0x3d, r28	; 61
 bea:	ed 01       	movw	r28, r26
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
