
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800110  00800110  00000e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000116a  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1b  00000000  00000000  00002156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5c  00000000  00000000  00002c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000036d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000703  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	d7 c0       	rjmp	.+430    	; 0x1b8 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	20 c4       	rjmp	.+2112   	; 0x866 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	2e c4       	rjmp	.+2140   	; 0x886 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ee       	ldi	r30, 0xE2	; 226
  48:	fd e0       	ldi	r31, 0x0D	; 13
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 31       	cpi	r26, 0x10	; 16
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e1       	ldi	r26, 0x10	; 16
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 32       	cpi	r26, 0x23	; 35
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	01 d1       	rcall	.+514    	; 0x26a <main>
  68:	ba c6       	rjmp	.+3444   	; 0xdde <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 67       	ori	r24, 0x70	; 112
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	80 67       	ori	r24, 0x70	; 112
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <TWI_Init>:
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}

void TWI_Init()
{
	TWBR = 12; //400kHz = (16MHz) / (16 + 2(12) * (1))
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  90:	08 95       	ret

00000092 <TWI_Read_register>:
}

uint8_t TWI_Read_register(uint8_t registerValue)
{
	/*set the start condition*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
  92:	94 ea       	ldi	r25, 0xA4	; 164
  94:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  98:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  9c:	99 23       	and	r25, r25
  9e:	e4 f7       	brge	.-8      	; 0x98 <TWI_Read_register+0x6>
			
	/*send the address*/
	TWDR = LTR_WRITE;
  a0:	96 e4       	ldi	r25, 0x46	; 70
  a2:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT); //trigger I2C action
  a6:	94 e8       	ldi	r25, 0x84	; 132
  a8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  ac:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  b0:	99 23       	and	r25, r25
  b2:	e4 f7       	brge	.-8      	; 0xac <TWI_Read_register+0x1a>
				
	/*specify the register*/
	TWDR = registerValue; //register value in the data register
  b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <TWI_Read_register+0x2c>
			
	/*switch master to read (receiver) mode and slave to transmitter*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA); //Set another start condition
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  d0:	88 23       	and	r24, r24
  d2:	e4 f7       	brge	.-8      	; 0xcc <TWI_Read_register+0x3a>
	
	TWDR = LTR_READ;
  d4:	87 e4       	ldi	r24, 0x47	; 71
  d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  e4:	88 23       	and	r24, r24
  e6:	e4 f7       	brge	.-8      	; 0xe0 <TWI_Read_register+0x4e>
			
	TWCR = (1 << TWEN) | (1 << TWINT);
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <TWI_Read_register+0x5c>
	
	/*The received byte is now in the TWDR data register*/
	uint8_t register_value = TWDR;
  f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
			
	/*set stop condition*/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  fa:	94 e9       	ldi	r25, 0x94	; 148
  fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>

	return register_value;
}
 100:	08 95       	ret

00000102 <TWI_Write_register>:

void TWI_Write_register(uint8_t reg, uint8_t data)
{
	/*set the start condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTA));
 102:	94 ea       	ldi	r25, 0xA4	; 164
 104:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 108:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 10c:	99 23       	and	r25, r25
 10e:	e4 f7       	brge	.-8      	; 0x108 <TWI_Write_register+0x6>
	
	/*send the address*/
	TWDR = LTR_WRITE;                       //Data to send - ie, address + write bit
 110:	96 e4       	ldi	r25, 0x46	; 70
 112:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 116:	94 e8       	ldi	r25, 0x84	; 132
 118:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 11c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 120:	99 23       	and	r25, r25
 122:	e4 f7       	brge	.-8      	; 0x11c <TWI_Write_register+0x1a>
	
	/*send the register address*/
	TWDR = reg;								//Register address
 124:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN )| (1 << TWINT));	//Trigger I2C action
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 12e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 132:	88 23       	and	r24, r24
 134:	e4 f7       	brge	.-8      	; 0x12e <TWI_Write_register+0x2c>
	
	/*send the data byte*/
	TWDR = data;							//Data byte
 136:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));	//Trigger I2C action
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 144:	88 23       	and	r24, r24
 146:	e4 f7       	brge	.-8      	; 0x140 <TWI_Write_register+0x3e>
	
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
 148:	84 e9       	ldi	r24, 0x94	; 148
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 14e:	08 95       	ret

00000150 <LTR559_Init>:
#include <math.h>

void LTR559_Init()
{
	/*Enable interrupt on PC2 - PCINT10*/
	PCICR |= (1 << PCIE1);
 150:	e8 e6       	ldi	r30, 0x68	; 104
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 15a:	ec e6       	ldi	r30, 0x6C	; 108
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	84 60       	ori	r24, 0x04	; 4
 162:	80 83       	st	Z, r24
	
	TWI_Init();
 164:	92 df       	rcall	.-220    	; 0x8a <TWI_Init>
	TWI_Write_register(LTR_INTERRUPT, 0x05); //INT active high - only PS trigger
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	8f e8       	ldi	r24, 0x8F	; 143
 16a:	cb df       	rcall	.-106    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_LED, 0b00011111); //60Khz LED pulse - DUTY 50% - LED 50mA
 16c:	6f e1       	ldi	r22, 0x1F	; 31
 16e:	82 e8       	ldi	r24, 0x82	; 130
 170:	c8 df       	rcall	.-112    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_CONTR, 0x03); //Active mode - saturation indicator off
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	c5 df       	rcall	.-118    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_MEAS_RATE, 0x08); //10ms measurement repeat rate
 178:	68 e0       	ldi	r22, 0x08	; 8
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	c2 df       	rcall	.-124    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_0, 150); //Upper interrupt threshold - 12 bit value
 17e:	66 e9       	ldi	r22, 0x96	; 150
 180:	80 e9       	ldi	r24, 0x90	; 144
 182:	bf df       	rcall	.-130    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_1, 0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	81 e9       	ldi	r24, 0x91	; 145
 188:	bc df       	rcall	.-136    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	82 e9       	ldi	r24, 0x92	; 146
 18e:	b9 df       	rcall	.-142    	; 0x102 <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_1, 0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	83 e9       	ldi	r24, 0x93	; 147
 194:	b6 df       	rcall	.-148    	; 0x102 <TWI_Write_register>
 196:	08 95       	ret

00000198 <TWI_Read_proximity>:
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
}

uint16_t TWI_Read_proximity()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
 19c:	8d e8       	ldi	r24, 0x8D	; 141
 19e:	79 df       	rcall	.-270    	; 0x92 <TWI_Read_register>
 1a0:	c8 2f       	mov	r28, r24
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
	psData += TWI_Read_register(0x8E) << 8;
 1a4:	8e e8       	ldi	r24, 0x8E	; 142
 1a6:	75 df       	rcall	.-278    	; 0x92 <TWI_Read_register>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	98 2f       	mov	r25, r24
 1ac:	88 27       	eor	r24, r24

	return psData;
}
 1ae:	8c 0f       	add	r24, r28
 1b0:	9d 1f       	adc	r25, r29
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <__vector_4>:

volatile int encoderCount = 0;
extern volatile float cDutyCycle;
extern volatile int selfEncodingStatus;
ISR(PCINT1_vect)
{	
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	if(selfEncodingStatus != 1)
 1da:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <selfEncodingStatus>
 1de:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <selfEncodingStatus+0x1>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	89 f1       	breq	.+98     	; 0x248 <__DATA_REGION_LENGTH__+0x48>
	{
		if(cDutyCycle >= 1.5f)
 1e6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 1ea:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 1ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 1f2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 ec       	ldi	r20, 0xC0	; 192
 1fc:	5f e3       	ldi	r21, 0x3F	; 63
 1fe:	01 d5       	rcall	.+2562   	; 0xc02 <__gesf2>
 200:	88 23       	and	r24, r24
 202:	54 f0       	brlt	.+20     	; 0x218 <__DATA_REGION_LENGTH__+0x18>
		encoderCount++;
 204:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 208:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 212:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 216:	18 c0       	rjmp	.+48     	; 0x248 <__DATA_REGION_LENGTH__+0x48>
		else if(cDutyCycle <= 1.5f)
 218:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cDutyCycle>
 21c:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cDutyCycle+0x1>
 220:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cDutyCycle+0x2>
 224:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cDutyCycle+0x3>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 ec       	ldi	r20, 0xC0	; 192
 22e:	5f e3       	ldi	r21, 0x3F	; 63
 230:	9e d3       	rcall	.+1852   	; 0x96e <__cmpsf2>
 232:	18 16       	cp	r1, r24
 234:	4c f0       	brlt	.+18     	; 0x248 <__DATA_REGION_LENGTH__+0x48>
		encoderCount--;
 236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 23a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 244:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <main>:
float dt = 0.01; //Sample period
float eIntergral = 0; //Integral counter
int setpoint = 0;

int main(void)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	c7 59       	subi	r28, 0x97	; 151
 274:	d1 40       	sbci	r29, 0x01	; 1
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
	Board_init();		
 280:	f5 de       	rcall	.-534    	; 0x6c <Board_init>
	Timer_init();
 282:	c5 d2       	rcall	.+1418   	; 0x80e <Timer_init>
	RS485_init();
 284:	d6 d2       	rcall	.+1452   	; 0x832 <RS485_init>
	LTR559_Init();
 286:	64 df       	rcall	.-312    	; 0x150 <LTR559_Init>
	
	sei(); //Enable interrupts
 288:	78 94       	sei
	
    while (1) 
	{	
		/***** PID Control *****/
		int e = setpoint - encoderCount; //Error
 28a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <setpoint>
 28e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <setpoint+0x1>
 292:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 296:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 29a:	a9 01       	movw	r20, r18
 29c:	48 1b       	sub	r20, r24
 29e:	59 0b       	sbc	r21, r25
 2a0:	cf 56       	subi	r28, 0x6F	; 111
 2a2:	de 4f       	sbci	r29, 0xFE	; 254
 2a4:	59 83       	std	Y+1, r21	; 0x01
 2a6:	48 83       	st	Y, r20
 2a8:	c1 59       	subi	r28, 0x91	; 145
 2aa:	d1 40       	sbci	r29, 0x01	; 1
		float Dedt = (e - ePrev) / dt; //Derivative
 2ac:	ba 01       	movw	r22, r20
 2ae:	55 0f       	add	r21, r21
 2b0:	88 0b       	sbc	r24, r24
 2b2:	99 0b       	sbc	r25, r25
 2b4:	f6 d3       	rcall	.+2028   	; 0xaa2 <__floatsisf>
 2b6:	6b 01       	movw	r12, r22
 2b8:	7c 01       	movw	r14, r24
 2ba:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <ePrev>
 2be:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <ePrev+0x1>
 2c2:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <ePrev+0x2>
 2c6:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <ePrev+0x3>
 2ca:	ec d2       	rcall	.+1496   	; 0x8a4 <__subsf3>
 2cc:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d8:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2dc:	a5 01       	movw	r20, r10
 2de:	94 01       	movw	r18, r8
 2e0:	4a d3       	rcall	.+1684   	; 0x976 <__divsf3>
 2e2:	cd 56       	subi	r28, 0x6D	; 109
 2e4:	de 4f       	sbci	r29, 0xFE	; 254
 2e6:	68 83       	st	Y, r22
 2e8:	79 83       	std	Y+1, r23	; 0x01
 2ea:	8a 83       	std	Y+2, r24	; 0x02
 2ec:	9b 83       	std	Y+3, r25	; 0x03
 2ee:	c3 59       	subi	r28, 0x93	; 147
 2f0:	d1 40       	sbci	r29, 0x01	; 1
		eIntergral += (e * dt); //Integral
 2f2:	a5 01       	movw	r20, r10
 2f4:	94 01       	movw	r18, r8
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	87 d4       	rcall	.+2318   	; 0xc0a <__mulsf3>
 2fc:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <eIntergral>
 300:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <eIntergral+0x1>
 304:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <eIntergral+0x2>
 308:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <eIntergral+0x3>
 30c:	cc d2       	rcall	.+1432   	; 0x8a6 <__addsf3>
 30e:	4b 01       	movw	r8, r22
 310:	5c 01       	movw	r10, r24
 312:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <eIntergral>
 316:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <eIntergral+0x1>
 31a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <eIntergral+0x2>
 31e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <eIntergral+0x3>
		
		float u = (kp * e) + (kd * Dedt) + (ki * eIntergral); //Control signal
 322:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <kp>
 326:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <kp+0x1>
 32a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <kp+0x2>
 32e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <kp+0x3>
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	69 d4       	rcall	.+2258   	; 0xc0a <__mulsf3>
 338:	2b 01       	movw	r4, r22
 33a:	3c 01       	movw	r6, r24
 33c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <kd>
 340:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <kd+0x1>
 344:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <kd+0x2>
 348:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <kd+0x3>
 34c:	cd 56       	subi	r28, 0x6D	; 109
 34e:	de 4f       	sbci	r29, 0xFE	; 254
 350:	68 81       	ld	r22, Y
 352:	79 81       	ldd	r23, Y+1	; 0x01
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	9b 81       	ldd	r25, Y+3	; 0x03
 358:	c3 59       	subi	r28, 0x93	; 147
 35a:	d1 40       	sbci	r29, 0x01	; 1
 35c:	56 d4       	rcall	.+2220   	; 0xc0a <__mulsf3>
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
 362:	c3 01       	movw	r24, r6
 364:	b2 01       	movw	r22, r4
 366:	9f d2       	rcall	.+1342   	; 0x8a6 <__addsf3>
 368:	2b 01       	movw	r4, r22
 36a:	3c 01       	movw	r6, r24
 36c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ki>
 370:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ki+0x1>
 374:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ki+0x2>
 378:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ki+0x3>
 37c:	c5 01       	movw	r24, r10
 37e:	b4 01       	movw	r22, r8
 380:	44 d4       	rcall	.+2184   	; 0xc0a <__mulsf3>
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	c3 01       	movw	r24, r6
 388:	b2 01       	movw	r22, r4
 38a:	8d d2       	rcall	.+1306   	; 0x8a6 <__addsf3>
 38c:	4b 01       	movw	r8, r22
 38e:	5c 01       	movw	r10, r24
		
		//Cap control signal maximum values
		if(u >= 100.0f)	u = 100.0f;
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	48 ec       	ldi	r20, 0xC8	; 200
 396:	52 e4       	ldi	r21, 0x42	; 66
 398:	34 d4       	rcall	.+2152   	; 0xc02 <__gesf2>
 39a:	88 23       	and	r24, r24
 39c:	44 f0       	brlt	.+16     	; 0x3ae <__stack+0xaf>
 39e:	0f 2e       	mov	r0, r31
 3a0:	81 2c       	mov	r8, r1
 3a2:	91 2c       	mov	r9, r1
 3a4:	f8 ec       	ldi	r31, 0xC8	; 200
 3a6:	af 2e       	mov	r10, r31
 3a8:	f2 e4       	ldi	r31, 0x42	; 66
 3aa:	bf 2e       	mov	r11, r31
 3ac:	f0 2d       	mov	r31, r0
		if(u <= -100.0f) u = -100.0f;
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	48 ec       	ldi	r20, 0xC8	; 200
 3b4:	52 ec       	ldi	r21, 0xC2	; 194
 3b6:	c5 01       	movw	r24, r10
 3b8:	b4 01       	movw	r22, r8
 3ba:	d9 d2       	rcall	.+1458   	; 0x96e <__cmpsf2>
 3bc:	18 16       	cp	r1, r24
 3be:	44 f0       	brlt	.+16     	; 0x3d0 <__stack+0xd1>
 3c0:	0f 2e       	mov	r0, r31
 3c2:	81 2c       	mov	r8, r1
 3c4:	91 2c       	mov	r9, r1
 3c6:	f8 ec       	ldi	r31, 0xC8	; 200
 3c8:	af 2e       	mov	r10, r31
 3ca:	f2 ec       	ldi	r31, 0xC2	; 194
 3cc:	bf 2e       	mov	r11, r31
 3ce:	f0 2d       	mov	r31, r0
		
		//Convert control signal to PWM
		float dutyCyle = 1.5f + (0.005f * u); //1.5 is stopped, +/-0.5 maps to full forwards and full backwards 
 3d0:	2a e0       	ldi	r18, 0x0A	; 10
 3d2:	37 ed       	ldi	r19, 0xD7	; 215
 3d4:	43 ea       	ldi	r20, 0xA3	; 163
 3d6:	5b e3       	ldi	r21, 0x3B	; 59
 3d8:	c5 01       	movw	r24, r10
 3da:	b4 01       	movw	r22, r8
 3dc:	16 d4       	rcall	.+2092   	; 0xc0a <__mulsf3>
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 ec       	ldi	r20, 0xC0	; 192
 3e4:	5f e3       	ldi	r21, 0x3F	; 63
 3e6:	5f d2       	rcall	.+1214   	; 0x8a6 <__addsf3>
		DUTY_CYCLE(dutyCyle);
 3e8:	ee d1       	rcall	.+988    	; 0x7c6 <DUTY_CYCLE>
	 		RS485_Transmit_byte((int16_t)encoderCount >> 8);
	 		RS485_Transmit_byte((int16_t)setpoint);
	 		RS485_Transmit_byte((int16_t)setpoint >> 8);	
		#endif //S_PID

		ePrev = e; //update previous error
 3ea:	c0 92 18 01 	sts	0x0118, r12	; 0x800118 <ePrev>
 3ee:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <ePrev+0x1>
 3f2:	e0 92 1a 01 	sts	0x011A, r14	; 0x80011a <ePrev+0x2>
 3f6:	f0 92 1b 01 	sts	0x011B, r15	; 0x80011b <ePrev+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	8f ed       	ldi	r24, 0xDF	; 223
 3fc:	9b ea       	ldi	r25, 0xAB	; 171
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <__stack+0xff>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
		_delay_ms(11); //11 ms since transmitting system response had influence on tuning
		
		/***** RS485/UART Data handling *****/
		switch(uartData)
 406:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <uartData>
 40a:	83 36       	cpi	r24, 0x63	; 99
 40c:	71 f1       	breq	.+92     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 40e:	86 36       	cpi	r24, 0x66	; 102
 410:	21 f0       	breq	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 412:	82 36       	cpi	r24, 0x62	; 98
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	af c1       	rjmp	.+862    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			case 'f':
				if(e == 0) setpoint += 4; //Move forward
 41a:	cf 56       	subi	r28, 0x6F	; 111
 41c:	de 4f       	sbci	r29, 0xFE	; 254
 41e:	a8 81       	ld	r26, Y
 420:	b9 81       	ldd	r27, Y+1	; 0x01
 422:	c1 59       	subi	r28, 0x91	; 145
 424:	d1 40       	sbci	r29, 0x01	; 1
 426:	ab 2b       	or	r26, r27
 428:	49 f4       	brne	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setpoint>
 42e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setpoint+0x1>
 432:	04 96       	adiw	r24, 0x04	; 4
 434:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setpoint+0x1>
 438:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setpoint>
				uartData = 0;
 43c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
				break;
 440:	9a c1       	rjmp	.+820    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
			case 'b':
				if(e == 0) setpoint -= 4; //Move backward
 442:	cf 56       	subi	r28, 0x6F	; 111
 444:	de 4f       	sbci	r29, 0xFE	; 254
 446:	e8 81       	ld	r30, Y
 448:	f9 81       	ldd	r31, Y+1	; 0x01
 44a:	c1 59       	subi	r28, 0x91	; 145
 44c:	d1 40       	sbci	r29, 0x01	; 1
 44e:	ef 2b       	or	r30, r31
 450:	49 f4       	brne	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 452:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setpoint>
 456:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setpoint+0x1>
 45a:	04 97       	sbiw	r24, 0x04	; 4
 45c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setpoint+0x1>
 460:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setpoint>
				uartData = 0;
 464:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
				break;
 468:	86 c1       	rjmp	.+780    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
			case 'c':
				{
					selfEncodingStatus = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <selfEncodingStatus+0x1>
 472:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <selfEncodingStatus>
					uint16_t sampleBuffer[100] = {0};
 476:	fe 01       	movw	r30, r28
 478:	31 96       	adiw	r30, 0x01	; 1
 47a:	88 ec       	ldi	r24, 0xC8	; 200
 47c:	df 01       	movw	r26, r30
 47e:	1d 92       	st	X+, r1
 480:	8a 95       	dec	r24
 482:	e9 f7       	brne	.-6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
 484:	e4 5d       	subi	r30, 0xD4	; 212
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	84 e6       	ldi	r24, 0x64	; 100
 48a:	df 01       	movw	r26, r30
 48c:	28 2f       	mov	r18, r24
 48e:	1d 92       	st	X+, r1
 490:	2a 95       	dec	r18
 492:	e9 f7       	brne	.-6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
 494:	e4 56       	subi	r30, 0x64	; 100
 496:	f1 09       	sbc	r31, r1
 498:	df 01       	movw	r26, r30
 49a:	1d 92       	st	X+, r1
 49c:	8a 95       	dec	r24
 49e:	e9 f7       	brne	.-6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 4a0:	a1 2c       	mov	r10, r1
 4a2:	b1 2c       	mov	r11, r1
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
 4a4:	91 2c       	mov	r9, r1
					selfEncodingStatus = 1;
					uint16_t sampleBuffer[100] = {0};
					
					/* Get peaks and valleys */
					uint16_t peaks[50] = {0};
					uint8_t peakCounter = 0;
 4a6:	81 2c       	mov	r8, r1
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 4a8:	a0 c0       	rjmp	.+320    	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
					{
						/* Get data */
						DUTY_CYCLE(1.6);
 4aa:	6d ec       	ldi	r22, 0xCD	; 205
 4ac:	7c ec       	ldi	r23, 0xCC	; 204
 4ae:	8c ec       	ldi	r24, 0xCC	; 204
 4b0:	9f e3       	ldi	r25, 0x3F	; 63
 4b2:	89 d1       	rcall	.+786    	; 0x7c6 <DUTY_CYCLE>
						for(int i = 1; i < 100; i++)
 4b4:	ee 24       	eor	r14, r14
 4b6:	e3 94       	inc	r14
 4b8:	f1 2c       	mov	r15, r1
 4ba:	25 c0       	rjmp	.+74     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
						{
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
 4bc:	f7 01       	movw	r30, r14
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	2c 0f       	add	r18, r28
 4ca:	3d 1f       	adc	r19, r29
 4cc:	e2 0f       	add	r30, r18
 4ce:	f3 1f       	adc	r31, r19
 4d0:	00 81       	ld	r16, Z
 4d2:	11 81       	ldd	r17, Z+1	; 0x01
 4d4:	61 de       	rcall	.-830    	; 0x198 <TWI_Read_proximity>
 4d6:	80 0f       	add	r24, r16
 4d8:	91 1f       	adc	r25, r17
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	f7 01       	movw	r30, r14
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	4c 0f       	add	r20, r28
 4ea:	5d 1f       	adc	r21, r29
 4ec:	e4 0f       	add	r30, r20
 4ee:	f5 1f       	adc	r31, r21
 4f0:	91 83       	std	Z+1, r25	; 0x01
 4f2:	80 83       	st	Z, r24
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	9c e9       	ldi	r25, 0x9C	; 156
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fe:	00 00       	nop
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
					{
						/* Get data */
						DUTY_CYCLE(1.6);
						for(int i = 1; i < 100; i++)
 500:	9f ef       	ldi	r25, 0xFF	; 255
 502:	e9 1a       	sub	r14, r25
 504:	f9 0a       	sbc	r15, r25
 506:	a4 e6       	ldi	r26, 0x64	; 100
 508:	ea 16       	cp	r14, r26
 50a:	f1 04       	cpc	r15, r1
 50c:	bc f2       	brlt	.-82     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
						{
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
							_delay_ms(10); //LTR559 sample rate
						}
						DUTY_CYCLE(1.5);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	80 ec       	ldi	r24, 0xC0	; 192
 514:	9f e3       	ldi	r25, 0x3F	; 63
 516:	57 d1       	rcall	.+686    	; 0x7c6 <DUTY_CYCLE>
										
						for(int i = 1; i < 100; i++)
 518:	01 e0       	ldi	r16, 0x01	; 1
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	5f c0       	rjmp	.+190    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
						{
							RS485_Transmit_byte(sampleBuffer[i-1]);
 51e:	f8 01       	movw	r30, r16
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	2c 0f       	add	r18, r28
 52c:	3d 1f       	adc	r19, r29
 52e:	e2 0f       	add	r30, r18
 530:	f3 1f       	adc	r31, r19
 532:	c0 80       	ld	r12, Z
 534:	d1 80       	ldd	r13, Z+1	; 0x01
 536:	8c 2d       	mov	r24, r12
 538:	8c d1       	rcall	.+792    	; 0x852 <RS485_Transmit_byte>
							RS485_Transmit_byte(sampleBuffer[i-1] >> 8);
 53a:	8d 2d       	mov	r24, r13
 53c:	8a d1       	rcall	.+788    	; 0x852 <RS485_Transmit_byte>
							RS485_Transmit_byte(sampleBuffer[i]);
 53e:	f8 01       	movw	r30, r16
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	4c 0f       	add	r20, r28
 54a:	5d 1f       	adc	r21, r29
 54c:	e4 0f       	add	r30, r20
 54e:	f5 1f       	adc	r31, r21
 550:	e0 80       	ld	r14, Z
 552:	f1 80       	ldd	r15, Z+1	; 0x01
 554:	8e 2d       	mov	r24, r14
 556:	7d d1       	rcall	.+762    	; 0x852 <RS485_Transmit_byte>
							RS485_Transmit_byte(sampleBuffer[i] >> 8);
 558:	8f 2d       	mov	r24, r15
 55a:	7b d1       	rcall	.+758    	; 0x852 <RS485_Transmit_byte>
							if(sampleBuffer[i] > sampleBuffer[i - 1] && sampleBuffer[i] > sampleBuffer[i + 1])
 55c:	ce 14       	cp	r12, r14
 55e:	df 04       	cpc	r13, r15
 560:	e0 f4       	brcc	.+56     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 562:	f8 01       	movw	r30, r16
 564:	31 96       	adiw	r30, 0x01	; 1
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	8c 0f       	add	r24, r28
 570:	9d 1f       	adc	r25, r29
 572:	e8 0f       	add	r30, r24
 574:	f9 1f       	adc	r31, r25
 576:	80 81       	ld	r24, Z
 578:	91 81       	ldd	r25, Z+1	; 0x01
 57a:	8e 15       	cp	r24, r14
 57c:	9f 05       	cpc	r25, r15
 57e:	68 f4       	brcc	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
							{
								peaks[peakCounter] = sampleBuffer[i];
 580:	e8 2d       	mov	r30, r8
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	ad e2       	ldi	r26, 0x2D	; 45
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	ac 0f       	add	r26, r28
 58e:	bd 1f       	adc	r27, r29
 590:	ea 0f       	add	r30, r26
 592:	fb 1f       	adc	r31, r27
 594:	f1 82       	std	Z+1, r15	; 0x01
 596:	e0 82       	st	Z, r14
								peakCounter++;
 598:	83 94       	inc	r8
							}
							if(sampleBuffer[i] < sampleBuffer[i - 1] && sampleBuffer[i] < sampleBuffer[i + 1])
 59a:	ec 14       	cp	r14, r12
 59c:	fd 04       	cpc	r15, r13
 59e:	e0 f4       	brcc	.+56     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5a0:	f8 01       	movw	r30, r16
 5a2:	31 96       	adiw	r30, 0x01	; 1
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	2c 0f       	add	r18, r28
 5ae:	3d 1f       	adc	r19, r29
 5b0:	e2 0f       	add	r30, r18
 5b2:	f3 1f       	adc	r31, r19
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	e8 16       	cp	r14, r24
 5ba:	f9 06       	cpc	r15, r25
 5bc:	68 f4       	brcc	.+26     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
							{
								valleys[valleyCounter] = sampleBuffer[i];
 5be:	e9 2d       	mov	r30, r9
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	49 ec       	ldi	r20, 0xC9	; 201
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	4c 0f       	add	r20, r28
 5cc:	5d 1f       	adc	r21, r29
 5ce:	e4 0f       	add	r30, r20
 5d0:	f5 1f       	adc	r31, r21
 5d2:	f1 82       	std	Z+1, r15	; 0x01
 5d4:	e0 82       	st	Z, r14
								valleyCounter++;
 5d6:	93 94       	inc	r9
							sampleBuffer[i] = (sampleBuffer[i - 1] + TWI_Read_proximity()) / 2;
							_delay_ms(10); //LTR559 sample rate
						}
						DUTY_CYCLE(1.5);
										
						for(int i = 1; i < 100; i++)
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	04 36       	cpi	r16, 0x64	; 100
 5de:	11 05       	cpc	r17, r1
 5e0:	0c f4       	brge	.+2      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e2:	9d cf       	rjmp	.-198    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					uint8_t peakCounter = 0;
					uint16_t valleys[50] = {0};
					uint8_t valleyCounter = 0;
					
					//Do in increments because of limited memory
					for(int x = 0; x < 7; x++)
 5e4:	5f ef       	ldi	r21, 0xFF	; 255
 5e6:	a5 1a       	sub	r10, r21
 5e8:	b5 0a       	sbc	r11, r21
 5ea:	87 e0       	ldi	r24, 0x07	; 7
 5ec:	a8 16       	cp	r10, r24
 5ee:	b1 04       	cpc	r11, r1
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f2:	5b cf       	rjmp	.-330    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 5f4:	61 2c       	mov	r6, r1
 5f6:	71 2c       	mov	r7, r1
 5f8:	41 2c       	mov	r4, r1
 5fa:	51 2c       	mov	r5, r1
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	cd 56       	subi	r28, 0x6D	; 109
 602:	de 4f       	sbci	r29, 0xFE	; 254
 604:	18 82       	st	Y, r1
 606:	c3 59       	subi	r28, 0x93	; 147
 608:	d1 40       	sbci	r29, 0x01	; 1
 60a:	c9 56       	subi	r28, 0x69	; 105
 60c:	de 4f       	sbci	r29, 0xFE	; 254
 60e:	18 82       	st	Y, r1
 610:	c7 59       	subi	r28, 0x97	; 151
 612:	d1 40       	sbci	r29, 0x01	; 1
 614:	21 2c       	mov	r2, r1
 616:	31 2c       	mov	r3, r1
 618:	38 c0       	rjmp	.+112    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
			
					/* Find lowest value in peaks and highest value in valleys */
					uint64_t peakSum = 0;
					uint16_t valleySum = 0;
					
					for(int i = 0; i < peakCounter; i++) peakSum += peaks[i];
 61a:	c3 01       	movw	r24, r6
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	ed e2       	ldi	r30, 0x2D	; 45
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	ec 0f       	add	r30, r28
 626:	fd 1f       	adc	r31, r29
 628:	8e 0f       	add	r24, r30
 62a:	9f 1f       	adc	r25, r31
 62c:	fc 01       	movw	r30, r24
 62e:	a0 80       	ld	r10, Z
 630:	b1 80       	ldd	r11, Z+1	; 0x01
 632:	2a 2d       	mov	r18, r10
 634:	3b 2d       	mov	r19, r11
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	a4 2c       	mov	r10, r4
 644:	b5 2c       	mov	r11, r5
 646:	cb 2e       	mov	r12, r27
 648:	da 2e       	mov	r13, r26
 64a:	cd 56       	subi	r28, 0x6D	; 109
 64c:	de 4f       	sbci	r29, 0xFE	; 254
 64e:	e8 80       	ld	r14, Y
 650:	c3 59       	subi	r28, 0x93	; 147
 652:	d1 40       	sbci	r29, 0x01	; 1
 654:	c9 56       	subi	r28, 0x69	; 105
 656:	de 4f       	sbci	r29, 0xFE	; 254
 658:	f8 80       	ld	r15, Y
 65a:	c7 59       	subi	r28, 0x97	; 151
 65c:	d1 40       	sbci	r29, 0x01	; 1
 65e:	02 2d       	mov	r16, r2
 660:	13 2d       	mov	r17, r3
 662:	b4 d3       	rcall	.+1896   	; 0xdcc <__adddi3>
 664:	42 2e       	mov	r4, r18
 666:	53 2e       	mov	r5, r19
 668:	b4 2f       	mov	r27, r20
 66a:	a5 2f       	mov	r26, r21
 66c:	cd 56       	subi	r28, 0x6D	; 109
 66e:	de 4f       	sbci	r29, 0xFE	; 254
 670:	68 83       	st	Y, r22
 672:	c3 59       	subi	r28, 0x93	; 147
 674:	d1 40       	sbci	r29, 0x01	; 1
 676:	c9 56       	subi	r28, 0x69	; 105
 678:	de 4f       	sbci	r29, 0xFE	; 254
 67a:	78 83       	st	Y, r23
 67c:	c7 59       	subi	r28, 0x97	; 151
 67e:	d1 40       	sbci	r29, 0x01	; 1
 680:	28 2e       	mov	r2, r24
 682:	39 2e       	mov	r3, r25
 684:	ff ef       	ldi	r31, 0xFF	; 255
 686:	6f 1a       	sub	r6, r31
 688:	7f 0a       	sbc	r7, r31
 68a:	88 2d       	mov	r24, r8
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	68 16       	cp	r6, r24
 690:	79 06       	cpc	r7, r25
 692:	1c f2       	brlt	.-122    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	61 2c       	mov	r6, r1
 69a:	71 2c       	mov	r7, r1
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
					for(int i = 0; i < valleyCounter; i++) valleySum = valleys[i];
 69e:	9c 01       	movw	r18, r24
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	49 ec       	ldi	r20, 0xC9	; 201
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	4c 0f       	add	r20, r28
 6aa:	5d 1f       	adc	r21, r29
 6ac:	24 0f       	add	r18, r20
 6ae:	35 1f       	adc	r19, r21
 6b0:	f9 01       	movw	r30, r18
 6b2:	60 80       	ld	r6, Z
 6b4:	71 80       	ldd	r7, Z+1	; 0x01
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	29 2d       	mov	r18, r9
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	82 17       	cp	r24, r18
 6be:	93 07       	cpc	r25, r19
 6c0:	74 f3       	brlt	.-36     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
					
					/* Calculate mid point and set LTR559 Interrupt Threshold to this value */
					uint16_t middleValue = ((peakSum/peakCounter) + (valleySum/valleyCounter)) / 2;
 6c2:	a8 2c       	mov	r10, r8
 6c4:	b1 2c       	mov	r11, r1
 6c6:	c1 2c       	mov	r12, r1
 6c8:	d1 2c       	mov	r13, r1
 6ca:	e1 2c       	mov	r14, r1
 6cc:	f1 2c       	mov	r15, r1
 6ce:	00 e0       	ldi	r16, 0x00	; 0
 6d0:	10 e0       	ldi	r17, 0x00	; 0
 6d2:	24 2d       	mov	r18, r4
 6d4:	35 2d       	mov	r19, r5
 6d6:	4b 2f       	mov	r20, r27
 6d8:	5a 2f       	mov	r21, r26
 6da:	cd 56       	subi	r28, 0x6D	; 109
 6dc:	de 4f       	sbci	r29, 0xFE	; 254
 6de:	68 81       	ld	r22, Y
 6e0:	c3 59       	subi	r28, 0x93	; 147
 6e2:	d1 40       	sbci	r29, 0x01	; 1
 6e4:	c9 56       	subi	r28, 0x69	; 105
 6e6:	de 4f       	sbci	r29, 0xFE	; 254
 6e8:	78 81       	ld	r23, Y
 6ea:	c7 59       	subi	r28, 0x97	; 151
 6ec:	d1 40       	sbci	r29, 0x01	; 1
 6ee:	82 2d       	mov	r24, r2
 6f0:	93 2d       	mov	r25, r3
 6f2:	04 d3       	rcall	.+1544   	; 0xcfc <__udivdi3>
 6f4:	a2 2e       	mov	r10, r18
 6f6:	b3 2e       	mov	r11, r19
 6f8:	c4 2e       	mov	r12, r20
 6fa:	d5 2e       	mov	r13, r21
 6fc:	e6 2e       	mov	r14, r22
 6fe:	f7 2e       	mov	r15, r23
 700:	08 2f       	mov	r16, r24
 702:	19 2f       	mov	r17, r25
 704:	69 2d       	mov	r22, r9
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	c3 01       	movw	r24, r6
 70a:	e2 d2       	rcall	.+1476   	; 0xcd0 <__udivmodhi4>
 70c:	ab 01       	movw	r20, r22
 70e:	24 2f       	mov	r18, r20
 710:	35 2f       	mov	r19, r21
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	56 d3       	rcall	.+1708   	; 0xdcc <__adddi3>
 720:	01 e0       	ldi	r16, 0x01	; 1
 722:	38 d3       	rcall	.+1648   	; 0xd94 <__lshrdi3>
 724:	13 2f       	mov	r17, r19
					TWI_Write_register(PS_THRES_UP_0, middleValue); //Upper interrupt threshold - 12 bit value
 726:	d2 2e       	mov	r13, r18
 728:	62 2f       	mov	r22, r18
 72a:	80 e9       	ldi	r24, 0x90	; 144
 72c:	ea dc       	rcall	.-1580   	; 0x102 <TWI_Write_register>
					TWI_Write_register(PS_THRES_UP_1, middleValue >> 8);
 72e:	e1 2e       	mov	r14, r17
 730:	61 2f       	mov	r22, r17
 732:	81 e9       	ldi	r24, 0x91	; 145
 734:	e6 dc       	rcall	.-1588   	; 0x102 <TWI_Write_register>
					
					#if S_SELF_CONF
						for(int i = 1; i < 100; i++)
 736:	01 e0       	ldi	r16, 0x01	; 1
 738:	10 e0       	ldi	r17, 0x00	; 0
 73a:	14 c0       	rjmp	.+40     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
						{
							RS485_Transmit_byte(middleValue);
 73c:	8d 2d       	mov	r24, r13
 73e:	89 d0       	rcall	.+274    	; 0x852 <RS485_Transmit_byte>
							RS485_Transmit_byte(middleValue >> 8);
 740:	8e 2d       	mov	r24, r14
 742:	87 d0       	rcall	.+270    	; 0x852 <RS485_Transmit_byte>
							
							/* Plot all samples */
							RS485_Transmit_byte(sampleBuffer[i]);
 744:	f8 01       	movw	r30, r16
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	2c 0f       	add	r18, r28
 750:	3d 1f       	adc	r19, r29
 752:	e2 0f       	add	r30, r18
 754:	f3 1f       	adc	r31, r19
 756:	f1 80       	ldd	r15, Z+1	; 0x01
 758:	80 81       	ld	r24, Z
 75a:	7b d0       	rcall	.+246    	; 0x852 <RS485_Transmit_byte>
							RS485_Transmit_byte(sampleBuffer[i] >> 8);
 75c:	8f 2d       	mov	r24, r15
 75e:	79 d0       	rcall	.+242    	; 0x852 <RS485_Transmit_byte>
					uint16_t middleValue = ((peakSum/peakCounter) + (valleySum/valleyCounter)) / 2;
					TWI_Write_register(PS_THRES_UP_0, middleValue); //Upper interrupt threshold - 12 bit value
					TWI_Write_register(PS_THRES_UP_1, middleValue >> 8);
					
					#if S_SELF_CONF
						for(int i = 1; i < 100; i++)
 760:	0f 5f       	subi	r16, 0xFF	; 255
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	04 36       	cpi	r16, 0x64	; 100
 766:	11 05       	cpc	r17, r1
 768:	4c f3       	brlt	.-46     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
							RS485_Transmit_byte(sampleBuffer[i]);
							RS485_Transmit_byte(sampleBuffer[i] >> 8);
						}
					#endif
					
					selfEncodingStatus = 0;
 76a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <selfEncodingStatus+0x1>
 76e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <selfEncodingStatus>
					uartData = 0;
 772:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <uartData>
					break;
				}
		}

		/***** Button handling *****/
		if((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 776:	4a 9b       	sbis	0x09, 2	; 9
 778:	11 c0       	rjmp	.+34     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
		{
			if(e == 0) setpoint -= 4;
 77a:	cf 56       	subi	r28, 0x6F	; 111
 77c:	de 4f       	sbci	r29, 0xFE	; 254
 77e:	48 81       	ld	r20, Y
 780:	59 81       	ldd	r21, Y+1	; 0x01
 782:	c1 59       	subi	r28, 0x91	; 145
 784:	d1 40       	sbci	r29, 0x01	; 1
 786:	45 2b       	or	r20, r21
 788:	49 f4       	brne	.+18     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
 78a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setpoint>
 78e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setpoint+0x1>
 792:	04 97       	sbiw	r24, 0x04	; 4
 794:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setpoint+0x1>
 798:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setpoint>
		}
		
		if((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 79c:	4b 9b       	sbis	0x09, 3	; 9
 79e:	75 cd       	rjmp	.-1302   	; 0x28a <main+0x20>
		{
			if(e == 0) setpoint += 4;
 7a0:	cf 56       	subi	r28, 0x6F	; 111
 7a2:	de 4f       	sbci	r29, 0xFE	; 254
 7a4:	88 81       	ld	r24, Y
 7a6:	99 81       	ldd	r25, Y+1	; 0x01
 7a8:	c1 59       	subi	r28, 0x91	; 145
 7aa:	d1 40       	sbci	r29, 0x01	; 1
 7ac:	89 2b       	or	r24, r25
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7b0:	6c cd       	rjmp	.-1320   	; 0x28a <main+0x20>
 7b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <setpoint>
 7b6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <setpoint+0x1>
 7ba:	04 96       	adiw	r24, 0x04	; 4
 7bc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <setpoint+0x1>
 7c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <setpoint>
 7c4:	62 cd       	rjmp	.-1340   	; 0x28a <main+0x20>

000007c6 <DUTY_CYCLE>:
	DUTY_CYCLE(1.5); //Duty cycle
	ICR1  = 2500; //50Hz
}

void DUTY_CYCLE(float x)
{
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	6b 01       	movw	r12, r22
 7d0:	7c 01       	movw	r14, r24
	 OCR1A = (uint16_t)(2500 - (125 * x));
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	4a ef       	ldi	r20, 0xFA	; 250
 7d8:	52 e4       	ldi	r21, 0x42	; 66
 7da:	17 d2       	rcall	.+1070   	; 0xc0a <__mulsf3>
 7dc:	9b 01       	movw	r18, r22
 7de:	ac 01       	movw	r20, r24
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	70 e4       	ldi	r23, 0x40	; 64
 7e4:	8c e1       	ldi	r24, 0x1C	; 28
 7e6:	95 e4       	ldi	r25, 0x45	; 69
 7e8:	5d d0       	rcall	.+186    	; 0x8a4 <__subsf3>
 7ea:	2d d1       	rcall	.+602    	; 0xa46 <__fixunssfsi>
 7ec:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 7f0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	 cDutyCycle = x;
 7f4:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <cDutyCycle>
 7f8:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <cDutyCycle+0x1>
 7fc:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <cDutyCycle+0x2>
 800:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <cDutyCycle+0x3>
}
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	df 90       	pop	r13
 80a:	cf 90       	pop	r12
 80c:	08 95       	ret

0000080e <Timer_init>:

volatile float cDutyCycle = 0.0;
void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 814:	83 e1       	ldi	r24, 0x13	; 19
 816:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	DUTY_CYCLE(1.5); //Duty cycle
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	80 ec       	ldi	r24, 0xC0	; 192
 820:	9f e3       	ldi	r25, 0x3F	; 63
 822:	d1 df       	rcall	.-94     	; 0x7c6 <DUTY_CYCLE>
	ICR1  = 2500; //50Hz
 824:	84 ec       	ldi	r24, 0xC4	; 196
 826:	99 e0       	ldi	r25, 0x09	; 9
 828:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 82c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 830:	08 95       	ret

00000832 <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 832:	87 e6       	ldi	r24, 0x67	; 103
 834:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 838:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 83c:	e1 ec       	ldi	r30, 0xC1	; 193
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	88 6d       	ori	r24, 0xD8	; 216
 844:	80 83       	st	Z, r24
 846:	e2 ec       	ldi	r30, 0xC2	; 194
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	86 60       	ori	r24, 0x06	; 6
 84e:	80 83       	st	Z, r24
 850:	08 95       	ret

00000852 <RS485_Transmit_byte>:
 852:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7ff0c0>
 856:	95 ff       	sbrs	r25, 5
 858:	fc cf       	rjmp	.-8      	; 0x852 <RS485_Transmit_byte>
 85a:	95 b1       	in	r25, 0x05	; 5
 85c:	94 60       	ori	r25, 0x04	; 4
 85e:	95 b9       	out	0x05, r25	; 5
 860:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 864:	08 95       	ret

00000866 <__vector_18>:

ISR(USART_RX_vect)
{
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	8f 93       	push	r24
	uartData = UDR0; //Received data must be read to clear RXC flag
 872:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 876:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <uartData>
}
 87a:	8f 91       	pop	r24
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_20>:

ISR(USART_TX_vect)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 892:	85 b1       	in	r24, 0x05	; 5
 894:	8b 7f       	andi	r24, 0xFB	; 251
 896:	85 b9       	out	0x05, r24	; 5
 898:	8f 91       	pop	r24
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__subsf3>:
 8a4:	50 58       	subi	r21, 0x80	; 128

000008a6 <__addsf3>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	aa 27       	eor	r26, r26
 8aa:	0e d0       	rcall	.+28     	; 0x8c8 <__addsf3x>
 8ac:	70 c1       	rjmp	.+736    	; 0xb8e <__fp_round>
 8ae:	61 d1       	rcall	.+706    	; 0xb72 <__fp_pscA>
 8b0:	30 f0       	brcs	.+12     	; 0x8be <__addsf3+0x18>
 8b2:	66 d1       	rcall	.+716    	; 0xb80 <__fp_pscB>
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__addsf3+0x18>
 8b6:	31 f4       	brne	.+12     	; 0x8c4 <__addsf3+0x1e>
 8b8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__addsf3+0x1a>
 8bc:	1e f4       	brtc	.+6      	; 0x8c4 <__addsf3+0x1e>
 8be:	56 c1       	rjmp	.+684    	; 0xb6c <__fp_nan>
 8c0:	0e f4       	brtc	.+2      	; 0x8c4 <__addsf3+0x1e>
 8c2:	e0 95       	com	r30
 8c4:	e7 fb       	bst	r30, 7
 8c6:	4c c1       	rjmp	.+664    	; 0xb60 <__fp_inf>

000008c8 <__addsf3x>:
 8c8:	e9 2f       	mov	r30, r25
 8ca:	72 d1       	rcall	.+740    	; 0xbb0 <__fp_split3>
 8cc:	80 f3       	brcs	.-32     	; 0x8ae <__addsf3+0x8>
 8ce:	ba 17       	cp	r27, r26
 8d0:	62 07       	cpc	r22, r18
 8d2:	73 07       	cpc	r23, r19
 8d4:	84 07       	cpc	r24, r20
 8d6:	95 07       	cpc	r25, r21
 8d8:	18 f0       	brcs	.+6      	; 0x8e0 <__addsf3x+0x18>
 8da:	71 f4       	brne	.+28     	; 0x8f8 <__addsf3x+0x30>
 8dc:	9e f5       	brtc	.+102    	; 0x944 <__addsf3x+0x7c>
 8de:	8a c1       	rjmp	.+788    	; 0xbf4 <__fp_zero>
 8e0:	0e f4       	brtc	.+2      	; 0x8e4 <__addsf3x+0x1c>
 8e2:	e0 95       	com	r30
 8e4:	0b 2e       	mov	r0, r27
 8e6:	ba 2f       	mov	r27, r26
 8e8:	a0 2d       	mov	r26, r0
 8ea:	0b 01       	movw	r0, r22
 8ec:	b9 01       	movw	r22, r18
 8ee:	90 01       	movw	r18, r0
 8f0:	0c 01       	movw	r0, r24
 8f2:	ca 01       	movw	r24, r20
 8f4:	a0 01       	movw	r20, r0
 8f6:	11 24       	eor	r1, r1
 8f8:	ff 27       	eor	r31, r31
 8fa:	59 1b       	sub	r21, r25
 8fc:	99 f0       	breq	.+38     	; 0x924 <__addsf3x+0x5c>
 8fe:	59 3f       	cpi	r21, 0xF9	; 249
 900:	50 f4       	brcc	.+20     	; 0x916 <__addsf3x+0x4e>
 902:	50 3e       	cpi	r21, 0xE0	; 224
 904:	68 f1       	brcs	.+90     	; 0x960 <__addsf3x+0x98>
 906:	1a 16       	cp	r1, r26
 908:	f0 40       	sbci	r31, 0x00	; 0
 90a:	a2 2f       	mov	r26, r18
 90c:	23 2f       	mov	r18, r19
 90e:	34 2f       	mov	r19, r20
 910:	44 27       	eor	r20, r20
 912:	58 5f       	subi	r21, 0xF8	; 248
 914:	f3 cf       	rjmp	.-26     	; 0x8fc <__addsf3x+0x34>
 916:	46 95       	lsr	r20
 918:	37 95       	ror	r19
 91a:	27 95       	ror	r18
 91c:	a7 95       	ror	r26
 91e:	f0 40       	sbci	r31, 0x00	; 0
 920:	53 95       	inc	r21
 922:	c9 f7       	brne	.-14     	; 0x916 <__addsf3x+0x4e>
 924:	7e f4       	brtc	.+30     	; 0x944 <__addsf3x+0x7c>
 926:	1f 16       	cp	r1, r31
 928:	ba 0b       	sbc	r27, r26
 92a:	62 0b       	sbc	r22, r18
 92c:	73 0b       	sbc	r23, r19
 92e:	84 0b       	sbc	r24, r20
 930:	ba f0       	brmi	.+46     	; 0x960 <__addsf3x+0x98>
 932:	91 50       	subi	r25, 0x01	; 1
 934:	a1 f0       	breq	.+40     	; 0x95e <__addsf3x+0x96>
 936:	ff 0f       	add	r31, r31
 938:	bb 1f       	adc	r27, r27
 93a:	66 1f       	adc	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	c2 f7       	brpl	.-16     	; 0x932 <__addsf3x+0x6a>
 942:	0e c0       	rjmp	.+28     	; 0x960 <__addsf3x+0x98>
 944:	ba 0f       	add	r27, r26
 946:	62 1f       	adc	r22, r18
 948:	73 1f       	adc	r23, r19
 94a:	84 1f       	adc	r24, r20
 94c:	48 f4       	brcc	.+18     	; 0x960 <__addsf3x+0x98>
 94e:	87 95       	ror	r24
 950:	77 95       	ror	r23
 952:	67 95       	ror	r22
 954:	b7 95       	ror	r27
 956:	f7 95       	ror	r31
 958:	9e 3f       	cpi	r25, 0xFE	; 254
 95a:	08 f0       	brcs	.+2      	; 0x95e <__addsf3x+0x96>
 95c:	b3 cf       	rjmp	.-154    	; 0x8c4 <__addsf3+0x1e>
 95e:	93 95       	inc	r25
 960:	88 0f       	add	r24, r24
 962:	08 f0       	brcs	.+2      	; 0x966 <__addsf3x+0x9e>
 964:	99 27       	eor	r25, r25
 966:	ee 0f       	add	r30, r30
 968:	97 95       	ror	r25
 96a:	87 95       	ror	r24
 96c:	08 95       	ret

0000096e <__cmpsf2>:
 96e:	d4 d0       	rcall	.+424    	; 0xb18 <__fp_cmp>
 970:	08 f4       	brcc	.+2      	; 0x974 <__cmpsf2+0x6>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	08 95       	ret

00000976 <__divsf3>:
 976:	0c d0       	rcall	.+24     	; 0x990 <__divsf3x>
 978:	0a c1       	rjmp	.+532    	; 0xb8e <__fp_round>
 97a:	02 d1       	rcall	.+516    	; 0xb80 <__fp_pscB>
 97c:	40 f0       	brcs	.+16     	; 0x98e <__divsf3+0x18>
 97e:	f9 d0       	rcall	.+498    	; 0xb72 <__fp_pscA>
 980:	30 f0       	brcs	.+12     	; 0x98e <__divsf3+0x18>
 982:	21 f4       	brne	.+8      	; 0x98c <__divsf3+0x16>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	19 f0       	breq	.+6      	; 0x98e <__divsf3+0x18>
 988:	eb c0       	rjmp	.+470    	; 0xb60 <__fp_inf>
 98a:	51 11       	cpse	r21, r1
 98c:	34 c1       	rjmp	.+616    	; 0xbf6 <__fp_szero>
 98e:	ee c0       	rjmp	.+476    	; 0xb6c <__fp_nan>

00000990 <__divsf3x>:
 990:	0f d1       	rcall	.+542    	; 0xbb0 <__fp_split3>
 992:	98 f3       	brcs	.-26     	; 0x97a <__divsf3+0x4>

00000994 <__divsf3_pse>:
 994:	99 23       	and	r25, r25
 996:	c9 f3       	breq	.-14     	; 0x98a <__divsf3+0x14>
 998:	55 23       	and	r21, r21
 99a:	b1 f3       	breq	.-20     	; 0x988 <__divsf3+0x12>
 99c:	95 1b       	sub	r25, r21
 99e:	55 0b       	sbc	r21, r21
 9a0:	bb 27       	eor	r27, r27
 9a2:	aa 27       	eor	r26, r26
 9a4:	62 17       	cp	r22, r18
 9a6:	73 07       	cpc	r23, r19
 9a8:	84 07       	cpc	r24, r20
 9aa:	38 f0       	brcs	.+14     	; 0x9ba <__divsf3_pse+0x26>
 9ac:	9f 5f       	subi	r25, 0xFF	; 255
 9ae:	5f 4f       	sbci	r21, 0xFF	; 255
 9b0:	22 0f       	add	r18, r18
 9b2:	33 1f       	adc	r19, r19
 9b4:	44 1f       	adc	r20, r20
 9b6:	aa 1f       	adc	r26, r26
 9b8:	a9 f3       	breq	.-22     	; 0x9a4 <__divsf3_pse+0x10>
 9ba:	33 d0       	rcall	.+102    	; 0xa22 <__divsf3_pse+0x8e>
 9bc:	0e 2e       	mov	r0, r30
 9be:	3a f0       	brmi	.+14     	; 0x9ce <__divsf3_pse+0x3a>
 9c0:	e0 e8       	ldi	r30, 0x80	; 128
 9c2:	30 d0       	rcall	.+96     	; 0xa24 <__divsf3_pse+0x90>
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	50 40       	sbci	r21, 0x00	; 0
 9c8:	e6 95       	lsr	r30
 9ca:	00 1c       	adc	r0, r0
 9cc:	ca f7       	brpl	.-14     	; 0x9c0 <__divsf3_pse+0x2c>
 9ce:	29 d0       	rcall	.+82     	; 0xa22 <__divsf3_pse+0x8e>
 9d0:	fe 2f       	mov	r31, r30
 9d2:	27 d0       	rcall	.+78     	; 0xa22 <__divsf3_pse+0x8e>
 9d4:	66 0f       	add	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	bb 1f       	adc	r27, r27
 9dc:	26 17       	cp	r18, r22
 9de:	37 07       	cpc	r19, r23
 9e0:	48 07       	cpc	r20, r24
 9e2:	ab 07       	cpc	r26, r27
 9e4:	b0 e8       	ldi	r27, 0x80	; 128
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__divsf3_pse+0x56>
 9e8:	bb 0b       	sbc	r27, r27
 9ea:	80 2d       	mov	r24, r0
 9ec:	bf 01       	movw	r22, r30
 9ee:	ff 27       	eor	r31, r31
 9f0:	93 58       	subi	r25, 0x83	; 131
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255
 9f4:	2a f0       	brmi	.+10     	; 0xa00 <__divsf3_pse+0x6c>
 9f6:	9e 3f       	cpi	r25, 0xFE	; 254
 9f8:	51 05       	cpc	r21, r1
 9fa:	68 f0       	brcs	.+26     	; 0xa16 <__divsf3_pse+0x82>
 9fc:	b1 c0       	rjmp	.+354    	; 0xb60 <__fp_inf>
 9fe:	fb c0       	rjmp	.+502    	; 0xbf6 <__fp_szero>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	ec f3       	brlt	.-6      	; 0x9fe <__divsf3_pse+0x6a>
 a04:	98 3e       	cpi	r25, 0xE8	; 232
 a06:	dc f3       	brlt	.-10     	; 0x9fe <__divsf3_pse+0x6a>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b7 95       	ror	r27
 a10:	f7 95       	ror	r31
 a12:	9f 5f       	subi	r25, 0xFF	; 255
 a14:	c9 f7       	brne	.-14     	; 0xa08 <__divsf3_pse+0x74>
 a16:	88 0f       	add	r24, r24
 a18:	91 1d       	adc	r25, r1
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret
 a22:	e1 e0       	ldi	r30, 0x01	; 1
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	bb 1f       	adc	r27, r27
 a2c:	62 17       	cp	r22, r18
 a2e:	73 07       	cpc	r23, r19
 a30:	84 07       	cpc	r24, r20
 a32:	ba 07       	cpc	r27, r26
 a34:	20 f0       	brcs	.+8      	; 0xa3e <__divsf3_pse+0xaa>
 a36:	62 1b       	sub	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba 0b       	sbc	r27, r26
 a3e:	ee 1f       	adc	r30, r30
 a40:	88 f7       	brcc	.-30     	; 0xa24 <__divsf3_pse+0x90>
 a42:	e0 95       	com	r30
 a44:	08 95       	ret

00000a46 <__fixunssfsi>:
 a46:	bc d0       	rcall	.+376    	; 0xbc0 <__fp_splitA>
 a48:	88 f0       	brcs	.+34     	; 0xa6c <__fixunssfsi+0x26>
 a4a:	9f 57       	subi	r25, 0x7F	; 127
 a4c:	90 f0       	brcs	.+36     	; 0xa72 <__fixunssfsi+0x2c>
 a4e:	b9 2f       	mov	r27, r25
 a50:	99 27       	eor	r25, r25
 a52:	b7 51       	subi	r27, 0x17	; 23
 a54:	a0 f0       	brcs	.+40     	; 0xa7e <__fixunssfsi+0x38>
 a56:	d1 f0       	breq	.+52     	; 0xa8c <__fixunssfsi+0x46>
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	1a f0       	brmi	.+6      	; 0xa68 <__fixunssfsi+0x22>
 a62:	ba 95       	dec	r27
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__fixunssfsi+0x12>
 a66:	12 c0       	rjmp	.+36     	; 0xa8c <__fixunssfsi+0x46>
 a68:	b1 30       	cpi	r27, 0x01	; 1
 a6a:	81 f0       	breq	.+32     	; 0xa8c <__fixunssfsi+0x46>
 a6c:	c3 d0       	rcall	.+390    	; 0xbf4 <__fp_zero>
 a6e:	b1 e0       	ldi	r27, 0x01	; 1
 a70:	08 95       	ret
 a72:	c0 c0       	rjmp	.+384    	; 0xbf4 <__fp_zero>
 a74:	67 2f       	mov	r22, r23
 a76:	78 2f       	mov	r23, r24
 a78:	88 27       	eor	r24, r24
 a7a:	b8 5f       	subi	r27, 0xF8	; 248
 a7c:	39 f0       	breq	.+14     	; 0xa8c <__fixunssfsi+0x46>
 a7e:	b9 3f       	cpi	r27, 0xF9	; 249
 a80:	cc f3       	brlt	.-14     	; 0xa74 <__fixunssfsi+0x2e>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b3 95       	inc	r27
 a8a:	d9 f7       	brne	.-10     	; 0xa82 <__fixunssfsi+0x3c>
 a8c:	3e f4       	brtc	.+14     	; 0xa9c <__fixunssfsi+0x56>
 a8e:	90 95       	com	r25
 a90:	80 95       	com	r24
 a92:	70 95       	com	r23
 a94:	61 95       	neg	r22
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	08 95       	ret

00000a9e <__floatunsisf>:
 a9e:	e8 94       	clt
 aa0:	09 c0       	rjmp	.+18     	; 0xab4 <__floatsisf+0x12>

00000aa2 <__floatsisf>:
 aa2:	97 fb       	bst	r25, 7
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__floatsisf+0x12>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	99 23       	and	r25, r25
 ab6:	a9 f0       	breq	.+42     	; 0xae2 <__floatsisf+0x40>
 ab8:	f9 2f       	mov	r31, r25
 aba:	96 e9       	ldi	r25, 0x96	; 150
 abc:	bb 27       	eor	r27, r27
 abe:	93 95       	inc	r25
 ac0:	f6 95       	lsr	r31
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f1 11       	cpse	r31, r1
 acc:	f8 cf       	rjmp	.-16     	; 0xabe <__floatsisf+0x1c>
 ace:	fa f4       	brpl	.+62     	; 0xb0e <__floatsisf+0x6c>
 ad0:	bb 0f       	add	r27, r27
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__floatsisf+0x36>
 ad4:	60 ff       	sbrs	r22, 0
 ad6:	1b c0       	rjmp	.+54     	; 0xb0e <__floatsisf+0x6c>
 ad8:	6f 5f       	subi	r22, 0xFF	; 255
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	16 c0       	rjmp	.+44     	; 0xb0e <__floatsisf+0x6c>
 ae2:	88 23       	and	r24, r24
 ae4:	11 f0       	breq	.+4      	; 0xaea <__floatsisf+0x48>
 ae6:	96 e9       	ldi	r25, 0x96	; 150
 ae8:	11 c0       	rjmp	.+34     	; 0xb0c <__floatsisf+0x6a>
 aea:	77 23       	and	r23, r23
 aec:	21 f0       	breq	.+8      	; 0xaf6 <__floatsisf+0x54>
 aee:	9e e8       	ldi	r25, 0x8E	; 142
 af0:	87 2f       	mov	r24, r23
 af2:	76 2f       	mov	r23, r22
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__floatsisf+0x5e>
 af6:	66 23       	and	r22, r22
 af8:	71 f0       	breq	.+28     	; 0xb16 <__floatsisf+0x74>
 afa:	96 e8       	ldi	r25, 0x86	; 134
 afc:	86 2f       	mov	r24, r22
 afe:	70 e0       	ldi	r23, 0x00	; 0
 b00:	60 e0       	ldi	r22, 0x00	; 0
 b02:	2a f0       	brmi	.+10     	; 0xb0e <__floatsisf+0x6c>
 b04:	9a 95       	dec	r25
 b06:	66 0f       	add	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	da f7       	brpl	.-10     	; 0xb04 <__floatsisf+0x62>
 b0e:	88 0f       	add	r24, r24
 b10:	96 95       	lsr	r25
 b12:	87 95       	ror	r24
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <__fp_cmp>:
 b18:	99 0f       	add	r25, r25
 b1a:	00 08       	sbc	r0, r0
 b1c:	55 0f       	add	r21, r21
 b1e:	aa 0b       	sbc	r26, r26
 b20:	e0 e8       	ldi	r30, 0x80	; 128
 b22:	fe ef       	ldi	r31, 0xFE	; 254
 b24:	16 16       	cp	r1, r22
 b26:	17 06       	cpc	r1, r23
 b28:	e8 07       	cpc	r30, r24
 b2a:	f9 07       	cpc	r31, r25
 b2c:	c0 f0       	brcs	.+48     	; 0xb5e <__fp_cmp+0x46>
 b2e:	12 16       	cp	r1, r18
 b30:	13 06       	cpc	r1, r19
 b32:	e4 07       	cpc	r30, r20
 b34:	f5 07       	cpc	r31, r21
 b36:	98 f0       	brcs	.+38     	; 0xb5e <__fp_cmp+0x46>
 b38:	62 1b       	sub	r22, r18
 b3a:	73 0b       	sbc	r23, r19
 b3c:	84 0b       	sbc	r24, r20
 b3e:	95 0b       	sbc	r25, r21
 b40:	39 f4       	brne	.+14     	; 0xb50 <__fp_cmp+0x38>
 b42:	0a 26       	eor	r0, r26
 b44:	61 f0       	breq	.+24     	; 0xb5e <__fp_cmp+0x46>
 b46:	23 2b       	or	r18, r19
 b48:	24 2b       	or	r18, r20
 b4a:	25 2b       	or	r18, r21
 b4c:	21 f4       	brne	.+8      	; 0xb56 <__fp_cmp+0x3e>
 b4e:	08 95       	ret
 b50:	0a 26       	eor	r0, r26
 b52:	09 f4       	brne	.+2      	; 0xb56 <__fp_cmp+0x3e>
 b54:	a1 40       	sbci	r26, 0x01	; 1
 b56:	a6 95       	lsr	r26
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	81 1d       	adc	r24, r1
 b5c:	81 1d       	adc	r24, r1
 b5e:	08 95       	ret

00000b60 <__fp_inf>:
 b60:	97 f9       	bld	r25, 7
 b62:	9f 67       	ori	r25, 0x7F	; 127
 b64:	80 e8       	ldi	r24, 0x80	; 128
 b66:	70 e0       	ldi	r23, 0x00	; 0
 b68:	60 e0       	ldi	r22, 0x00	; 0
 b6a:	08 95       	ret

00000b6c <__fp_nan>:
 b6c:	9f ef       	ldi	r25, 0xFF	; 255
 b6e:	80 ec       	ldi	r24, 0xC0	; 192
 b70:	08 95       	ret

00000b72 <__fp_pscA>:
 b72:	00 24       	eor	r0, r0
 b74:	0a 94       	dec	r0
 b76:	16 16       	cp	r1, r22
 b78:	17 06       	cpc	r1, r23
 b7a:	18 06       	cpc	r1, r24
 b7c:	09 06       	cpc	r0, r25
 b7e:	08 95       	ret

00000b80 <__fp_pscB>:
 b80:	00 24       	eor	r0, r0
 b82:	0a 94       	dec	r0
 b84:	12 16       	cp	r1, r18
 b86:	13 06       	cpc	r1, r19
 b88:	14 06       	cpc	r1, r20
 b8a:	05 06       	cpc	r0, r21
 b8c:	08 95       	ret

00000b8e <__fp_round>:
 b8e:	09 2e       	mov	r0, r25
 b90:	03 94       	inc	r0
 b92:	00 0c       	add	r0, r0
 b94:	11 f4       	brne	.+4      	; 0xb9a <__fp_round+0xc>
 b96:	88 23       	and	r24, r24
 b98:	52 f0       	brmi	.+20     	; 0xbae <__fp_round+0x20>
 b9a:	bb 0f       	add	r27, r27
 b9c:	40 f4       	brcc	.+16     	; 0xbae <__fp_round+0x20>
 b9e:	bf 2b       	or	r27, r31
 ba0:	11 f4       	brne	.+4      	; 0xba6 <__fp_round+0x18>
 ba2:	60 ff       	sbrs	r22, 0
 ba4:	04 c0       	rjmp	.+8      	; 0xbae <__fp_round+0x20>
 ba6:	6f 5f       	subi	r22, 0xFF	; 255
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	08 95       	ret

00000bb0 <__fp_split3>:
 bb0:	57 fd       	sbrc	r21, 7
 bb2:	90 58       	subi	r25, 0x80	; 128
 bb4:	44 0f       	add	r20, r20
 bb6:	55 1f       	adc	r21, r21
 bb8:	59 f0       	breq	.+22     	; 0xbd0 <__fp_splitA+0x10>
 bba:	5f 3f       	cpi	r21, 0xFF	; 255
 bbc:	71 f0       	breq	.+28     	; 0xbda <__fp_splitA+0x1a>
 bbe:	47 95       	ror	r20

00000bc0 <__fp_splitA>:
 bc0:	88 0f       	add	r24, r24
 bc2:	97 fb       	bst	r25, 7
 bc4:	99 1f       	adc	r25, r25
 bc6:	61 f0       	breq	.+24     	; 0xbe0 <__fp_splitA+0x20>
 bc8:	9f 3f       	cpi	r25, 0xFF	; 255
 bca:	79 f0       	breq	.+30     	; 0xbea <__fp_splitA+0x2a>
 bcc:	87 95       	ror	r24
 bce:	08 95       	ret
 bd0:	12 16       	cp	r1, r18
 bd2:	13 06       	cpc	r1, r19
 bd4:	14 06       	cpc	r1, r20
 bd6:	55 1f       	adc	r21, r21
 bd8:	f2 cf       	rjmp	.-28     	; 0xbbe <__fp_split3+0xe>
 bda:	46 95       	lsr	r20
 bdc:	f1 df       	rcall	.-30     	; 0xbc0 <__fp_splitA>
 bde:	08 c0       	rjmp	.+16     	; 0xbf0 <__fp_splitA+0x30>
 be0:	16 16       	cp	r1, r22
 be2:	17 06       	cpc	r1, r23
 be4:	18 06       	cpc	r1, r24
 be6:	99 1f       	adc	r25, r25
 be8:	f1 cf       	rjmp	.-30     	; 0xbcc <__fp_splitA+0xc>
 bea:	86 95       	lsr	r24
 bec:	71 05       	cpc	r23, r1
 bee:	61 05       	cpc	r22, r1
 bf0:	08 94       	sec
 bf2:	08 95       	ret

00000bf4 <__fp_zero>:
 bf4:	e8 94       	clt

00000bf6 <__fp_szero>:
 bf6:	bb 27       	eor	r27, r27
 bf8:	66 27       	eor	r22, r22
 bfa:	77 27       	eor	r23, r23
 bfc:	cb 01       	movw	r24, r22
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__gesf2>:
 c02:	8a df       	rcall	.-236    	; 0xb18 <__fp_cmp>
 c04:	08 f4       	brcc	.+2      	; 0xc08 <__gesf2+0x6>
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__mulsf3>:
 c0a:	0b d0       	rcall	.+22     	; 0xc22 <__mulsf3x>
 c0c:	c0 cf       	rjmp	.-128    	; 0xb8e <__fp_round>
 c0e:	b1 df       	rcall	.-158    	; 0xb72 <__fp_pscA>
 c10:	28 f0       	brcs	.+10     	; 0xc1c <__mulsf3+0x12>
 c12:	b6 df       	rcall	.-148    	; 0xb80 <__fp_pscB>
 c14:	18 f0       	brcs	.+6      	; 0xc1c <__mulsf3+0x12>
 c16:	95 23       	and	r25, r21
 c18:	09 f0       	breq	.+2      	; 0xc1c <__mulsf3+0x12>
 c1a:	a2 cf       	rjmp	.-188    	; 0xb60 <__fp_inf>
 c1c:	a7 cf       	rjmp	.-178    	; 0xb6c <__fp_nan>
 c1e:	11 24       	eor	r1, r1
 c20:	ea cf       	rjmp	.-44     	; 0xbf6 <__fp_szero>

00000c22 <__mulsf3x>:
 c22:	c6 df       	rcall	.-116    	; 0xbb0 <__fp_split3>
 c24:	a0 f3       	brcs	.-24     	; 0xc0e <__mulsf3+0x4>

00000c26 <__mulsf3_pse>:
 c26:	95 9f       	mul	r25, r21
 c28:	d1 f3       	breq	.-12     	; 0xc1e <__mulsf3+0x14>
 c2a:	95 0f       	add	r25, r21
 c2c:	50 e0       	ldi	r21, 0x00	; 0
 c2e:	55 1f       	adc	r21, r21
 c30:	62 9f       	mul	r22, r18
 c32:	f0 01       	movw	r30, r0
 c34:	72 9f       	mul	r23, r18
 c36:	bb 27       	eor	r27, r27
 c38:	f0 0d       	add	r31, r0
 c3a:	b1 1d       	adc	r27, r1
 c3c:	63 9f       	mul	r22, r19
 c3e:	aa 27       	eor	r26, r26
 c40:	f0 0d       	add	r31, r0
 c42:	b1 1d       	adc	r27, r1
 c44:	aa 1f       	adc	r26, r26
 c46:	64 9f       	mul	r22, r20
 c48:	66 27       	eor	r22, r22
 c4a:	b0 0d       	add	r27, r0
 c4c:	a1 1d       	adc	r26, r1
 c4e:	66 1f       	adc	r22, r22
 c50:	82 9f       	mul	r24, r18
 c52:	22 27       	eor	r18, r18
 c54:	b0 0d       	add	r27, r0
 c56:	a1 1d       	adc	r26, r1
 c58:	62 1f       	adc	r22, r18
 c5a:	73 9f       	mul	r23, r19
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	62 1f       	adc	r22, r18
 c62:	83 9f       	mul	r24, r19
 c64:	a0 0d       	add	r26, r0
 c66:	61 1d       	adc	r22, r1
 c68:	22 1f       	adc	r18, r18
 c6a:	74 9f       	mul	r23, r20
 c6c:	33 27       	eor	r19, r19
 c6e:	a0 0d       	add	r26, r0
 c70:	61 1d       	adc	r22, r1
 c72:	23 1f       	adc	r18, r19
 c74:	84 9f       	mul	r24, r20
 c76:	60 0d       	add	r22, r0
 c78:	21 1d       	adc	r18, r1
 c7a:	82 2f       	mov	r24, r18
 c7c:	76 2f       	mov	r23, r22
 c7e:	6a 2f       	mov	r22, r26
 c80:	11 24       	eor	r1, r1
 c82:	9f 57       	subi	r25, 0x7F	; 127
 c84:	50 40       	sbci	r21, 0x00	; 0
 c86:	8a f0       	brmi	.+34     	; 0xcaa <__mulsf3_pse+0x84>
 c88:	e1 f0       	breq	.+56     	; 0xcc2 <__mulsf3_pse+0x9c>
 c8a:	88 23       	and	r24, r24
 c8c:	4a f0       	brmi	.+18     	; 0xca0 <__mulsf3_pse+0x7a>
 c8e:	ee 0f       	add	r30, r30
 c90:	ff 1f       	adc	r31, r31
 c92:	bb 1f       	adc	r27, r27
 c94:	66 1f       	adc	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	91 50       	subi	r25, 0x01	; 1
 c9c:	50 40       	sbci	r21, 0x00	; 0
 c9e:	a9 f7       	brne	.-22     	; 0xc8a <__mulsf3_pse+0x64>
 ca0:	9e 3f       	cpi	r25, 0xFE	; 254
 ca2:	51 05       	cpc	r21, r1
 ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__mulsf3_pse+0x9c>
 ca6:	5c cf       	rjmp	.-328    	; 0xb60 <__fp_inf>
 ca8:	a6 cf       	rjmp	.-180    	; 0xbf6 <__fp_szero>
 caa:	5f 3f       	cpi	r21, 0xFF	; 255
 cac:	ec f3       	brlt	.-6      	; 0xca8 <__mulsf3_pse+0x82>
 cae:	98 3e       	cpi	r25, 0xE8	; 232
 cb0:	dc f3       	brlt	.-10     	; 0xca8 <__mulsf3_pse+0x82>
 cb2:	86 95       	lsr	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	b7 95       	ror	r27
 cba:	f7 95       	ror	r31
 cbc:	e7 95       	ror	r30
 cbe:	9f 5f       	subi	r25, 0xFF	; 255
 cc0:	c1 f7       	brne	.-16     	; 0xcb2 <__mulsf3_pse+0x8c>
 cc2:	fe 2b       	or	r31, r30
 cc4:	88 0f       	add	r24, r24
 cc6:	91 1d       	adc	r25, r1
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	97 f9       	bld	r25, 7
 cce:	08 95       	ret

00000cd0 <__udivmodhi4>:
 cd0:	aa 1b       	sub	r26, r26
 cd2:	bb 1b       	sub	r27, r27
 cd4:	51 e1       	ldi	r21, 0x11	; 17
 cd6:	07 c0       	rjmp	.+14     	; 0xce6 <__udivmodhi4_ep>

00000cd8 <__udivmodhi4_loop>:
 cd8:	aa 1f       	adc	r26, r26
 cda:	bb 1f       	adc	r27, r27
 cdc:	a6 17       	cp	r26, r22
 cde:	b7 07       	cpc	r27, r23
 ce0:	10 f0       	brcs	.+4      	; 0xce6 <__udivmodhi4_ep>
 ce2:	a6 1b       	sub	r26, r22
 ce4:	b7 0b       	sbc	r27, r23

00000ce6 <__udivmodhi4_ep>:
 ce6:	88 1f       	adc	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	5a 95       	dec	r21
 cec:	a9 f7       	brne	.-22     	; 0xcd8 <__udivmodhi4_loop>
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	bc 01       	movw	r22, r24
 cf4:	cd 01       	movw	r24, r26
 cf6:	08 95       	ret

00000cf8 <__umoddi3>:
 cf8:	68 94       	set
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <__udivdi3_umoddi3>

00000cfc <__udivdi3>:
 cfc:	e8 94       	clt

00000cfe <__udivdi3_umoddi3>:
 cfe:	8f 92       	push	r8
 d00:	9f 92       	push	r9
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	05 d0       	rcall	.+10     	; 0xd12 <__udivmod64>
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	9f 90       	pop	r9
 d0e:	8f 90       	pop	r8
 d10:	08 95       	ret

00000d12 <__udivmod64>:
 d12:	88 24       	eor	r8, r8
 d14:	99 24       	eor	r9, r9
 d16:	f4 01       	movw	r30, r8
 d18:	e4 01       	movw	r28, r8
 d1a:	b0 e4       	ldi	r27, 0x40	; 64
 d1c:	1b 2e       	mov	r1, r27
 d1e:	d4 01       	movw	r26, r8
 d20:	9d 15       	cp	r25, r13
 d22:	8e 04       	cpc	r8, r14
 d24:	9f 04       	cpc	r9, r15
 d26:	e0 07       	cpc	r30, r16
 d28:	f1 07       	cpc	r31, r17
 d2a:	38 f4       	brcc	.+14     	; 0xd3a <__udivmod64+0x28>
 d2c:	fc 01       	movw	r30, r24
 d2e:	4b 01       	movw	r8, r22
 d30:	ca 01       	movw	r24, r20
 d32:	b9 01       	movw	r22, r18
 d34:	ad 01       	movw	r20, r26
 d36:	9e 01       	movw	r18, r28
 d38:	16 94       	lsr	r1
 d3a:	22 0f       	add	r18, r18
 d3c:	33 1f       	adc	r19, r19
 d3e:	44 1f       	adc	r20, r20
 d40:	55 1f       	adc	r21, r21
 d42:	66 1f       	adc	r22, r22
 d44:	77 1f       	adc	r23, r23
 d46:	88 1f       	adc	r24, r24
 d48:	99 1f       	adc	r25, r25
 d4a:	88 1c       	adc	r8, r8
 d4c:	99 1c       	adc	r9, r9
 d4e:	ee 1f       	adc	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	cc 1f       	adc	r28, r28
 d54:	dd 1f       	adc	r29, r29
 d56:	aa 1f       	adc	r26, r26
 d58:	bb 1f       	adc	r27, r27
 d5a:	8a 14       	cp	r8, r10
 d5c:	9b 04       	cpc	r9, r11
 d5e:	ec 05       	cpc	r30, r12
 d60:	fd 05       	cpc	r31, r13
 d62:	ce 05       	cpc	r28, r14
 d64:	df 05       	cpc	r29, r15
 d66:	a0 07       	cpc	r26, r16
 d68:	b1 07       	cpc	r27, r17
 d6a:	48 f0       	brcs	.+18     	; 0xd7e <__udivmod64+0x6c>
 d6c:	8a 18       	sub	r8, r10
 d6e:	9b 08       	sbc	r9, r11
 d70:	ec 09       	sbc	r30, r12
 d72:	fd 09       	sbc	r31, r13
 d74:	ce 09       	sbc	r28, r14
 d76:	df 09       	sbc	r29, r15
 d78:	a0 0b       	sbc	r26, r16
 d7a:	b1 0b       	sbc	r27, r17
 d7c:	21 60       	ori	r18, 0x01	; 1
 d7e:	1a 94       	dec	r1
 d80:	e1 f6       	brne	.-72     	; 0xd3a <__udivmod64+0x28>
 d82:	2e f4       	brtc	.+10     	; 0xd8e <__udivmod64+0x7c>
 d84:	94 01       	movw	r18, r8
 d86:	af 01       	movw	r20, r30
 d88:	be 01       	movw	r22, r28
 d8a:	cd 01       	movw	r24, r26
 d8c:	00 0c       	add	r0, r0
 d8e:	08 95       	ret

00000d90 <__ashrdi3>:
 d90:	97 fb       	bst	r25, 7
 d92:	10 f8       	bld	r1, 0

00000d94 <__lshrdi3>:
 d94:	16 94       	lsr	r1
 d96:	00 08       	sbc	r0, r0
 d98:	0f 93       	push	r16
 d9a:	08 30       	cpi	r16, 0x08	; 8
 d9c:	98 f0       	brcs	.+38     	; 0xdc4 <__lshrdi3+0x30>
 d9e:	08 50       	subi	r16, 0x08	; 8
 da0:	23 2f       	mov	r18, r19
 da2:	34 2f       	mov	r19, r20
 da4:	45 2f       	mov	r20, r21
 da6:	56 2f       	mov	r21, r22
 da8:	67 2f       	mov	r22, r23
 daa:	78 2f       	mov	r23, r24
 dac:	89 2f       	mov	r24, r25
 dae:	90 2d       	mov	r25, r0
 db0:	f4 cf       	rjmp	.-24     	; 0xd9a <__lshrdi3+0x6>
 db2:	05 94       	asr	r0
 db4:	97 95       	ror	r25
 db6:	87 95       	ror	r24
 db8:	77 95       	ror	r23
 dba:	67 95       	ror	r22
 dbc:	57 95       	ror	r21
 dbe:	47 95       	ror	r20
 dc0:	37 95       	ror	r19
 dc2:	27 95       	ror	r18
 dc4:	0a 95       	dec	r16
 dc6:	aa f7       	brpl	.-22     	; 0xdb2 <__lshrdi3+0x1e>
 dc8:	0f 91       	pop	r16
 dca:	08 95       	ret

00000dcc <__adddi3>:
 dcc:	2a 0d       	add	r18, r10
 dce:	3b 1d       	adc	r19, r11
 dd0:	4c 1d       	adc	r20, r12
 dd2:	5d 1d       	adc	r21, r13
 dd4:	6e 1d       	adc	r22, r14
 dd6:	7f 1d       	adc	r23, r15
 dd8:	80 1f       	adc	r24, r16
 dda:	91 1f       	adc	r25, r17
 ddc:	08 95       	ret

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
