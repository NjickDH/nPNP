
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da9  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000884  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  00002bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	60 c1       	rjmp	.+704    	; 0x2e6 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	6e c1       	rjmp	.+732    	; 0x306 <__vector_20>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c3 d0       	rcall	.+390    	; 0x1d8 <main>
  52:	68 c1       	rjmp	.+720    	; 0x324 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  56:	84 b1       	in	r24, 0x04	; 4
  58:	86 60       	ori	r24, 0x06	; 6
  5a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  5c:	85 b1       	in	r24, 0x05	; 5
  5e:	82 60       	ori	r24, 0x02	; 2
  60:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  62:	8a b1       	in	r24, 0x0a	; 10
  64:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  66:	8a b1       	in	r24, 0x0a	; 10
  68:	80 67       	ori	r24, 0x70	; 112
  6a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  6c:	8b b1       	in	r24, 0x0b	; 11
  6e:	80 67       	ori	r24, 0x70	; 112
  70:	8b b9       	out	0x0b, r24	; 11
  72:	08 95       	ret

00000074 <TWI_Init>:
	//TWI_Write_register(INTERRUPT_PRST, 0b10100000); //Interrupt persist - 10 consecutive PS values out of threshold range
}

void TWI_Init()
{
	TWBR = 12; //400kHz = (16MHz) / (16 + 2(12) * (1))
  74:	8c e0       	ldi	r24, 0x0C	; 12
  76:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  7a:	08 95       	ret

0000007c <TWI_Read_register>:
}

uint8_t TWI_Read_register(uint8_t registerValue)
{
	/*set the start condition*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
  7c:	94 ea       	ldi	r25, 0xA4	; 164
  7e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  82:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  86:	99 23       	and	r25, r25
  88:	e4 f7       	brge	.-8      	; 0x82 <TWI_Read_register+0x6>
			
	/*send the address*/
	TWDR = LTR_WRITE;
  8a:	96 e4       	ldi	r25, 0x46	; 70
  8c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT); //trigger I2C action
  90:	94 e8       	ldi	r25, 0x84	; 132
  92:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  96:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  9a:	99 23       	and	r25, r25
  9c:	e4 f7       	brge	.-8      	; 0x96 <TWI_Read_register+0x1a>
				
	/*specify the register*/
	TWDR = registerValue; //register value in the data register
  9e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <TWI_Read_register+0x2c>
			
	/*switch master to read (receiver) mode and slave to transmitter*/
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA); //set another start condition
  b0:	84 ea       	ldi	r24, 0xA4	; 164
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <TWI_Read_register+0x3a>
	
	TWDR = LTR_READ;
  be:	87 e4       	ldi	r24, 0x47	; 71
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ce:	88 23       	and	r24, r24
  d0:	e4 f7       	brge	.-8      	; 0xca <TWI_Read_register+0x4e>
			
	TWCR = (1 << TWEN) | (1 << TWINT);
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  dc:	88 23       	and	r24, r24
  de:	e4 f7       	brge	.-8      	; 0xd8 <TWI_Read_register+0x5c>
	
	/*The received byte is now in the TWDR data register*/
	uint8_t register_value = TWDR;
  e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
			
	/*set stop condition*/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  e4:	94 e9       	ldi	r25, 0x94	; 148
  e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>

	return register_value;
}
  ea:	08 95       	ret

000000ec <TWI_Write_register>:

void TWI_Write_register(uint8_t reg, uint8_t data)
{
	/*set the start condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTA));
  ec:	94 ea       	ldi	r25, 0xA4	; 164
  ee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
  f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  f6:	99 23       	and	r25, r25
  f8:	e4 f7       	brge	.-8      	; 0xf2 <TWI_Write_register+0x6>
	
	/*send the address*/
	TWDR = LTR_WRITE;                         // data to send - ie, address + write bit
  fa:	96 e4       	ldi	r25, 0x46	; 70
  fc:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));  // trigger I2C action
 100:	94 e8       	ldi	r25, 0x84	; 132
 102:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 106:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 10a:	99 23       	and	r25, r25
 10c:	e4 f7       	brge	.-8      	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
	
	/*send the register address*/
	TWDR = reg;                         // register address
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN )| (1 << TWINT));  // trigger I2C action
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
	
	/*send the data byte*/
	TWDR = data;                         // data byte
 120:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
	TWCR = ((1 << TWEN) | (1 << TWINT));  // trigger I2C action
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
	wait_for_completion;
 12a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 12e:	88 23       	and	r24, r24
 130:	e4 f7       	brge	.-8      	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
	
	/*set the stop condition*/
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
 132:	84 e9       	ldi	r24, 0x94	; 148
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
 138:	08 95       	ret

0000013a <LTR559_Init>:
#include <math.h>

void LTR559_Init()
{
	/*Enable interrupt on PC2 - PCINT10*/
	PCICR |= (1 << PCIE1);
 13a:	e8 e6       	ldi	r30, 0x68	; 104
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 144:	ec e6       	ldi	r30, 0x6C	; 108
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
	
	TWI_Init();
 14e:	92 df       	rcall	.-220    	; 0x74 <TWI_Init>
	TWI_Write_register(LTR_INTERRUPT, 0x05); //INT active high - only PS trigger
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	8f e8       	ldi	r24, 0x8F	; 143
 154:	cb df       	rcall	.-106    	; 0xec <TWI_Write_register>
	//TWI_Write_register(PS_LED, 0b11111111); //60Khz LED pulse - DUTY 50% - LED 50mA
	TWI_Write_register(PS_CONTR, 0x03); //Active mode - saturation indicator off
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	81 e8       	ldi	r24, 0x81	; 129
 15a:	c8 df       	rcall	.-112    	; 0xec <TWI_Write_register>
	TWI_Write_register(PS_MEAS_RATE, 0x08); //10ms measurement repeat rate
 15c:	68 e0       	ldi	r22, 0x08	; 8
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	c5 df       	rcall	.-118    	; 0xec <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_0, 0b01011110); //Upper interrupt threshold - 12 bit value
 162:	6e e5       	ldi	r22, 0x5E	; 94
 164:	80 e9       	ldi	r24, 0x90	; 144
 166:	c2 df       	rcall	.-124    	; 0xec <TWI_Write_register>
	TWI_Write_register(PS_THRES_UP_1, 1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e9       	ldi	r24, 0x91	; 145
 16c:	bf df       	rcall	.-130    	; 0xec <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_0, 0); //Lower interrupt threshold - 12 bit value
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	82 e9       	ldi	r24, 0x92	; 146
 172:	bc df       	rcall	.-136    	; 0xec <TWI_Write_register>
	TWI_Write_register(PS_THRES_LOW_1, 0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	83 e9       	ldi	r24, 0x93	; 147
 178:	b9 df       	rcall	.-142    	; 0xec <TWI_Write_register>
	
	TWI_Write_register(0x83, 0b00001000); //Number of pulses
 17a:	68 e0       	ldi	r22, 0x08	; 8
 17c:	83 e8       	ldi	r24, 0x83	; 131
 17e:	b6 df       	rcall	.-148    	; 0xec <TWI_Write_register>
 180:	08 95       	ret

00000182 <TWI_Read_proximity>:
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWSTO));
}


void TWI_Read_proximity()
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
 18a:	8d e8       	ldi	r24, 0x8D	; 141
 18c:	77 df       	rcall	.-274    	; 0x7c <TWI_Read_register>
 18e:	08 2f       	mov	r16, r24
 190:	10 e0       	ldi	r17, 0x00	; 0
	psData += TWI_Read_register(0x8E) << 8;
 192:	8e e8       	ldi	r24, 0x8E	; 142
 194:	73 df       	rcall	.-282    	; 0x7c <TWI_Read_register>
 196:	c8 2f       	mov	r28, r24
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	dc 2f       	mov	r29, r28
 19c:	cc 27       	eor	r28, r28
 19e:	c0 0f       	add	r28, r16
 1a0:	d1 1f       	adc	r29, r17

	RS485_Transmit_byte(psData);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	96 d0       	rcall	.+300    	; 0x2d2 <RS485_Transmit_byte>
	RS485_Transmit_byte(psData >> 8);
 1a6:	8d 2f       	mov	r24, r29
 1a8:	94 d0       	rcall	.+296    	; 0x2d2 <RS485_Transmit_byte>
	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <__vector_4>:

ISR(PCINT1_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
// 	if((PINC & (1 << PINC2)) == (1 << PINC2))
// 	{
 		PORTD ^= (1 << LED_B);
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	89 27       	eor	r24, r25
 1c8:	8b b9       	out	0x0b, r24	; 11
// 		OCR1A = 2313;
// 	}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <main>:

extern volatile uint8_t uartData;
extern int count;
int main(void)
{
	Board_init();		
 1d8:	3e df       	rcall	.-388    	; 0x56 <Board_init>
	Timer_init();
 1da:	58 d0       	rcall	.+176    	; 0x28c <Timer_init>
	RS485_init();
 1dc:	6a d0       	rcall	.+212    	; 0x2b2 <RS485_init>
	LTR559_Init();
 1de:	ad df       	rcall	.-166    	; 0x13a <LTR559_Init>
	
	sei(); //Enable interrupts
 1e0:	78 94       	sei
	OCR1A = 2300;
 1e2:	8c ef       	ldi	r24, 0xFC	; 252
 1e4:	98 e0       	ldi	r25, 0x08	; 8
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
    while (1) 
    {		
		TWI_Read_proximity();
 1ee:	c9 df       	rcall	.-110    	; 0x182 <TWI_Read_proximity>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9c e9       	ldi	r25, 0x9C	; 156
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x1c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x22>
 1fa:	00 00       	nop
		_delay_ms(10);
		
		switch(uartData)
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	83 36       	cpi	r24, 0x63	; 99
 202:	b9 f0       	breq	.+46     	; 0x232 <__DATA_REGION_LENGTH__+0x32>
 204:	86 36       	cpi	r24, 0x66	; 102
 206:	19 f0       	breq	.+6      	; 0x20e <__DATA_REGION_LENGTH__+0xe>
 208:	82 36       	cpi	r24, 0x62	; 98
 20a:	59 f5       	brne	.+86     	; 0x262 <__DATA_REGION_LENGTH__+0x62>
 20c:	09 c0       	rjmp	.+18     	; 0x220 <__DATA_REGION_LENGTH__+0x20>
		{
			case 'f':
				OCR1A = 2287;
 20e:	8f ee       	ldi	r24, 0xEF	; 239
 210:	98 e0       	ldi	r25, 0x08	; 8
 212:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 216:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
				uartData = 0;
 21a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 21e:	21 c0       	rjmp	.+66     	; 0x262 <__DATA_REGION_LENGTH__+0x62>
			case 'b':
				OCR1A = 2339;
 220:	83 e2       	ldi	r24, 0x23	; 35
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 228:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
				uartData = 0;	
 22c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 230:	18 c0       	rjmp	.+48     	; 0x262 <__DATA_REGION_LENGTH__+0x62>
			case 'c':
				OCR1A = 2300;
 232:	8c ef       	ldi	r24, 0xFC	; 252
 234:	98 e0       	ldi	r25, 0x08	; 8
 236:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 23a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
				uartData = 0;
 23e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 242:	0f c0       	rjmp	.+30     	; 0x262 <__DATA_REGION_LENGTH__+0x62>
		}

		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
		{
			OCR1A = 2250;
 244:	8a ec       	ldi	r24, 0xCA	; 202
 246:	98 e0       	ldi	r25, 0x08	; 8
 248:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 24c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	21 ee       	ldi	r18, 0xE1	; 225
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <__DATA_REGION_LENGTH__+0x56>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <__DATA_REGION_LENGTH__+0x60>
 260:	00 00       	nop
				OCR1A = 2300;
				uartData = 0;
				break;
		}

		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 262:	4a 99       	sbic	0x09, 2	; 9
 264:	ef cf       	rjmp	.-34     	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 266:	0f c0       	rjmp	.+30     	; 0x286 <__DATA_REGION_LENGTH__+0x86>
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
		{
			OCR1A = 2339;
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	99 e0       	ldi	r25, 0x09	; 9
 26c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	21 ee       	ldi	r18, 0xE1	; 225
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <__DATA_REGION_LENGTH__+0x7a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <__DATA_REGION_LENGTH__+0x84>
 284:	00 00       	nop
		{
			OCR1A = 2250;
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 286:	4b 99       	sbic	0x09, 3	; 9
 288:	ef cf       	rjmp	.-34     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
 28a:	b1 cf       	rjmp	.-158    	; 0x1ee <main+0x16>

0000028c <Timer_init>:
#include <stdio.h>

void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 292:	83 e1       	ldi	r24, 0x13	; 19
 294:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	OCR1A = 2313; //Duty cycle
 298:	89 e0       	ldi	r24, 0x09	; 9
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 2a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	ICR1  = 2500; //50Hz
 2a4:	84 ec       	ldi	r24, 0xC4	; 196
 2a6:	99 e0       	ldi	r25, 0x09	; 9
 2a8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 2ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 2b0:	08 95       	ret

000002b2 <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 2b2:	87 e6       	ldi	r24, 0x67	; 103
 2b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 2b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 2bc:	e1 ec       	ldi	r30, 0xC1	; 193
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 6d       	ori	r24, 0xD8	; 216
 2c4:	80 83       	st	Z, r24
 2c6:	e2 ec       	ldi	r30, 0xC2	; 194
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	86 60       	ori	r24, 0x06	; 6
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret

000002d2 <RS485_Transmit_byte>:
 2d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7ff0c0>
 2d6:	95 ff       	sbrs	r25, 5
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <RS485_Transmit_byte>
 2da:	95 b1       	in	r25, 0x05	; 5
 2dc:	94 60       	ori	r25, 0x04	; 4
 2de:	95 b9       	out	0x05, r25	; 5
 2e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 2e4:	08 95       	ret

000002e6 <__vector_18>:

ISR(USART_RX_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
	uartData = UDR0; //Received data must be read to clear RXC flag
 2f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <__vector_20>:

ISR(USART_TX_vect)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 312:	85 b1       	in	r24, 0x05	; 5
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	85 b9       	out	0x05, r24	; 5
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
