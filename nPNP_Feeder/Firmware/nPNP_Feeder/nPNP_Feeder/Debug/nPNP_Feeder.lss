
nPNP_Feeder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3a  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000860  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035b  00000000  00000000  00002a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002da2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	81 c0       	rjmp	.+258    	; 0x10c <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	f1 c0       	rjmp	.+482    	; 0x208 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	ff c0       	rjmp	.+510    	; 0x228 <__vector_20>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	77 d0       	rcall	.+238    	; 0x140 <main>
  52:	f9 c0       	rjmp	.+498    	; 0x246 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Board_init>:
#include <util/delay.h>

void Board_init()
{
	/*Configure servo output*/
	DDRB |= (1 << DDB1) | (1 << DDB2); //Servo and RS485 DE pin
  56:	84 b1       	in	r24, 0x04	; 4
  58:	86 60       	ori	r24, 0x06	; 6
  5a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB1) | (0 << PB2); //Servo pin high and RS485 DE pin low
  5c:	85 b1       	in	r24, 0x05	; 5
  5e:	82 60       	ori	r24, 0x02	; 2
  60:	85 b9       	out	0x05, r24	; 5
		
	/*Configure button inputs*/
	DDRD |= (0 << DDD2) | (0 << DDD3); //Button A and B
  62:	8a b1       	in	r24, 0x0a	; 10
  64:	8a b9       	out	0x0a, r24	; 10
		
	/*Configure LED Outputs*/
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Red, blue and green (Respectively)
  66:	8a b1       	in	r24, 0x0a	; 10
  68:	80 67       	ori	r24, 0x70	; 112
  6a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6); //Turn LED off
  6c:	8b b1       	in	r24, 0x0b	; 11
  6e:	80 67       	ori	r24, 0x70	; 112
  70:	8b b9       	out	0x0b, r24	; 11
  72:	08 95       	ret

00000074 <TWI_Init>:
	uint16_t psData = 0;
	psData = TWI_Read_register(0x8D);
	psData += TWI_Read_register(0x8E) << 8;
	RS485_Transmit_byte(psData); //Low PS byte
	RS485_Transmit_byte(psData >> 8); //High PS byte
}
  74:	8c e0       	ldi	r24, 0x0C	; 12
  76:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7ff0b8>
  7a:	08 95       	ret

0000007c <TWI_Write_register>:
  7c:	94 ea       	ldi	r25, 0xA4	; 164
  7e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  82:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  86:	99 23       	and	r25, r25
  88:	e4 f7       	brge	.-8      	; 0x82 <TWI_Write_register+0x6>
  8a:	96 e4       	ldi	r25, 0x46	; 70
  8c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  90:	94 e8       	ldi	r25, 0x84	; 132
  92:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  96:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  9a:	99 23       	and	r25, r25
  9c:	e4 f7       	brge	.-8      	; 0x96 <TWI_Write_register+0x1a>
  9e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <TWI_Write_register+0x2c>
  b0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7ff0bb>
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  be:	88 23       	and	r24, r24
  c0:	e4 f7       	brge	.-8      	; 0xba <TWI_Write_register+0x3e>
  c2:	84 e9       	ldi	r24, 0x94	; 148
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7ff0bc>
  c8:	08 95       	ret

000000ca <LTR559_Init>:
  ca:	e8 e6       	ldi	r30, 0x68	; 104
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
  d4:	ec e6       	ldi	r30, 0x6C	; 108
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 83       	st	Z, r24
  de:	ca df       	rcall	.-108    	; 0x74 <TWI_Init>
  e0:	65 e0       	ldi	r22, 0x05	; 5
  e2:	8f e8       	ldi	r24, 0x8F	; 143
  e4:	cb df       	rcall	.-106    	; 0x7c <TWI_Write_register>
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	81 e8       	ldi	r24, 0x81	; 129
  ea:	c8 df       	rcall	.-112    	; 0x7c <TWI_Write_register>
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	c5 df       	rcall	.-118    	; 0x7c <TWI_Write_register>
  f2:	64 e6       	ldi	r22, 0x64	; 100
  f4:	80 e9       	ldi	r24, 0x90	; 144
  f6:	c2 df       	rcall	.-124    	; 0x7c <TWI_Write_register>
  f8:	65 e0       	ldi	r22, 0x05	; 5
  fa:	81 e9       	ldi	r24, 0x91	; 145
  fc:	bf df       	rcall	.-130    	; 0x7c <TWI_Write_register>
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	82 e9       	ldi	r24, 0x92	; 146
 102:	bc df       	rcall	.-136    	; 0x7c <TWI_Write_register>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	83 e9       	ldi	r24, 0x93	; 147
 108:	b9 df       	rcall	.-142    	; 0x7c <TWI_Write_register>
 10a:	08 95       	ret

0000010c <__vector_4>:

ISR(PCINT1_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	if((PINC & (1 << PINC2)) == (1 << PINC2))
 11a:	32 9b       	sbis	0x06, 2	; 6
 11c:	0a c0       	rjmp	.+20     	; 0x132 <__vector_4+0x26>
	{
		PORTD ^= (1 << LED_B);
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	89 27       	eor	r24, r25
 124:	8b b9       	out	0x0b, r24	; 11
		OCR1A = 2313;
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 12e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
#include <util/delay.h>

extern volatile uint8_t uartData;
int main(void)
{
	Board_init();		
 140:	8a df       	rcall	.-236    	; 0x56 <Board_init>
	Timer_init();
 142:	3f d0       	rcall	.+126    	; 0x1c2 <Timer_init>
	RS485_init();
 144:	51 d0       	rcall	.+162    	; 0x1e8 <RS485_init>
	LTR559_Init();
 146:	c1 df       	rcall	.-126    	; 0xca <LTR559_Init>
	
	sei(); //Enable interrupts
 148:	78 94       	sei
	
    while (1) 
    {		
		switch(uartData)
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	82 36       	cpi	r24, 0x62	; 98
 150:	59 f0       	breq	.+22     	; 0x168 <main+0x28>
 152:	86 36       	cpi	r24, 0x66	; 102
 154:	09 f5       	brne	.+66     	; 0x198 <main+0x58>
		{
			case 'f':
				OCR1A = 2287;
 156:	8f ee       	ldi	r24, 0xEF	; 239
 158:	98 e0       	ldi	r25, 0x08	; 8
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
				uartData = 0;
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 166:	18 c0       	rjmp	.+48     	; 0x198 <main+0x58>
			case 'b':
				OCR1A = 2339;
 168:	83 e2       	ldi	r24, 0x23	; 35
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 170:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
				uartData = 0;	
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 178:	0f c0       	rjmp	.+30     	; 0x198 <main+0x58>
		}

		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
		{
			OCR1A = 2287;
 17a:	8f ee       	ldi	r24, 0xEF	; 239
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	81 ee       	ldi	r24, 0xE1	; 225
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x4c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x56>
 196:	00 00       	nop
				OCR1A = 2339;
				uartData = 0;	
				break;
		}

		while((PIND & (1 << BUTTON_A)) == (1 << BUTTON_A))
 198:	4a 99       	sbic	0x09, 2	; 9
 19a:	ef cf       	rjmp	.-34     	; 0x17a <main+0x3a>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <main+0x7c>
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
		{
			OCR1A = 2339;
 19e:	83 e2       	ldi	r24, 0x23	; 35
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 1a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	81 ee       	ldi	r24, 0xE1	; 225
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x70>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x7a>
 1ba:	00 00       	nop
		{
			OCR1A = 2287;
			_delay_ms(100);
		}
		
		while((PIND & (1 << BUTTON_B)) == (1 << BUTTON_B))
 1bc:	4b 99       	sbic	0x09, 3	; 9
 1be:	ef cf       	rjmp	.-34     	; 0x19e <main+0x5e>
 1c0:	c4 cf       	rjmp	.-120    	; 0x14a <main+0xa>

000001c2 <Timer_init>:
#include <stdio.h>

void Timer_init()
{
	/*Configure timer1*/
	TCCR1A  = ((1 << COM1A1) | (1 << COM1A0)); //Set OC1A on compare match (set output to high level)
 1c2:	80 ec       	ldi	r24, 0xC0	; 192
 1c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7ff080>
	TCCR1B = (1 << WGM13) | (1 << CS10) | (1 << CS11); //PWM, 64 prescaling
 1c8:	83 e1       	ldi	r24, 0x13	; 19
 1ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7ff081>
	OCR1A = 2313; //Duty cycle
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	99 e0       	ldi	r25, 0x09	; 9
 1d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7ff089>
 1d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7ff088>
	ICR1  = 2500; //50Hz
 1da:	84 ec       	ldi	r24, 0xC4	; 196
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7ff087>
 1e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7ff086>
 1e6:	08 95       	ret

000001e8 <RS485_init>:
	while(charCounter < strlen(string))
	{
		RS485_Transmit_byte(*(string + charCounter));
		charCounter++;
	}
}
 1e8:	87 e6       	ldi	r24, 0x67	; 103
 1ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7ff0c4>
 1ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7ff0c5>
 1f2:	e1 ec       	ldi	r30, 0xC1	; 193
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 6d       	ori	r24, 0xD8	; 216
 1fa:	80 83       	st	Z, r24
 1fc:	e2 ec       	ldi	r30, 0xC2	; 194
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	86 60       	ori	r24, 0x06	; 6
 204:	80 83       	st	Z, r24
 206:	08 95       	ret

00000208 <__vector_18>:

ISR(USART_RX_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	uartData = UDR0; //Received data must be read to clear RXC flag
 214:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7ff0c6>
 218:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_20>:

ISR(USART_TX_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
	PORTB &= ~(1 << RS485_DE); //Enable RS485 receiving
 234:	85 b1       	in	r24, 0x05	; 5
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	85 b9       	out	0x05, r24	; 5
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
